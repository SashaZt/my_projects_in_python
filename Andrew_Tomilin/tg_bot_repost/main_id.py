import asyncio
import logging
import os
import random
import re
import sys
from datetime import datetime, timezone
from pathlib import Path

from aiogram import F  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è callback_data
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from loguru import logger
from sqlalchemy import (
    Boolean,
    Column,
    DateTime,
    Index,
    Integer,
    String,
    UniqueConstraint,
    select,
    text,
    update,
)
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import DeclarativeBase, sessionmaker
from telethon.sync import TelegramClient

current_directory = Path.cwd()
configuration_directory = current_directory / "configuration"
log_directory = current_directory / "log"
log_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"
env_file_path = configuration_directory / ".env"

# üîπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Loguru (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
logger.remove()

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    "log_message.log",
    format="{time:YYYY-MM-DD HH:mm:ss} - {level} - {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
logger.add(
    sys.stderr,
    format="<green>{time}</green> - <level>{level}</level> - <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)

# üîπ –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQLAlchemy
for handler in logging.getLogger("sqlalchemy.engine").handlers[:]:
    logging.getLogger("sqlalchemy.engine").removeHandler(handler)

logging.getLogger("sqlalchemy.engine").propagate = False


# üîπ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ SQLAlchemy –≤ Loguru
class InterceptHandler(logging.Handler):
    def emit(self, record):
        level = record.levelname
        logger.opt(depth=6, exception=record.exc_info).log(level, record.getMessage())


sqlalchemy_logger = logging.getLogger("sqlalchemy.engine")
sqlalchemy_logger.setLevel(logging.INFO)
sqlalchemy_logger.addHandler(InterceptHandler())

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
logger.info("üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQLAlchemy –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Loguru!")

load_dotenv(env_file_path)

# üîπ –£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ my.telegram.org
API_ID = 20270186  # –¢–≤–æ–π API ID
API_HASH = "1f58c726fd918821b4fb08a00e919b13"  # –¢–≤–æ–π API Hash
BOT_TOKEN_REPOST = os.getenv("BOT_TOKEN_REPOST")
SESSION_PATH = os.getenv("SESSION_PATH")
CHANNEL_ID_MATERIALS_PRO = int(os.getenv("CHANNEL_ID_MATERIALS_PRO"))
CHANNEL_ID_MATERIALS_FREE = int(os.getenv("CHANNEL_ID_MATERIALS_FREE"))
CHANNEL_ID_MODELS_PRO = int(os.getenv("CHANNEL_ID_MODELS_PRO"))
CHANNEL_ID_MODELS_FREE = int(os.getenv("CHANNEL_ID_MODELS_FREE"))
TIME_A = int(os.getenv("TIME_A"))
TIME_B = int(os.getenv("TIME_B"))

session_directory = current_directory / SESSION_PATH
session_directory.mkdir(parents=True, exist_ok=True)
DB_NAME = os.getenv("DB_NAME")

DATABASE_URL = f"sqlite+aiosqlite:///{os.path.abspath(DB_NAME)}"
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)


bot = Bot(token=BOT_TOKEN_REPOST)
dp = Dispatcher()


# üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Base(DeclarativeBase):
    pass


class RepostMessage(Base):
    __tablename__ = "repost_messages"

    __table_args__ = (
        Index("idx_category_repost", "category", "repost"),
        UniqueConstraint("message_id", "category", name="uix_message_category"),
    )

    id = Column(Integer, primary_key=True)
    message_id = Column(Integer, nullable=False)
    category = Column(String, nullable=False)
    repost = Column(Boolean, default=False)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))
    reposted_at = Column(DateTime, nullable=True)


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


# async def fetch_pending_messages(limit: int = 10):
#     """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î, –≥–¥–µ repost=False"""
#     async with async_session() as session:
#         result = await session.execute(
#             select(RepostMessage).where(RepostMessage.repost == False).limit(limit)
#         )
#         messages = result.scalars().all()
#         return messages  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ RepostMessage


def validate_phone_number(phone_number: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    if not re.match(r"^\+\d{10,15}$", phone_number):
        raise ValueError("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890.")
    return phone_number


def get_session_name():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Å–µ—Å—Å–∏–∏: –≤—ã–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ –≤–≤–æ–¥–∏–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä."""
    sessions = list(session_directory.glob("*.session"))

    if sessions:
        logger.info("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:")
        for i, session in enumerate(sessions, 1):
            logger.info(f"{i}. {session.stem}")

        choice = input(
            " –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "
        ).strip()

        try:
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ, –≤—ã–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            choice_idx = int(choice) - 1
            if 0 <= choice_idx < len(sessions):
                phone_number = sessions[choice_idx].stem
            else:
                phone_number = input(
                    "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890): "
                ).strip()
                phone_number = validate_phone_number(phone_number)
        except ValueError:
            # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_number = validate_phone_number(choice)
    else:
        logger.error("\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        phone_number = input(
            "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890): "
        ).strip()
        phone_number = validate_phone_number(phone_number)

    session_name = session_directory / f"{phone_number}.session"
    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è: {session_name}")
    return phone_number, str(session_name)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Path –≤ —Å—Ç—Ä–æ–∫—É


phone_number, session_name = get_session_name()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è —Å–µ—Å—Å–∏–∏


async def fetch_and_save_messages():

    async with TelegramClient(session_name, API_ID, API_HASH) as client:
        await client.start(phone_number)

        async with async_session() as session:
            batch_size = 500  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω—É –≤—Å—Ç–∞–≤–∫—É
            categories = [
                ("materials_pro", CHANNEL_ID_MATERIALS_PRO),
                ("models_pro", CHANNEL_ID_MODELS_PRO),
            ]

            for category, channel_id in categories:
                # üîπ 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                result = await session.execute(
                    text(
                        "SELECT MAX(message_id) FROM repost_messages WHERE category = :category"
                    ),
                    {"category": category},
                )
                last_message_id = (
                    result.scalar() or 0
                )  # –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

                logger.info(
                    f"üìå –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è {category}: {last_message_id}"
                )

                entity = await client.get_entity(channel_id)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {entity.id} ({category})")

                messages_to_insert = []

                # üîπ 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                async for message in client.iter_messages(
                    entity, reverse=True, min_id=last_message_id, limit=50000
                ):
                    messages_to_insert.append(
                        {
                            "message_id": message.id,
                            "category": category,
                            "repost": False,
                            "created_at": datetime.now(timezone.utc),
                        }
                    )

                    if len(messages_to_insert) >= batch_size:
                        await session.execute(
                            text(
                                """
                                INSERT INTO repost_messages (message_id, category, repost, created_at)
                                VALUES (:message_id, :category, :repost, :created_at)
                                ON CONFLICT(message_id, category) DO NOTHING
                                """
                            ),
                            messages_to_insert,
                        )
                        await session.commit()
                        logger.info(
                            f"‚úÖ {batch_size} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–æ ({category})..."
                        )
                        messages_to_insert = []

                if messages_to_insert:
                    await session.execute(
                        text(
                            """
                            INSERT INTO repost_messages (message_id, category, repost, created_at)
                            VALUES (:message_id, :category, :repost, :created_at)
                            ON CONFLICT(message_id, category) DO NOTHING
                            """
                        ),
                        messages_to_insert,
                    )
                    await session.commit()
                    logger.info(
                        f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages_to_insert)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–æ ({category})..."
                    )

            logger.info("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")


# # # –†–∞–±–æ—á–∏–π –∫–æ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# async def get_and_forward_messages(limit: int = 10):
#     """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î"""
#     messages = await fetch_pending_messages(limit)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è

#     if not messages:
#         print("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
#         return

#     async with TelegramClient("session_name", API_ID, API_HASH) as client:
#         await client.start(PHONE_NUMBER)

#         try:
#             entity = await client.get_entity(CHANNEL_ID_MATERIALS_PRO)
#             print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {entity.id}")
#         except ValueError as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
#             return

#         success_ids = []

#         # üìå –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
#         for msg in messages:
#             try:
#                 await client.forward_messages(
#                     CHANNEL_ID_MATERIALS_FREE,
#                     msg.message_id,
#                     from_peer=CHANNEL_ID_MATERIALS_PRO,
#                 )
#                 print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}")
#                 success_ids.append(msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ—Å—ã–ª–æ–∫
#             except Exception as e:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ {msg.message_id}: {e}")

#         # üìå –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
#         async with async_session() as session:
#             await session.execute(
#                 update(RepostMessage)
#                 .where(RepostMessage.message_id.in_(success_ids))
#                 .values(repost=True, reposted_at=datetime.now(timezone.utc))
#             )
#             await session.commit()

#         print(f"‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {len(success_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π.")


# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì© –ü–µ—Ä–µ—Å–ª–∞—Ç—å Materials Pro ‚Üí Free",
                    callback_data="send_materials",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì© –ü–µ—Ä–µ—Å–ª–∞—Ç—å Models Pro ‚Üí Free", callback_data="send_models"
                )
            ],
        ]
    )
    return keyboard


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    await fetch_and_save_messages()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID

    keyboard = await main_menu()
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard
    )


# üîπ –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
@dp.callback_query(F.data.in_(["send_materials", "send_models"]))
async def ask_for_limit(callback_query: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏."""
    await callback_query.answer()
    category = (
        "materials_pro" if callback_query.data == "send_materials" else "models_pro"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ `callback_query.message`
    await callback_query.message.answer(
        f"üì© –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑ {category.replace('_', ' ')}? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    dp.callback_query_data = {"category": category}


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text.regexp(r"^\d+$"))  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —á–∏—Å–µ–ª
async def process_limit_input(message: types.Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    limit = int(message.text)

    if limit <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
        return

    category = dp.callback_query_data.get(
        "category", "materials_pro"
    )  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await message.answer(
        f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {category.replace('_', ' ')}..."
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    await get_and_forward_messages(category, limit)

    await message.answer(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π!")


# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
async def fetch_pending_messages(category: str, limit: int = 10):
    async with async_session() as session:
        result = await session.execute(
            select(RepostMessage.message_id)
            .where(RepostMessage.category == category, RepostMessage.repost == False)
            .limit(limit)
        )
        return result.scalars().all()


# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
async def update_reposted_messages(message_ids):
    async with async_session() as session:
        await session.execute(
            update(RepostMessage)
            .where(RepostMessage.message_id.in_(message_ids))
            .values(repost=True, reposted_at=datetime.now(timezone.utc))
        )
        await session.commit()


# üîπ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def get_and_forward_messages(category: str, limit: int):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    message_ids = await fetch_pending_messages(category, limit)

    if not message_ids:
        return

    to_channel = (
        CHANNEL_ID_MATERIALS_FREE
        if category == "materials_pro"
        else CHANNEL_ID_MODELS_FREE
    )
    from_channel = (
        CHANNEL_ID_MATERIALS_PRO
        if category == "materials_pro"
        else CHANNEL_ID_MODELS_PRO
    )
    async with TelegramClient(session_name, API_ID, API_HASH) as client:
        await client.start(phone_number)
        success_ids = []
        for msg_id in message_ids:
            try:
                await client.forward_messages(
                    to_channel, msg_id, from_peer=from_channel
                )
                success_ids.append(msg_id)
                # üîπ –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É
                delay = random.uniform(TIME_A, TIME_B)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                logger.info(
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º..."
                )
                await asyncio.sleep(delay)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ {msg_id}: {e}")

    if success_ids:
        await update_reposted_messages(success_ids)


async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    # try:
    #     logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    #     await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    # except (KeyboardInterrupt, SystemExit):
    #     logger.warning("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    # finally:
    #     logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    #     await bot.session.close()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    #     logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
