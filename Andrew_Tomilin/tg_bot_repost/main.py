import asyncio
import os
from datetime import datetime  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from datetime import timezone  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç timezone

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from aiogram.types import BotCommand, CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from configuration.logger_setup import logger
from dotenv import load_dotenv
from sqlalchemy import DateTime  # –ò —ç—Ç–æ—Ç —Ç–æ–∂–µ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ created_at
from sqlalchemy import (  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç func
    Boolean,
    Column,
    Index,
    Integer,
    String,
    UniqueConstraint,
    func,
    select,
    update,
)
from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine
from sqlalchemy.orm import DeclarativeBase

env_path = os.path.join(os.getcwd(), "configuration", ".env")
load_dotenv(env_path)
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª–æ–≤
CHANNEL_ID_MODELS_PRO = int(os.getenv("CHANNEL_ID_MODELS_PRO"))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
CHANNEL_ID_MODELS_FREE = int(os.getenv("CHANNEL_ID_MODELS_FREE"))
CHANNEL_ID_MATERIALS_PRO = int(os.getenv("CHANNEL_ID_MATERIALS_PRO"))
CHANNEL_ID_MATERIALS_FREE = int(os.getenv("CHANNEL_ID_MATERIALS_FREE"))
BOT_TOKEN_REPOST = os.getenv("BOT_TOKEN_REPOST")

DB_NAME = os.getenv("DB_NAME")
TABLE_NAME = os.getenv("TABLE_NAME")
TIME_A = int(os.getenv("TIME_A", 5))
TIME_B = int(os.getenv("TIME_B", 10))

# –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
if not all(
    [
        CHANNEL_ID_MODELS_PRO,
        CHANNEL_ID_MODELS_FREE,
        CHANNEL_ID_MATERIALS_PRO,
        CHANNEL_ID_MATERIALS_FREE,
    ]
):
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=BOT_TOKEN_REPOST)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

os.makedirs(os.path.dirname(DB_NAME), exist_ok=True)
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SQLite)
DATABASE_URL = f"sqlite+aiosqlite:///{os.path.abspath(DB_NAME)}"
engine = create_async_engine(DATABASE_URL, echo=True)
SessionLocal = async_sessionmaker(engine, expire_on_commit=False)


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RepostStates(StatesGroup):
    waiting_count_models = State()
    waiting_count_materials = State()


# üîπ –ú–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Base(DeclarativeBase):
    pass


class RepostMessage(Base):
    __tablename__ = TABLE_NAME

    __table_args__ = (
        Index("idx_category_repost", "category", "repost"),
        # –°–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        UniqueConstraint("message_id", "category", name="uix_message_category"),
    )

    id = Column(Integer, primary_key=True)
    message_id = Column(Integer, nullable=False)  # –£–±—Ä–∞–ª–∏ unique=True
    category = Column(String, nullable=False)
    repost = Column(Boolean, default=False)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))
    reposted_at = Column(DateTime, nullable=True)


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π
def get_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="Models Pro ‚Üí Free", callback_data="repost_models")
    )
    builder.add(
        InlineKeyboardButton(
            text="Materials Pro ‚Üí Free", callback_data="repost_materials"
        )
    )
    return builder.as_markup()


async def set_commands():
    commands = [
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–µ—Ä–µ—Å—ã–ª–∫–∏"),
        BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"),
        BotCommand(command="send_all", description="–ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"),
    ]
    await bot.set_my_commands(commands)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
@dp.message(Command("menu"))
async def show_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("repost_"))
async def handle_repost(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace("repost_", "")

    if category == "models":
        await state.set_state(RepostStates.waiting_count_models)
    else:
        await state.set_state(RepostStates.waiting_count_materials)

    await callback.message.answer(
        f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ {category.title()}:"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
@dp.message(lambda message: message.text.isdigit())
async def process_count(message: Message, state: FSMContext):
    count = int(message.text)
    if count <= 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    if count > 100:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ - 100 —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    current_state = await state.get_state()

    if current_state == RepostStates.waiting_count_models:
        category = "models"
        from_chat = CHANNEL_ID_MODELS_PRO
        to_chat = CHANNEL_ID_MODELS_FREE
    elif current_state == RepostStates.waiting_count_materials:
        category = "materials"
        from_chat = CHANNEL_ID_MATERIALS_PRO
        to_chat = CHANNEL_ID_MATERIALS_FREE
    else:
        return

    # # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    # if category == "models":
    #     from_chat = CHANNEL_ID_MODELS_PRO
    #     to_chat = CHANNEL_ID_MODELS_FREE
    # else:
    #     from_chat = CHANNEL_ID_MATERIALS_PRO
    #     to_chat = CHANNEL_ID_MATERIALS_FREE

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    async with SessionLocal() as session:
        query = (
            select(RepostMessage)
            .where(RepostMessage.category == category, RepostMessage.repost == False)
            .order_by(RepostMessage.message_id.asc())
            .limit(count)
        )

        messages = (await session.execute(query)).scalars().all()

        if not messages:
            await message.answer(
                f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}"
            )
            await state.clear()
            return

        success_count = 0
        for msg in messages:
            try:
                await bot.forward_message(
                    chat_id=to_chat, from_chat_id=from_chat, message_id=msg.message_id
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                msg.repost = True
                msg.reposted_at = datetime.now(timezone.utc)
                success_count += 1

                if success_count % 10 == 0:
                    await message.answer(
                        f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ {success_count} –∏–∑ {len(messages)}"
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.message_id}: {e}")

        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await message.answer(
            f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {success_count} –∏–∑ {len(messages)}"
        )

    await state.clear()


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
async def init_db():

    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


# üîπ –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
async def fetch_all_messages(chat_id: int, category: str):
    async with SessionLocal() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            min_id, max_id, total_count = await check_database_state(category)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            last_message = await bot.send_message(chat_id=chat_id, text=".")
            last_message_id = last_message.message_id
            await bot.delete_message(chat_id=chat_id, message_id=last_message_id)

            if max_id and max_id >= last_message_id:
                logger.info(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            start_id = (max_id or 0) + 1
            new_messages = []

            for msg_id in range(start_id, last_message_id + 1):
                new_messages.append(
                    {
                        "message_id": msg_id,
                        "category": category,
                        "created_at": datetime.now(timezone.utc),
                        "repost": False,
                    }
                )

                if len(new_messages) >= 100:
                    await session.execute(
                        RepostMessage.__table__.insert(), new_messages
                    )
                    await session.commit()
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                    new_messages = []

            if new_messages:
                await session.execute(RepostMessage.__table__.insert(), new_messages)
                await session.commit()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await check_database_state(category)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await session.rollback()
            raise


# üîπ –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def sync_messages():
    try:
        # await clean_and_fetch_messages(CHANNEL_ID_MODELS_PRO, "models")
        await fetch_all_messages(CHANNEL_ID_MODELS_PRO, "models")
        await fetch_all_messages(CHANNEL_ID_MATERIALS_PRO, "materials")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        raise


# üîπ –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def send_batch(category: str, from_chat: int, to_chat: int):
    async with SessionLocal() as session:
        result = await session.execute(
            select(RepostMessage)
            .where(RepostMessage.category == category, RepostMessage.repost == False)
            .limit(100)
        )
        messages = result.scalars().all()

        if not messages:
            return f"‚úÖ –í—Å–µ {category} —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –ø–µ—Ä–µ—Å–ª–∞–Ω—ã!"

        try:
            message_ids = [msg.message_id for msg in messages]
            await bot.copy_messages(
                chat_id=to_chat, from_chat_id=from_chat, message_ids=message_ids
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            for msg in messages:
                await session.execute(
                    update(RepostMessage)
                    .where(RepostMessage.message_id == msg.message_id)
                    .values(repost=True, reposted_at=datetime.now(timezone.utc))
                )
            await session.commit()

            return f"üì® –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {category}!"

        except Exception as e:
            logger.error(f"‚ö† –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            await session.rollback()
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π {category}: {str(e)}"


# üîπ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Command("send_all"))
async def send_all_messages(message: Message):
    result_models = await send_batch(
        "models", CHANNEL_ID_MODELS_PRO, CHANNEL_ID_MODELS_FREE
    )
    result_materials = await send_batch(
        "materials", CHANNEL_ID_MATERIALS_PRO, CHANNEL_ID_MATERIALS_FREE
    )

    await message.answer(f"{result_models}\n{result_materials}")


@dp.message(Command("cancel"))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def check_database_state(category: str):
    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID
        min_id = await session.scalar(
            select(RepostMessage.message_id)
            .where(RepostMessage.category == category)
            .order_by(RepostMessage.message_id.asc())
            .limit(1)
        )

        max_id = await session.scalar(
            select(RepostMessage.message_id)
            .where(RepostMessage.category == category)
            .order_by(RepostMessage.message_id.desc())
            .limit(1)
        )

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_count = await session.scalar(
            select(func.count(RepostMessage.id)).where(
                RepostMessage.category == category
            )
        )

        logger.info(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID: {min_id}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID: {max_id}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}"
        )

        return min_id, max_id, total_count


# async def clean_and_fetch_messages(chat_id: int, category: str):
#     async with SessionLocal() as session:
#         try:
#             # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#             await session.execute(
#                 delete(RepostMessage).where(RepostMessage.category == category)
#             )
#             await session.commit()
#             logger.info(f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")

#             # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
#             last_message = await bot.send_message(chat_id=chat_id, text=".")
#             last_message_id = last_message.message_id
#             await bot.delete_message(chat_id=chat_id, message_id=last_message_id)

#             # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#             total_saved = 0
#             batch = []

#             for msg_id in range(1, last_message_id + 1):
#                 batch.append(
#                     {
#                         "message_id": msg_id,
#                         "category": category,
#                         "created_at": datetime.now(timezone.utc),
#                         "repost": False,
#                     }
#                 )

#                 if len(batch) >= 100:
#                     await session.execute(RepostMessage.__table__.insert(), batch)
#                     await session.commit()
#                     total_saved += len(batch)
#                     logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total_saved} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {category}")
#                     batch = []

#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
#             if batch:
#                 await session.execute(RepostMessage.__table__.insert(), batch)
#                 await session.commit()
#                 total_saved += len(batch)

#             logger.info(
#                 f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {total_saved} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}. "
#                 f"–î–∏–∞–ø–∞–∑–æ–Ω ID: 1 - {last_message_id}"
#             )

#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞: {e}")
#             await session.rollback()
#             raise


async def on_shutdown():
    logger.info("Shutting down...")
    await bot.session.close()


async def main():
    logger.info("Starting bot...")
    logger.info(f"Models Pro Channel ID: {CHANNEL_ID_MODELS_PRO}")
    logger.info(f"Models Free Channel ID: {CHANNEL_ID_MODELS_FREE}")
    logger.info(f"Materials Pro Channel ID: {CHANNEL_ID_MATERIALS_PRO}")
    logger.info(f"Materials Free Channel ID: {CHANNEL_ID_MATERIALS_FREE}")

    try:
        await init_db()
        await set_commands()  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        await sync_messages()
        logger.info("Bot is ready to work!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot stopped due to error: {e}")
    finally:
        asyncio.run(on_shutdown())
