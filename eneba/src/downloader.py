import asyncio
import hashlib
import random
import re
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional

import aiofiles
import pandas as pd
from curl_cffi.requests import AsyncSession
from path_manager import get_path
from rozetka_path_manager import (
    get_rozetka_path,
    select_rozetka_category_and_init_paths,
)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent  # –∏–∑ src/ –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
sys.path.insert(0, str(project_root))

from config import Config, logger

EUROPEAN_COUNTRIES = [
    "eu",
    "at",
    "be",
    "bg",
    "hr",
    "cy",
    "cz",
    "dk",
    "ee",
    "fi",
    "fr",
    "de",
    "gr",
    "hu",
    "is",
    "ie",
    "it",
    "lv",
    "li",
    "lt",
    "mt",
    "nl",
    "no",
    "pl",
    "pt",
    "ro",
    "sk",
    "si",
    "es",
    "se",
    "ch",
    "uk",
    "ua",
]


def get_random_european_country():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –µ–≤—Ä–æ–ø–µ–π—Å–∫—É—é —Å—Ç—Ä–∞–Ω—É"""
    return random.choice(EUROPEAN_COUNTRIES)


def add_country_to_proxy(base_proxy: str, country: str = None) -> str:
    """
    –î–æ–±–∞–≤–∏—Ç—å country_code –∫ ScraperAPI –ø—Ä–æ–∫—Å–∏

    Args:
        base_proxy: –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ (http://scraperapi:API_KEY@proxy-server.scraperapi.com:8001)
        country: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–µ—Å–ª–∏ None, –≤—ã–±–µ—Ä–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è)

    Returns:
        –ü—Ä–æ–∫—Å–∏ —Å –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º
    """
    if country is None:
        country = get_random_european_country()

    # –ó–∞–º–µ–Ω—è–µ–º scraperapi –Ω–∞ scraperapi.country_code=XX
    modified_proxy = base_proxy.replace(
        "scraperapi:", f"scraperapi.country_code={country}:"
    )

    return modified_proxy


headers = {
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.9",
    "Accept-Encoding": "gzip, deflate, br",
    "DNT": "1",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "none",
    "Sec-Fetch-User": "?1",
    "Cache-Control": "max-age=0",
}


class Downloader:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å TLS fingerprinting –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –≠–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Chrome, Firefox, Safari, Edge)
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    - –†–æ—Ç–∞—Ü–∏—è User-Agent'–æ–≤
    """

    def __init__(self, config: Config, proxy: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Config
            proxy: –ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "http://user:pass@host:port" –∏–ª–∏ None (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ—Ç—Å—è –∏–∑ config)
        """
        self.config = config.client

        # –ü—Ä–æ–∫—Å–∏: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –∏–Ω–∞—á–µ None
        if proxy is not None:
            self.proxy = proxy
        elif self.config.proxy:
            self.proxy = self.config.proxy
        else:
            self.proxy = None

        self.semaphore = asyncio.Semaphore(self.config.max_workers)
        self.session_stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "retry_attempts": 0,
        }

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        # self.output_path = paths.html

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        self.logger = logger

    def _get_filename_from_url(self, url: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL"""
        url_hash = hashlib.md5(url.encode()).hexdigest()
        return f"{url_hash}.html"

    def is_russia_blocked(self, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –†–æ—Å—Å–∏–∏"""
        if not content:
            return False

        russia_patterns = [
            r"Eneba is not available in Russia",
            r"We support freedom",
            r"not available in Russia",
        ]

        for pattern in russia_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                return True
        return False

    async def _make_request(self, url: str) -> Optional[str]:
        for attempt in range(self.config.retry_attempts):
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                if attempt > 0:
                    await asyncio.sleep(self.config.retry_delay * attempt)
                else:
                    await asyncio.sleep(
                        random.uniform(self.config.delay_min, self.config.delay_max)
                    )

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è curl_cffi
                proxy_config = None
                if self.proxy:
                    proxy_with_country = add_country_to_proxy(self.proxy)
                    proxy_config = {
                        "http": proxy_with_country,
                        "https": proxy_with_country,
                    }
                    country = proxy_with_country.split("country_code=")[1].split(":")[0]
                    # self.logger.debug(f"üá™üá∫ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞–Ω—É: {country}")
                async with AsyncSession() as session:

                    response = await session.get(
                        url,
                        headers=headers,
                        proxies=proxy_config,
                        verify=False,
                        timeout=self.config.timeout,
                    )

                    self.session_stats["total_requests"] += 1

                    if response.status_code == 200:
                        content = response.text
                        if self.is_russia_blocked(content):
                            self.logger.warning(
                                f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –†–æ—Å—Å–∏–∏ –¥–ª—è {url}"
                            )
                            self.logger.info(
                                f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–≤—Ç–æ—Ä..."
                            )

                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                            self.session_stats["retry_attempts"] += 1

                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                            await asyncio.sleep(random.uniform(2, 5))

                            # –í–ê–ñ–ù–û: continue - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞
                            continue

                        # –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                        self.session_stats["successful_requests"] += 1
                        self.logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {url}")
                        return content
                    else:
                        self.logger.warning(f"‚ùå HTTP {response.status_code} –¥–ª—è {url}")
                        if response.status_code in [403, 429]:
                            await asyncio.sleep(random.uniform(5, 10))
                        raise Exception(f"HTTP {response.status_code}")

            except Exception as e:
                self.session_stats["retry_attempts"] += 1
                self.logger.error(
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.retry_attempts} –¥–ª—è {url}: {e}"
                )

                if attempt == self.config.retry_attempts - 1:
                    self.session_stats["failed_requests"] += 1
                    self.logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url} –ø–æ—Å–ª–µ {self.config.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫"
                    )

        return None

    async def download_url(self, url: str, filename: Optional[str] = None) -> bool:
        """
        –°–∫–∞—á–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É

        Args:
            url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        async with self.semaphore:
            try:
                # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                # if filename is None:
                #     filename = self._get_filename_from_url(url)

                # file_path = self.output_path / filename

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if filename.exists():
                    self.logger.info(f"‚è≠Ô∏è –§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return True

                # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = await self._make_request(url)

                if content:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                    async with aiofiles.open(filename, "w", encoding="utf-8") as f:
                        await f.write(content)

                    self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                    return True
                else:
                    return False

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")
                return False

    async def download_urls(
        self, urls: List[str], custom_filenames: Optional[Dict[str, str]] = None
    ) -> Dict[str, bool]:
        """
        –°–∫–∞—á–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ URL'–æ–≤

        Args:
            urls: –°–ø–∏—Å–æ–∫ URL'–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            custom_filenames: –°–ª–æ–≤–∞—Ä—å {url: filename} –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å {url: success_status}
        """
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(urls)} URL'–æ–≤")
        self.logger.info(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {self.config.max_workers} –ø–æ—Ç–æ–∫–æ–≤, –ø—Ä–æ–∫—Å–∏: {'–î–∞' if self.proxy else '–ù–µ—Ç'}"
        )
        html_product = get_rozetka_path("html_product")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = []
        for url in urls:
            product_slug = url.get("product_slug", "")
            file_name = product_slug.replace("-", "_")
            html_file = html_product / f"{file_name}.html"
            if html_file.exists():
                self.logger.info(f"‚è≠Ô∏è –§–∞–π–ª {html_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                # return True
                continue
            url = f"https://www.eneba.com/{product_slug}"
            task = self.download_url(url, html_file)
            tasks.append((url, task))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        results = {}
        completed_tasks = await asyncio.gather(
            *[task for _, task in tasks], return_exceptions=True
        )

        for (url, _), result in zip(tasks, completed_tasks):
            if isinstance(result, Exception):
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {url}: {result}")
                results[url] = False
            else:
                results[url] = result

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for success in results.values() if success)
        self.logger.info(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{len(urls)} —É—Å–ø–µ—à–Ω–æ")
        self.logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏: {self.session_stats}")

        return results

    async def download_from_csv(
        self, csv_file: str, url_column: str = "url"
    ) -> Dict[str, bool]:
        """
        –°–∫–∞—á–∞—Ç—å URL'—ã –∏–∑ CSV —Ñ–∞–π–ª–∞

        Args:
            csv_file: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
            url_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å URL'–∞–º–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å {url: success_status}
        """
        try:
            df = pd.read_csv(csv_file)
            urls = df[url_column].tolist()

            self.logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(urls)} URL'–æ–≤ –∏–∑ {csv_file}")
            return await self.download_urls(urls)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            return {}

    async def _make_post_request(
        self, url: str, data: Optional[Dict] = None, json_data: Optional[Dict] = None
    ) -> Optional[str]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è Eneba

        Args:
            url: URL –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            data: Form data (application/x-www-form-urlencoded)
            json_data: JSON data (application/json)

        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        for attempt in range(self.config.retry_attempts):
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                if attempt > 0:
                    await asyncio.sleep(self.config.retry_delay * attempt)
                else:
                    await asyncio.sleep(
                        random.uniform(self.config.delay_min, self.config.delay_max)
                    )

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è curl_cffi
                proxy_config = None
                if self.proxy:
                    proxy_with_country = add_country_to_proxy(self.proxy)
                    proxy_config = {
                        "http": proxy_with_country,
                        "https": proxy_with_country,
                    }

                async with AsyncSession() as session:
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Eneba GraphQL API
                    headers = {
                        "accept": "*/*",
                        "accept-language": "en",
                        "cache-control": "no-cache",
                        "content-type": "application/json",
                        "dnt": "1",
                        "origin": "https://www.eneba.com",
                        "pragma": "no-cache",
                        "priority": "u=1, i",
                        "sec-ch-ua": '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
                        "sec-ch-ua-mobile": "?0",
                        "sec-ch-ua-platform": '"macOS"',
                        "sec-fetch-dest": "empty",
                        "sec-fetch-mode": "cors",
                        "sec-fetch-site": "same-origin",
                        "sec-gpc": "1",
                        "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
                        "x-version": "1.3109.2",
                    }

                    response = await session.post(
                        url,
                        headers=headers,
                        data=data,
                        json=json_data,
                        proxies=proxy_config,
                        verify=False,
                        timeout=self.config.timeout,
                    )

                    self.session_stats["total_requests"] += 1

                    if response.status_code in [200, 201, 202]:
                        content = response.text
                        self.session_stats["successful_requests"] += 1
                        self.logger.debug(f"‚úÖ POST —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {url}")
                        return content
                    else:
                        self.logger.warning(
                            f"‚ùå POST HTTP {response.status_code} –¥–ª—è {url}"
                        )
                        if response.status_code in [403, 429]:
                            await asyncio.sleep(random.uniform(5, 10))
                        raise Exception(f"HTTP {response.status_code}")

            except Exception as e:
                self.session_stats["retry_attempts"] += 1
                self.logger.error(
                    f"üîÑ POST –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.retry_attempts} –¥–ª—è {url}: {e}"
                )

                if attempt == self.config.retry_attempts - 1:
                    self.session_stats["failed_requests"] += 1
                    self.logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å POST {url} –ø–æ—Å–ª–µ {self.config.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫"
                    )

        return None

    async def post_url(
        self,
        url: str,
        data: Optional[Dict] = None,
        json_data: Optional[Dict] = None,
        filename: Optional[str] = None,
    ) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç

        Args:
            url: URL –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            data: Form data (–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è form-encoded)
            json_data: JSON data (—Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON)
            filename: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (Path –æ–±—ä–µ–∫—Ç)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        async with self.semaphore:
            try:
                # # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                # if filename and filename.exists():
                #     self.logger.info(f"‚è≠Ô∏è –§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                #     return True

                # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
                content = await self._make_post_request(url, data, json_data)

                if content:
                    if filename:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                        async with aiofiles.open(filename, "w", encoding="utf-8") as f:
                            await f.write(content)
                        self.logger.info(f"üíæ POST —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                    return True
                else:
                    return False

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ POST –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
                return False

    async def post_skus(
        self,
        base_url: str,
        skugs: List[Dict],  # –ò–∑–º–µ–Ω–µ–Ω–æ: List[Dict] –≤–º–µ—Å—Ç–æ List[str]
        data_template: Optional[Dict] = None,
        json_template: Optional[Dict] = None,
    ) -> Dict[str, bool]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ SKU

        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
            skugs: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π SKU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            data_template: –®–∞–±–ª–æ–Ω form data (SKU –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ {slug})
            json_template: –®–∞–±–ª–æ–Ω JSON data (SKU –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ {slug})
            custom_filenames: –°–ª–æ–≤–∞—Ä—å {product_slug: filename} –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å {product_slug: success_status}
        """
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è {len(skugs)} SKU")
        self.logger.info(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {self.config.max_workers} –ø–æ—Ç–æ–∫–æ–≤, –ø—Ä–æ–∫—Å–∏: {'–î–∞' if self.proxy else '–ù–µ—Ç'}"
        )

        html_product = get_path("html_product")
        json_directory = get_path("json_dir")
        category_id = get_path("category_id")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π
        if not (html_product and json_directory):
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return {}

        self.logger.info(f"–§–∞–π–ª—ã HTML –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {html_product}")
        self.logger.info(f"–§–∞–π–ª—ã JSON –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {json_directory}")

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã {slug} –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
        def replace_in_dict(obj, slug_value):
            if isinstance(obj, dict):
                return {k: replace_in_dict(v, slug_value) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [replace_in_dict(item, slug_value) for item in obj]
            elif isinstance(obj, str):
                return obj.format(slug=slug_value)
            else:
                return obj

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = []

        # –£–ë–†–ê–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï [:1] - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ SKU
        for skug in skugs:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º product_slug –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                product_slug = skug.get("product_slug")
                if not product_slug:
                    self.logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç product_slug –≤ –∑–∞–ø–∏—Å–∏: {skug}")
                    continue

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU
                post_data = None
                post_json = None

                if data_template:
                    post_data = replace_in_dict(data_template, product_slug)

                if json_template:
                    post_json = replace_in_dict(json_template, product_slug)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (–∑–∞–º–µ–Ω—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
                safe_slug = (
                    product_slug.replace("/", "_").replace("\\", "_").replace(":", "_")
                )

                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
                filename = json_directory / f"{safe_slug}_price.json"

                # URL –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å {slug} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
                if "{slug}" in base_url:
                    url = base_url.format(slug=product_slug)
                else:
                    url = base_url

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task = self.post_url(url, post_data, post_json, filename)
                tasks.append((product_slug, task))

                self.logger.debug(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è: {product_slug}")

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –¥–ª—è {skug}: {e}")
                continue

        if not tasks:
            self.logger.warning("‚ö†Ô∏è –ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return {}

        self.logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        results = {}
        completed_tasks = await asyncio.gather(
            *[task for _, task in tasks], return_exceptions=True
        )

        for (product_slug, _), result in zip(tasks, completed_tasks):
            if isinstance(result, Exception):
                self.logger.error(
                    f"‚ùå POST –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è SKU {product_slug}: {result}"
                )
                results[product_slug] = False
            else:
                results[product_slug] = result
                status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result else "‚ùå –û—à–∏–±–∫–∞"
                self.logger.debug(f"{status}: {product_slug}")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for success in results.values() if success)
        failed = len(results) - successful

        self.logger.info(f"üìä POST –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{len(results)} SKU —É—Å–ø–µ—à–Ω–æ")
        if failed > 0:
            self.logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {failed}")
        self.logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏: {self.session_stats}")

        return results

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        return self.session_stats.copy()

    def reset_stats(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        self.session_stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "retry_attempts": 0,
        }

    @classmethod
    def create_from_config(
        cls, config_path: Optional[str] = None, proxy_override: Optional[str] = None
    ):
        """
        –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
            proxy_override: –ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä Downloader
        """
        config = Config.load()
        return cls(config, proxy_override)


config = Config.load()
downloader = Downloader(config)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def download_urls_simple(
    urls: List[str], max_workers: int = 10, proxy: Optional[str] = None
) -> Dict[str, bool]:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è URL'–æ–≤ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

    Args:
        urls: –°–ø–∏—Å–æ–∫ URL'–æ–≤
        max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        proxy: –ü—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    config = Config.load()
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º max_workers –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    config.client.max_workers = max_workers

    downloader = Downloader(config, proxy)
    return await downloader.download_urls(urls)


async def download_from_csv_simple(
    csv_file: str, max_workers: int = 10, proxy: Optional[str] = None
) -> Dict[str, bool]:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞

    Args:
        csv_file: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        proxy: –ü—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    config = Config.load()
    config.client.max_workers = max_workers

    downloader = Downloader(config, proxy)
    return await downloader.download_from_csv(csv_file)


# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# async def main():
#     """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ Downloader —Å –≤–∞—à–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º"""

#     # –°–ø–∏—Å–æ–∫ URL'–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
#     start_xml_path = paths.data / "sitemap.xml"
#     output_csv_file = paths.data / "output.csv"
#     df = pd.read_csv(output_csv_file, encoding="utf-8")
#     urls = df["url"].tolist()
#     # –°–∫–∞—á–∏–≤–∞–µ–º
#     results = await downloader.download_urls(urls)

#     # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
#     logger.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
#     for url, success in results.items():
#         status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
#         logger.info(f"{status}: {url}")

#     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
#     logger.info(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {downloader.get_stats()}")


# if __name__ == "__main__":
#     asyncio.run(main())
