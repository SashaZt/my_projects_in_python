# src/main_controller.py
import asyncio
import json
import math
import shutil
import time
from pathlib import Path

from config_utils import load_config
from downloader import downloader
from logger import logger
from main_bd import (
    get_product_data,
    get_product_data_rozetka,
    update_prices_and_images,
    update_rozetka_prices_and_images,
)
from main_page import (
    download_pages,
    extract_ids_from_excel,
    process_html_files,
    update_prices_from_config,
    update_prices_from_config_rozetka,
)
from main_pl import run as run_playwright
from main_product import (
    export_data_to_excel,
    export_data_to_excel_rozetka,
    parse_json_and_html_files,
    parse_json_and_html_files_rozetka,
)
from path_manager import get_path, is_initialized, select_category_and_init_paths
from playwright.async_api import async_playwright
from rozetka_page import process_rozetka_html_files
from rozetka_path_manager import (
    get_rozetka_path,
    select_rozetka_category_and_init_paths,
)

config = load_config()
BASE_DIR = Path(__file__).parent.parent
cookies = config["cookies"]
headers = config["headers"]


async def run_playwright_process():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Playwright"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ Playwright")

    category_id = get_path("category_id")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    skugs = get_product_data(category_id=category_id)

    if not skugs:
        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
        return False

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(skugs)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    async with async_playwright() as playwright:
        await run_playwright(playwright, skugs)

    return True


async def get_products():

    category_id = get_path("category_id")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    skugs = get_product_data(category_id=category_id)

    if not skugs:
        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
        return False

    # JSON template –¥–ª—è GraphQL –∑–∞–ø—Ä–æ—Å–∞ (–ù–ï form_template!)
    json_template = {
        "operationName": "WickedNoCache",
        "variables": {
            "isAutoRenewActive": False,
            "isProductVariantSearch": False,
            "isCheapestAuctionIncluded": True,
            "currency": "UAH",
            "context": {
                "country": "UA",
                "region": "ukraine",
                "language": "en",
            },
            "slug": "{slug}",  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π slug
            "language": "en",
            "utmValues": {
                "enbCampaign": "Homepage",
                "enbContent": "Main%20Categories%20Navigation",
                "enbMedium": "link",
                "enbSource": "https%3A%2F%2Fwww.eneba.com%2F",
                "enbTerm": "Games",
            },
            "version": 7,
            "abTests": [
                "CFD755",
            ],
        },
        "extensions": {
            "persistedQuery": {
                "version": 1,
                "sha256Hash": "87a1e783618b16092767beb84810a3a1a2adcba553d18620e59bf993da0b34f2_1daa7330a8898875b69f4c9119b0bc8f66ef99e8c08106610e49d36c4304c83c723c8d06383387f17ee1fc326ea96f8c95ad2a91d3be11ae5983eb1acf150b05",
            },
        },
    }

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º json_template, –∞ –Ω–µ data_template –¥–ª—è GraphQL
    results = await downloader.post_skus(
        base_url="https://www.eneba.com/graphql/",
        skugs=skugs,
        json_template=json_template,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º json_template
    )

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful = sum(1 for success in results.values() if success)
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}/{len(skugs)} —Ç–æ–≤–∞—Ä–æ–≤")

    failed_slugs = [slug for slug, success in results.items() if not success]
    if failed_slugs:
        logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è: {failed_slugs}")

    return results

    # def get_after(page, items_per_page=20):
    #     """
    #     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'after' –¥–ª—è GraphQL-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

    #     Args:
    #         page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1).
    #         items_per_page (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20).

    #     Returns:
    #         str: –ó–Ω–∞—á–µ–Ω–∏–µ 'after' –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1.
    #     """
    #     if not isinstance(page, int) or page < 1:
    #         raise ValueError("Page must be a positive integer")

    #     if page == 1:
    #         return ""

    #     # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    #     last_index = (page - 1) * items_per_page - 1
    #     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É after –≤ —Ñ–æ—Ä–º–∞—Ç–µ arrayconnection:<index>
    #     return f"YXJyYXljb25uZWN0aW9uO{last_index}"

    # async def get_first_page():
    #     """
    #     –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    #     Returns:
    #         int: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    #     """
    #     json_page = get_path("json_page")

    #     # JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    #     json_data = {
    #         "operationName": "Store",
    #         "variables": {
    #             "currency": "UAH",
    #             "context": {
    #                 "country": "UA",
    #                 "region": "ukraine",
    #                 "language": "en",
    #             },
    #             "searchType": "DEFAULT",
    #             "types": [
    #                 "game",
    #             ],
    #             "drms": [
    #                 "xbox",
    #             ],
    #             "regions": [
    #                 "argentina",
    #                 "turkey",
    #                 "united_states",
    #                 "europe",
    #                 "global",
    #             ],
    #             "sortBy": "POPULARITY_DESC",
    #             "after": "",
    #             "first": 20,
    #             "price": {
    #                 "to": 100000,
    #                 "currency": "UAH",
    #             },
    #             "url": "/store/games",
    #             "redirectUrl": "https://www.eneba.com/store/games",
    #         },
    #         "extensions": {
    #             "persistedQuery": {
    #                 "version": 1,
    #                 "sha256Hash": "e7c4cb284593ba8790a73238ee99c8b3cceb6dae6a3bd6a3eb46de758bab688e_fa9d4ba78292d78e2783bcbfcafd66f124a700122195de5fb927b7244800cf5a3e299cb9abf45322afaac142ce79f9f89d4447d0d908f83f9ff19f79be55f40e",
    #             },
    #         },
    #     }

    #     # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    #     first_page_filename = json_page / "eneba_page_1.json"

    #     try:
    #         # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
    #         success = await downloader.post_url(
    #             url="https://www.eneba.com/graphql/",
    #             json_data=json_data,
    #             filename=first_page_filename,
    #         )

    #         if not success:
    #             logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    #             return None

    #         # –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    #         with open(first_page_filename, "r", encoding="utf-8") as f:
    #             response_data = json.load(f)

    #         # –ò–∑–≤–ª–µ–∫–∞–µ–º totalCount
    #         try:
    #             total_count = response_data["data"]["search"]["results"]["totalCount"]
    #             logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_count}")

    #             # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    #             items_per_page = 20
    #             total_pages = math.ceil(total_count / items_per_page)

    #             logger.info(f"üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
    #             return total_pages

    #         except (KeyError, TypeError) as e:
    #             logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ totalCount: {e}")
    #             logger.debug(
    #                 f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(response_data.keys()) if isinstance(response_data, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å'}"
    #             )
    #             return None

    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    #         return None

    # async def get_all_pages():
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    # catalog_info = await get_first_page()

    # if not catalog_info:
    #     logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–µ")
    #     return False

    # total_pages = catalog_info["total_pages"]
    # logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")

    # # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    # tasks = []
    # json_directory = get_path("json_dir")
    # category_id = get_path("category_id")

    # for page_num in range(2, total_pages + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    #     # –í—ã—á–∏—Å–ª—è–µ–º offset –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    #     offset = (page_num - 1) * 20
    #     after = get_after(page_num)
    #     json_data = {
    #         "operationName": "Store",
    #         "variables": {
    #             "currency": "UAH",
    #             "context": {
    #                 "country": "UA",
    #                 "region": "ukraine",
    #                 "language": "en",
    #             },
    #             "searchType": "DEFAULT",
    #             "types": [
    #                 "game",
    #             ],
    #             "drms": [
    #                 "xbox",
    #             ],
    #             "regions": [
    #                 "argentina",
    #                 "turkey",
    #                 "united_states",
    #                 "europe",
    #                 "global",
    #             ],
    #             "sortBy": "POPULARITY_DESC",
    #             "after": after,
    #             "first": 20,
    #             "price": {
    #                 "to": 100000,
    #                 "currency": "UAH",
    #             },
    #             "url": "/store/games",
    #             "redirectUrl": "https://www.eneba.com/store/games",
    #         },
    #         "extensions": {
    #             "persistedQuery": {
    #                 "version": 1,
    #                 "sha256Hash": "e7c4cb284593ba8790a73238ee99c8b3cceb6dae6a3bd6a3eb46de758bab688e_fa9d4ba78292d78e2783bcbfcafd66f124a700122195de5fb927b7244800cf5a3e299cb9abf45322afaac142ce79f9f89d4447d0d908f83f9ff19f79be55f40e",
    #             },
    #         },
    #     }

    #     page_filename = json_directory / f"eneba_page_{page_num}.json"

    #     task = downloader.post_url(
    #         url="https://www.eneba.com/graphql/",
    #         json_data=json_data,
    #         filename=page_filename,
    #     )

    #     tasks.append((page_num, task))

    # # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    # if tasks:
    #     logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {len(tasks)} —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")

    #     completed_tasks = await asyncio.gather(
    #         *[task for _, task in tasks], return_exceptions=True
    #     )

    #     # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    #     successful = 0
    #     for (page_num, _), result in zip(tasks, completed_tasks):
    #         if isinstance(result, Exception):
    #             logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {result}")
    #         elif result:
    #             successful += 1
    #             logger.debug(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    #         else:
    #             logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    #     logger.info(
    #         f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {successful + 1}/{total_pages} (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—É—é)"
    #     )
    #     return successful > 0

    # else:
    #     logger.info("üìÑ –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
    #     return True


# –û—Å—Ç–∞–≤–∏–º –∑–∞–∫—Ä—ã—Ç–æ–π
# async def get_products():
#     logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ Playwright")
#     html_product = get_path("html_product")
#     category_id = get_path("category_id")
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     skugs = get_product_data(category_id=category_id)

#     if not skugs:
#         logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
#         return False

#     results = await downloader.download_urls(skugs)

#     # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
#     successful = sum(1 for success in results.values() if success)
#     logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}/{len(skugs)} —Ç–æ–≤–∞—Ä–æ–≤")

#     failed_slugs = [slug for slug, success in results.items() if not success]
#     if failed_slugs:
#         logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è: {failed_slugs}")

#     return results


async def get_products_img_rozetka():
    category_id = get_rozetka_path("category_id")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    skugs = get_product_data_rozetka(category_id=category_id)

    if not skugs:
        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
        return False
    await downloader.download_urls(skugs)


def clean_rozetka_temp_files():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Rozetka"""

    html_page = get_rozetka_path("html_page")
    html_product = get_rozetka_path("html_product")
    json_dir = get_rozetka_path("json_dir")
    category_name = get_rozetka_path("category_name")

    if html_page and html_page.exists():
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü Rozetka –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        shutil.rmtree(html_page)
        html_page.mkdir(parents=True, exist_ok=True)

    if html_product and html_product.exists():
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–æ–≤–∞—Ä–æ–≤ Rozetka –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        shutil.rmtree(html_product)
        html_product.mkdir(parents=True, exist_ok=True)

    if json_dir and json_dir.exists():
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ JSON-—Ñ–∞–π–ª–æ–≤ Rozetka –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        shutil.rmtree(json_dir)
        json_dir.mkdir(parents=True, exist_ok=True)

    logger.info(
        f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Rozetka –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã"
    )


def clean_temp_files():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    html_page = get_path("html_page")
    html_product = get_path("html_product")
    json_dir = get_path("json_dir")
    category_name = get_path("category_name")
    if html_page.exists():
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        shutil.rmtree(html_page)
        html_page.mkdir(parents=True, exist_ok=True)

    if html_product.exists():
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        shutil.rmtree(html_product)
        html_product.mkdir(parents=True, exist_ok=True)

    if json_dir.exists():
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ JSON-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        shutil.rmtree(json_dir)
        json_dir.mkdir(parents=True, exist_ok=True)

    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")


def display_menu():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("\n" + "=" * 50)
    print("ENEBA - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò –¢–û–í–ê–†–û–í")
    print("=" * 50)
    print("1. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (—Å–∫–∞—á–∞—Ç—å HTML -> –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã -> –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã)")
    print("2. –¢–æ–ª—å–∫–æ —Å–∫–∞—á–∞—Ç—å HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–æ–≤–∞—Ä–æ–º")
    print("4. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã")
    print("5. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("6. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã –∏–∑ –ø—É–Ω–∫—Ç–∞ 4 –∏ 5")
    print("7. –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ config")
    print("8. –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel")
    print("9. –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("0. –í—ã—Ö–æ–¥")
    print("=" * 50)


def main():
    while True:
        display_menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-9): ").strip()

        if choice == "0":
            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break

        if choice in {"2", "3", "4", "5", "6", "7"}:
            marketpalses = input("–í—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–æ–º - 1, –†–æ–∑–µ—Ç–∫–∞ - 2: ").strip()
            if marketpalses == "1":
                if not is_initialized():
                    category_info = select_category_and_init_paths()
                    if not category_info:
                        print("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                        continue
            else:
                category_info = select_rozetka_category_and_init_paths()
                if not category_info:
                    print("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é Rozetka")
                    continue

        if choice == "1":
            logger.info("–¢–£–¢ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É ;)")

        elif choice == "2":
            if marketpalses == "1":
                # asyncio.run(get_first_page())
                url = get_path("url")
                download_pages(url, cookies, headers)
            else:
                # –î–ª—è Rozetka —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                logger.info("–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è Rozetka –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

        elif choice == "3":
            if marketpalses == "1":
                process_html_files()
            else:
                process_rozetka_html_files()

        elif choice == "4":
            if marketpalses == "1":
                asyncio.run(get_products())

        elif choice == "5":
            if marketpalses == "1":
                asyncio.run(get_products_img_rozetka())
            else:
                asyncio.run(get_products_img_rozetka())

        elif choice == "6":
            if marketpalses == "1":
                category_id = get_path("category_id")
                all_data, bd_json_path = parse_json_and_html_files(category_id)
                if all_data:
                    updated_prices, updated_images, errors = update_prices_and_images(
                        bd_json_path, category_id=category_id
                    )
                    export_data_to_excel(category_id=category_id)
                else:
                    logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            else:
                category_id = get_rozetka_path("category_id")
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Rozetka: {category_id}")

                all_data, bd_json_path = parse_json_and_html_files_rozetka(category_id)
                if all_data:
                    updated_prices, updated_images, errors = (
                        update_rozetka_prices_and_images(
                            bd_json_path, category_id=category_id
                        )
                    )
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º category_id –≤ —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
                    export_data_to_excel_rozetka(category_id=category_id)
                else:
                    logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Rozetka")

        elif choice == "7":
            if marketpalses == "1":
                update_prices_from_config()
            else:
                update_prices_from_config_rozetka()

        elif choice == "8":
            extract_ids_from_excel()

        # elif choice == "9":
        #     if marketpalses == "1":
        #         clean_temp_files()
        #     else:
        #         # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –¥–ª—è Rozetka
        #         clean_rozetka_temp_files()

        else:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main()
