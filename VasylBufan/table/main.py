import json
import random
import shutil
import sys
import xml.etree.ElementTree as ET
from pathlib import Path
from urllib.parse import urlparse

import gspread
import numpy as np
import pandas as pd
import requests
from google.oauth2.service_account import Credentials
from loguru import logger
from lxml import etree

current_directory = Path.cwd()
xml_directory = current_directory / "xml"
log_directory = current_directory / "log"
config_directory = current_directory / "config"

config_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)
xml_directory.mkdir(parents=True, exist_ok=True)
log_file_path = log_directory / "log_message.log"
config_file_path = config_directory / "config.json"
service_account_file = config_directory / "credentials.json"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def load_json_data(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_path}: {e}")
        return None


def save_json_data(data, file_path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {file_path}: {e}")
        return False


config = load_json_data(config_file_path)
URLS = config.get("competitor_www", [])
MY_URL = config.get("my_www")
HEADERS = config.get("headers", {})
SPREADSHEET = config["google"]["spreadsheet"]
SHEET = config["google"]["sheet"]


def get_json_xcore():
    source_path = "/home/rsa-key-20241114/xcore_com_ua/data/xcore_com_ua.json"
    destination_path = "/home/rsa-key-20241114/table/data/xcore_com_ua.json"

    shutil.copy2(source_path, destination_path)
    logger.info(f"–§–∞–π–ª {destination_path} –ø–µ—Ä–µ–º–µ—â–µ–Ω ")


def extract_xml_value(element, tag_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–≥–∞ –∏–∑ XML —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'N/A', –µ—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    node = element.find(tag_name)
    return node.text if node is not None else None


def get_google_sheet(sheet_one):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç."""
    try:
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å google-auth
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]

        credentials = Credentials.from_service_account_file(
            service_account_file, scopes=scopes
        )

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ gspread —Å –Ω–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        client = gspread.authorize(credentials)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–ª—é—á—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏—Å—Ç
        spreadsheet = client.open_by_key(SPREADSHEET)
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Spreadsheet.")
        return spreadsheet.worksheet(sheet_one)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        raise FileNotFoundError("–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API Google Sheets: {e}")
        raise
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        raise


def get_sheet_data(sheet_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ Google —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ pandas DataFrame."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç
        worksheet = get_google_sheet(sheet_name)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–∏—Å—Ç–∞
        data = worksheet.get_all_records()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        df = pd.DataFrame(data)

        logger.info(
            f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ '{sheet_name}'. –°—Ç—Ä–æ–∫: {len(df)}"
        )
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ '{sheet_name}': {e}")
        raise


# –†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
# def update_sheet_with_data(sheet, data, total_rows=50000):
#     """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ª–∏—Å—Ç–∞ Google Sheets —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
#     if not data:
#         raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

#     # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
#     headers = list(data[0].keys())

#     # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
#     sheet.update(values=[headers], range_name="A1", value_input_option="RAW")

#     # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
#     rows = [[entry.get(header, "") for header in headers] for entry in data]

#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ total_rows
#     if len(rows) < total_rows:
#         empty_row = [""] * len(headers)
#         rows.extend([empty_row] * (total_rows - len(rows)))

#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
#     end_col = chr(65 + len(headers) - 1)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ –±—É–∫–≤—É (A, B, C...)
#     range_name = f"A2:{end_col}{total_rows + 1}"


#     # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç
#     sheet.update(values=rows, range_name=range_name, value_input_option="USER_ENTERED")
#     logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –≤ Google Sheets")
def update_sheet_with_data(sheet, data, total_rows=50000):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ª–∏—Å—Ç–∞ Google Sheets —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if not data:
        raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
    headers = list(data[0].keys())

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    sheet_title = sheet.title

    # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    sheet.update(values=[headers], range_name="A1", value_input_option="RAW")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
    rows = [[entry.get(header, "") for header in headers] for entry in data]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
    start_row = 101 if sheet_title == "Data" else 2

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ total_rows
    if start_row + len(rows) < total_rows:
        empty_row = [""] * len(headers)
        rows.extend([empty_row] * (total_rows - len(rows) - start_row + 2))

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
    end_col = chr(65 + len(headers) - 1)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ –±—É–∫–≤—É (A, B, C...)
    range_name = f"A{start_row}:{end_col}{total_rows + 1}"

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç
    sheet.update(values=rows, range_name=range_name, value_input_option="USER_ENTERED")
    logger.info(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –≤ Google Sheets, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ {start_row}"
    )


def create_sku_mapping(df):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ MBS/MS.

    :param df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    :return: –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    """
    sku_mapping = {}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
    my_site_skus = [
        str(sku).strip()
        for sku in df["–ú–æ–π_—Å–∞–π—Ç_sku"].unique()
        if pd.notna(sku) and str(sku).strip()
    ]
    xcore_skus = [
        str(sku).strip()
        for sku in df["xcore_sku"].unique()
        if pd.notna(sku) and str(sku).strip()
    ]

    logger.info(
        f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: my_site_sku={len(my_site_skus)}, xcore_sku={len(xcore_skus)}"
    )

    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ MBS/MS
    for my_sku in my_site_skus:
        if my_sku.startswith("MBS-"):
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π MS- –∞—Ä—Ç–∏–∫—É–ª
            ms_sku = "MS-" + my_sku[4:]
            if ms_sku in xcore_skus:
                sku_mapping[my_sku] = ms_sku
                sku_mapping[ms_sku] = my_sku
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {my_sku} <-> {ms_sku}")

    for xcore_sku in xcore_skus:
        if xcore_sku.startswith("MS-"):
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π MBS- –∞—Ä—Ç–∏–∫—É–ª
            mbs_sku = "MBS-" + xcore_sku[3:]
            if mbs_sku in my_site_skus:
                sku_mapping[xcore_sku] = mbs_sku
                sku_mapping[mbs_sku] = xcore_sku
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {xcore_sku} <-> {mbs_sku}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    sku_mapping["MBS-26339"] = "MS-26339"
    sku_mapping["MS-26339"] = "MBS-26339"

    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(sku_mapping)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    return sku_mapping


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_sku_match, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥
def check_sku_match(my_sku, xcore_sku, insportline_code, sku_mapping):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –º–∞–ø–ø–∏–Ω–≥–∞.
    """
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    my_sku_clean = my_sku.strip()
    xcore_sku_clean = xcore_sku.strip()
    insportline_code_clean = insportline_code.strip()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(
        f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã: my_sku='{my_sku_clean}', xcore_sku='{xcore_sku_clean}', insportline='{insportline_code_clean}'"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if (
        my_sku_clean and insportline_code_clean and xcore_sku_clean
    ):  # –≤–∞—Ä–∏–∞–Ω—Ç 1: –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã
        logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É 1: –µ—Å—Ç—å –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã")
        return True
    if (
        my_sku_clean and my_sku_clean == xcore_sku_clean
    ):  # –≤–∞—Ä–∏–∞–Ω—Ç 2: –ú–æ–π —Å–∞–π—Ç sku –∏ xcore_sku
        logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É 2: my_sku == xcore_sku")
        return True
    if (
        my_sku_clean and my_sku_clean == insportline_code_clean
    ):  # –≤–∞—Ä–∏–∞–Ω—Ç 3: –ú–æ–π —Å–∞–π—Ç sku –∏ insportline
        logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É 3: my_sku == insportline_code")
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –º–∞–ø–ø–∏–Ω–≥—É –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    if my_sku_clean and my_sku_clean in sku_mapping:
        matched_sku = sku_mapping[my_sku_clean]
        if xcore_sku_clean and matched_sku == xcore_sku_clean:
            logger.info(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–∞–ø–ø–∏–Ω–≥—É: {my_sku_clean} -> {xcore_sku_clean}")
            return True
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏

    if xcore_sku_clean and xcore_sku_clean in sku_mapping:
        matched_sku = sku_mapping[xcore_sku_clean]
        if my_sku_clean and matched_sku == my_sku_clean:
            logger.info(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–∞–ø–ø–∏–Ω–≥—É: {xcore_sku_clean} -> {my_sku_clean}")
            return True
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏

    return False


def filter_prices(my_price, valid_prices, xcore_price, insportline_price):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

    :param my_price: –¶–µ–Ω–∞ –Ω–∞ '–ú–æ–µ–º —Å–∞–π—Ç–µ'
    :param valid_prices: –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    :param xcore_price: –¶–µ–Ω–∞ Xcore
    :param insportline_price: –¶–µ–Ω–∞ Insportline
    :return: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω
    """
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filtered_prices = valid_prices.copy()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–Ω—ã, –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –Ω–∏–º–∏ –±–æ–ª–µ–µ 50%
    if len(filtered_prices) > 1:
        min_price = min(filtered_prices)
        max_price = max(filtered_prices)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
        if max_price / min_price > 1.5:  # —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª–µ–µ 50%
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Ü–µ–Ω—É –∏—Å–∫–ª—é—á–∏—Ç—å
            if xcore_price in filtered_prices and insportline_price in filtered_prices:
                # –ï—Å–ª–∏ –æ–±–µ —Ü–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã, —É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å
                if xcore_price / insportline_price > 1.5:
                    filtered_prices.remove(xcore_price)
                    logger.info(
                        f"–ò—Å–∫–ª—é—á–µ–Ω–∞ —Ü–µ–Ω–∞ Xcore {xcore_price}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–Ω—ã Insportline {insportline_price} –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50%"
                    )
                elif insportline_price / xcore_price > 1.5:
                    filtered_prices.remove(insportline_price)
                    logger.info(
                        f"–ò—Å–∫–ª—é—á–µ–Ω–∞ —Ü–µ–Ω–∞ Insportline {insportline_price}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ü–µ–Ω—ã Xcore {xcore_price} –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50%"
                    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –Ω–∏–∂–µ –Ω–∞—à–µ–π –Ω–∞ 30% –∏ –±–æ–ª–µ–µ
    if my_price > 0:
        for price in valid_prices[:]:  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if price / my_price < 0.7:  # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∏–∂–µ –Ω–∞—à–µ–π –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 30%
                if price in filtered_prices:
                    filtered_prices.remove(price)
                    logger.info(
                        f"–ò—Å–∫–ª—é—á–µ–Ω–∞ —Ü–µ–Ω–∞ {price}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–∏–∂–µ –Ω–∞—à–µ–π —Ü–µ–Ω—ã {my_price} –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 30%"
                    )

    return filtered_prices


def calculate_new_price(my_price, filtered_prices):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.

    :param my_price: –¶–µ–Ω–∞ –Ω–∞ '–ú–æ–µ–º —Å–∞–π—Ç–µ'
    :param filtered_prices: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    :return: –ù–æ–≤–∞—è —Ü–µ–Ω–∞
    """
    if not filtered_prices:
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ü–µ–Ω—É
        logger.info(
            f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ü–µ–Ω—É: {my_price}"
        )
        return my_price

    min_supplier_price = min(filtered_prices)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π
    if my_price > 0 and my_price < min_supplier_price:
        # –ï—Å–ª–∏ –Ω–∞—à–∞ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à—É —Ü–µ–Ω—É
        # logger.info(
        #     f"–ù–∞—à–∞ —Ü–µ–Ω–∞ {my_price} –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ {min_supplier_price}. –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à—É —Ü–µ–Ω—É."
        # )
        return my_price
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º (3-5% –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)
        discount_factor = round(random.uniform(0.95, 0.97), 2)
        new_price = min_supplier_price * discount_factor
        # logger.info(
        #     f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {discount_factor} * {min_supplier_price})"
        # )
        return round(new_price, 2)


def process_prices(source_sheet_name, result_sheet_name="result"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–∏—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    :param source_sheet_name: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    :param result_sheet_name: –ò–º—è –ª–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "result")
    :return: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        df = get_sheet_data(source_sheet_name)

        # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (—É–±–µ—Ä–µ–º –ø—Ä–æ–±–µ–ª—ã)
        df.columns = [col.replace(" ", "_") for col in df.columns]

        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
        sku_mapping = create_sku_mapping(df)

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_df = pd.DataFrame(
            columns=[
                "–ê—Ä—Ç–∏–∫—É–ª",
                "—Å—Ç–∞—Ä–∞_—Ü—ñ–Ω–∞",
                "–Ω–æ–≤–∞_—Ü—ñ–Ω–∞",
                "–¶—ñ–Ω–∞_Xcore",
                "–¶—ñ–Ω–∞_Insportline",
            ]
        )

        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        my_site_data = {}  # {sku: price}
        xcore_data = {}  # {sku: price}
        insportline_data = {}  # {sku: price}

        # –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        for _, row in df.iterrows():
            my_sku = str(row["–ú–æ–π_—Å–∞–π—Ç_sku"]).strip()
            xcore_sku = str(row.get("xcore_sku", "")).strip()
            insportline_code = str(row.get("insportline_vendor_code", "")).strip()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–µ–º—É —Å–∞–π—Ç—É
            if my_sku:
                try:
                    my_price = (
                        float(row["–ú–æ–π_—Å–∞–π—Ç_—Ü–µ–Ω–∞"])
                        if pd.notna(row.get("–ú–æ–π_—Å–∞–π—Ç_—Ü–µ–Ω–∞"))
                        else 0
                    )
                    my_site_data[my_sku] = my_price
                except (ValueError, TypeError):
                    my_site_data[my_sku] = 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ Xcore
            if xcore_sku:
                try:
                    xcore_price = (
                        float(row.get("xcore_price", 0))
                        if pd.notna(row.get("xcore_price"))
                        else 0
                    )
                    if xcore_price > 0:
                        xcore_data[xcore_sku] = xcore_price
                except (ValueError, TypeError):
                    pass

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ Insportline
            if insportline_code:
                try:
                    insportline_price = (
                        float(row.get("insportline_—Ü–µ–Ω–∞", 0))
                        if pd.notna(row.get("insportline_—Ü–µ–Ω–∞"))
                        else 0
                    )
                    if insportline_price > 0:
                        insportline_data[insportline_code] = insportline_price
                except (ValueError, TypeError):
                    pass

        logger.info(
            f"–°–æ–±—Ä–∞–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: my_site={len(my_site_data)}, xcore={len(xcore_data)}, insportline={len(insportline_data)}"
        )

        # –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        processed_count = 0
        matched_count = 0

        for my_sku, my_price in my_site_data.items():
            processed_count += 1

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            xcore_price = 0
            insportline_price = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è Xcore
            if my_sku in xcore_data:
                xcore_price = xcore_data[my_sku]
                # logger.info(f"–ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è {my_sku} —Å Xcore: {xcore_price}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è Xcore
            elif my_sku in sku_mapping and sku_mapping[my_sku] in xcore_data:
                mapped_sku = sku_mapping[my_sku]
                xcore_price = xcore_data[mapped_sku]
                # logger.info(
                #     f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {my_sku} -> {mapped_sku} —Å Xcore: {xcore_price}"
                # )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è Insportline
            if my_sku in insportline_data:
                insportline_price = insportline_data[my_sku]
                # logger.info(
                #     f"–ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è {my_sku} —Å Insportline: {insportline_price}"
                # )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö–æ—Ç—è –±—ã —Å –æ–¥–Ω–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
            is_match = xcore_price > 0 or insportline_price > 0

            if not is_match:
                # logger.info(f"–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {my_sku}")
                continue

            matched_count += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã 1 –∏–ª–∏ 2)
            valid_prices = []

            if xcore_price > 2:
                valid_prices.append(xcore_price)

            if insportline_price > 2:
                valid_prices.append(insportline_price)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω
            if not valid_prices:
                logger.info(f"–î–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {my_sku} –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
                continue

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–Ω—ã
            filtered_prices = filter_prices(
                my_price, valid_prices, xcore_price, insportline_price
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
            new_price = calculate_new_price(my_price, filtered_prices)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_df = result_df._append(
                {
                    "–ê—Ä—Ç–∏–∫—É–ª": my_sku,
                    "—Å—Ç–∞—Ä–∞_—Ü—ñ–Ω–∞": my_price,
                    "–Ω–æ–≤–∞_—Ü—ñ–Ω–∞": new_price,
                    "–¶—ñ–Ω–∞_Xcore": xcore_price if xcore_price > 2 else "-",
                    "–¶—ñ–Ω–∞_Insportline": (
                        insportline_price if insportline_price > 2 else "-"
                    ),
                },
                ignore_index=True,
            )

        logger.info(
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–æ–∑–∏—Ü–∏–π, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matched_count}"
        )

        # –í—ã–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–∏—Å—Ç "result" –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é update_sheet_with_data
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_sheet = get_google_sheet(result_sheet_name)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é update_sheet_with_data
            # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
            result_df_renamed = result_df.rename(
                columns={
                    "–ê—Ä—Ç–∏–∫—É–ª": "–ê—Ä—Ç–∏–∫—É–ª",
                    "—Å—Ç–∞—Ä–∞_—Ü—ñ–Ω–∞": "—Å—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞",
                    "–Ω–æ–≤–∞_—Ü—ñ–Ω–∞": "–Ω–æ–≤–∞ —Ü—ñ–Ω–∞",
                    "–¶—ñ–Ω–∞_Xcore": "–¶—ñ–Ω–∞ Xcore",
                    "–¶—ñ–Ω–∞_Insportline": "–¶—ñ–Ω–∞ Insportline",
                }
            )

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            result_data = result_df_renamed.to_dict("records")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞
            update_sheet_with_data(result_sheet, result_data)

            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ –ª–∏—Å—Ç '{result_sheet_name}'.")
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ª–∏—Å—Ç '{result_sheet_name}': {e}"
            )
            raise

        return result_df

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def download_xml(url, headers):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç XML —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL.

    Args:
        url (str): URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è XML —Ñ–∞–π–ª–∞
        headers (dict): –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
        xml_dir (Path, optional): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é xml_directory.

    Returns:
        Path or None: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        if (
            url
            == "https://hdsport.com.ua/index.php?route=extension/feed/unixml/allprice"
        ):
            xml_file_path = xml_directory / "all.xml"
        else:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL
            filename = urlparse(url).path.split("/")[-1]

            # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω
            if not filename:
                filename = urlparse(url).netloc.replace(".", "_")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .xml –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not filename.endswith(".xml"):
                xml_file_path = xml_directory / f"{filename}.xml"
            else:
                xml_file_path = xml_directory / filename

        logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º XML —Ñ–∞–π–ª: {url}")

        response = requests.get(
            url,
            headers=headers,
            timeout=200,
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ñ–∞–π–ª
            with open(xml_file_path, "wb") as file:
                file.write(response.content)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {xml_file_path}")
            return xml_file_path
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {url}: {e}")
        return None


def download_all_xml_files():
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ XML —Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Args:
        config_file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url: –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_–∏–ª–∏_None}
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    results = {}

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    for url in URLS:
        results[url] = download_xml(url, HEADERS)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if MY_URL:
        results[MY_URL] = download_xml(MY_URL, HEADERS)

    return results


def normalize_sku(sku):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç SKU, —É–¥–∞–ª—è—è –ø—Ä–µ—Ñ–∏–∫—Å 'INS' –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    –ù–∞–ø—Ä–∏–º–µ—Ä: 'INS9410-3' -> '9410-3'
    """
    if sku and isinstance(sku, str):
        if sku.startswith("INS"):
            return sku[3:]  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞ (INS)
    return sku


def parsin_xml():
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ sku
    data_dict = {}
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ ean –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    ean_dict = {}
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è SKU –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ INS
    normalized_sku_dict = {}

    # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    matched_data = []  # –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    unmatched_data = []  # –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã

    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª "all", —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å sku –∏ ean
    for xml_file in xml_directory.glob("*.xml"):
        name_file = xml_file.stem

        if name_file == "all":
            tree = etree.parse(xml_file)
            root = tree.getroot()
            offers = root.xpath("//offer")

            for offer in offers:
                price_my_site = extract_xml_value(offer, "price")
                sku = (
                    offer.xpath('param[@name="sku"]/text()')[0]
                    if offer.xpath('param[@name="sku"]')
                    else None
                )

                ean = (
                    offer.xpath('param[@name="ean"]/text()')[0]
                    if offer.xpath('param[@name="ean"]')
                    else None
                )

                if sku:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º sku –∫–∞–∫ –∫–ª—é—á
                    data_dict[sku] = {
                        "–ú–æ–π —Å–∞–π—Ç sku": sku,
                        "–ú–æ–π —Å–∞–π—Ç ean": ean,
                        "–ú–æ–π —Å–∞–π—Ç —Ü–µ–Ω–∞": price_my_site,
                        "insportline vendor_code": None,
                        "insportline —Ü–µ–Ω–∞": None,
                        "xcore_sku": None,
                        "xcore_price": None,
                        "matched": False,  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    }

                    # –ï—Å–ª–∏ –µ—Å—Ç—å EAN, —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –≤ data_dict
                    if ean:
                        ean_dict[ean] = sku

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é SKU (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ INS)
                    normalized_sku = normalize_sku(sku)
                    normalized_sku_dict[normalized_sku] = sku

    # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è insportline (vendorCode)
    for xml_file in xml_directory.glob("*.xml"):
        name_file = xml_file.stem

        if name_file in ["export_yandex_market", "yml_dualprice"]:
            tree = etree.parse(xml_file)
            root = tree.getroot()
            offers = root.xpath("//offer")

            for offer in offers:
                vendor_code = extract_xml_value(offer, "vendorCode")
                insportline_price = extract_xml_value(offer, "price")

                if not vendor_code:
                    continue

                match_found = False

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ sku
                if vendor_code in data_dict:
                    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é SKU
                    data_dict[vendor_code]["insportline vendor_code"] = vendor_code
                    data_dict[vendor_code]["insportline —Ü–µ–Ω–∞"] = insportline_price
                    data_dict[vendor_code]["matched"] = True
                    match_found = True
                else:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º vendor_code –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    normalized_vendor = normalize_sku(vendor_code)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É SKU
                    if normalized_vendor in normalized_sku_dict:
                        original_sku = normalized_sku_dict[normalized_vendor]
                        data_dict[original_sku]["insportline vendor_code"] = vendor_code
                        data_dict[original_sku]["insportline —Ü–µ–Ω–∞"] = insportline_price
                        data_dict[original_sku]["matched"] = True
                        match_found = True
                    else:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ EAN
                        ean_value = extract_xml_value(
                            offer, "barcode"
                        ) or extract_xml_value(offer, "ean")

                        if ean_value and ean_value in ean_dict:
                            # –ù–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ EAN
                            matching_sku = ean_dict[ean_value]
                            data_dict[matching_sku][
                                "insportline vendor_code"
                            ] = vendor_code
                            data_dict[matching_sku][
                                "insportline —Ü–µ–Ω–∞"
                            ] = insportline_price
                            data_dict[matching_sku]["matched"] = True
                            match_found = True

                if not match_found:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∏ –ø–æ SKU, –Ω–∏ –ø–æ EAN, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    new_key = f"insportline_{vendor_code}"
                    data_dict[new_key] = {
                        "–ú–æ–π —Å–∞–π—Ç sku": None,
                        "–ú–æ–π —Å–∞–π—Ç ean": None,
                        "–ú–æ–π —Å–∞–π—Ç —Ü–µ–Ω–∞": None,
                        "insportline vendor_code": vendor_code,
                        "insportline —Ü–µ–Ω–∞": insportline_price,
                        "xcore_sku": None,
                        "xcore_price": None,
                        "matched": False,  # –≠—Ç–æ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
                    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–∞ xcore_com_ua.json
    try:
        with open("data/xcore_com_ua.json", "r", encoding="utf-8") as f:
            xcore_data = json.load(f)

        for item in xcore_data:
            xcore_sku = item.get("–ê—Ä—Ç–∏–∫—É")
            xcore_price = item.get("–¶—ñ–Ω–∞")

            if not xcore_sku:
                continue

            match_found = False

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ SKU
            if xcore_sku in data_dict:
                data_dict[xcore_sku]["xcore_sku"] = xcore_sku
                data_dict[xcore_sku]["xcore_price"] = xcore_price
                data_dict[xcore_sku]["matched"] = True
                match_found = True
            else:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º xcore_sku –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                normalized_xcore = normalize_sku(xcore_sku)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É SKU
                if normalized_xcore in normalized_sku_dict:
                    original_sku = normalized_sku_dict[normalized_xcore]
                    data_dict[original_sku]["xcore_sku"] = xcore_sku
                    data_dict[original_sku]["xcore_price"] = xcore_price
                    data_dict[original_sku]["matched"] = True
                    match_found = True

            if not match_found:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                new_key = f"xcore_{xcore_sku}"
                data_dict[new_key] = {
                    "–ú–æ–π —Å–∞–π—Ç sku": None,
                    "–ú–æ–π —Å–∞–π—Ç ean": None,
                    "–ú–æ–π —Å–∞–π—Ç —Ü–µ–Ω–∞": None,
                    "insportline vendor_code": None,
                    "insportline —Ü–µ–Ω–∞": None,
                    "xcore_sku": xcore_sku,
                    "xcore_price": xcore_price,
                    "matched": False,  # –≠—Ç–æ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
                }

        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(xcore_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ xcore_com_ua.json")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ xcore_com_ua.json: {e}")

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
    for key, value in data_dict.items():
        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ matched, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ result
        matched = value.pop("matched", False)

        # –ó–∞–ø–∏—Å—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ç—è –±—ã –∏–∑ –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources_count = 0
        if value["–ú–æ–π —Å–∞–π—Ç sku"] is not None:
            sources_count += 1
        if value["insportline vendor_code"] is not None:
            sources_count += 1
        if value["xcore_sku"] is not None:
            sources_count += 1

        if sources_count >= 2:
            matched_data.append(value)
        else:
            unmatched_data.append(value)

    # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    print(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(matched_data)}")
    print(f"–ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(unmatched_data)}")

    # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    result = matched_data + unmatched_data

    # # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    # print("\n–ü—Ä–∏–º–µ—Ä—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
    # for i, item in enumerate(matched_data[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    #     print(
    #         f"{i+1}. SKU: {item['–ú–æ–π —Å–∞–π—Ç sku']}, "
    #         + f"Insportline: {item['insportline vendor_code']}, "
    #         + f"Xcore: {item['xcore_sku']}, "
    #         + f"–¶–µ–Ω—ã: {item['–ú–æ–π —Å–∞–π—Ç —Ü–µ–Ω–∞']} / {item['insportline —Ü–µ–Ω–∞']} / {item['xcore_price']}"
    #     )

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    sheet_name = "Data"
    sheet = get_google_sheet(sheet_name)
    update_sheet_with_data(sheet, result)

    return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    # # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
    # result = list(data_dict.values())

    # # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    # sheet_name = "Data"
    # sheet = get_google_sheet(sheet_name)
    # update_sheet_with_data(sheet, result)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    get_json_xcore()
    download_all_xml_files()
    parsin_xml()
    source_sheet = "Data"  # –ò–º—è –ª–∏—Å—Ç–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    result_sheet = "result"  # –ò–º—è –ª–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    try:
        results = process_prices(source_sheet, result_sheet)
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
    except gspread.exceptions.APIError as e:
        if "429" in str(e):
            print(
                "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API Google Sheets. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        else:
            print(f"–û—à–∏–±–∫–∞ API: {e}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
