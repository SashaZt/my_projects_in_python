#!/bin/bash
# –ì–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∫—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∏ –¥–∞–Ω–Ω—ã–µ n8n –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î postgres
set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NETWORK_NAME="n8n_net"
TRAEFIK_CONTAINER="traefik"
N8N_CONTAINER="n8n"
POSTGRES_CONTAINER="postgres"
BD_N8N_CONTAINER="bd_n8n"

# –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
read -p "üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, n8n.example.com): " DOMAIN_NAME
if [[ -z "$DOMAIN_NAME" ]]; then
    echo "‚ùå –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    exit 1
fi

# –ó–∞–ø—Ä–æ—Å email –¥–ª—è Let's Encrypt
read -p "üìß –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt: " LETSENCRYPT_EMAIL
if [[ -z "$LETSENCRYPT_EMAIL" ]]; then
    echo "‚ùå Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    exit 1
fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
if [[ ! -f .n8n_env ]]; then
    POSTGRES_PASSWORD=$(openssl rand -hex 16)
    BD_N8N_PASSWORD=$(openssl rand -hex 16)
    N8N_PASSWORD=$(openssl rand -hex 8)
    
    cat > .n8n_env << EOF
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
BD_N8N_PASSWORD=${BD_N8N_PASSWORD}
N8N_PASSWORD=${N8N_PASSWORD}
DOMAIN_NAME=${DOMAIN_NAME}
LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
OLD_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
OLD_BD_N8N_PASSWORD=${BD_N8N_PASSWORD}
EOF
    echo "üîë –°–æ–∑–¥–∞–Ω—ã –ø–∞—Ä–æ–ª–∏:"
    echo "   PostgreSQL (workflows): ${POSTGRES_PASSWORD}"
    echo "   PostgreSQL (N8N –¥–∞–Ω–Ω—ã–µ): ${BD_N8N_PASSWORD}"
    echo "   n8n: admin / ${N8N_PASSWORD}"
else
    source .n8n_env
    echo "üìÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–æ–ª–∏"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è PostgreSQL
    if [[ "$POSTGRES_PASSWORD" != "$OLD_POSTGRES_PASSWORD" ]] && [[ -n "$OLD_POSTGRES_PASSWORD" ]]; then
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è PostgreSQL (workflows)"
        read -p "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö workflows? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö workflows..."
            docker volume rm postgres_data >/dev/null 2>&1 || true
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è BD_N8N
    if [[ "$BD_N8N_PASSWORD" != "$OLD_BD_N8N_PASSWORD" ]] && [[ -n "$OLD_BD_N8N_PASSWORD" ]]; then
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è PostgreSQL (N8N –¥–∞–Ω–Ω—ã–µ)"
        read -p "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö N8N? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö N8N..."
            docker volume rm bd_n8n_data >/dev/null 2>&1 || true
        fi
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏
docker network inspect $NETWORK_NAME >/dev/null 2>&1 || {
    echo "üì° –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏..."
    docker network create $NETWORK_NAME
}

# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker rm -f $TRAEFIK_CONTAINER $N8N_CONTAINER $POSTGRES_CONTAINER $BD_N8N_CONTAINER >/dev/null 2>&1 || true

# –°–æ–∑–¥–∞–Ω–∏–µ volumes
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ volumes..."
volumes=("postgres_data" "bd_n8n_data" "n8n_data" "traefik_ssl")
for volume in "${volumes[@]}"; do
    if ! docker volume ls | grep -q "$volume"; then
        echo "   –°–æ–∑–¥–∞–Ω–∏–µ $volume..."
        docker volume create $volume
    else
        echo "   $volume —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úÖ"
    fi
done

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Traefik
echo "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Traefik..."
mkdir -p ./traefik
cat > ./traefik/traefik.yml << EOF
api:
  dashboard: true
  insecure: true

entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entrypoint:
          to: websecure
          scheme: https
  websecure:
    address: ":443"

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false

certificatesResolvers:
  letsencrypt:
    acme:
      email: ${LETSENCRYPT_EMAIL}
      storage: /ssl/acme.json
      tlsChallenge: {}
EOF

# –ó–∞–ø—É—Å–∫ Traefik
echo "üöÄ –ó–∞–ø—É—Å–∫ Traefik..."
docker run -d --name $TRAEFIK_CONTAINER \
    --network $NETWORK_NAME \
    --restart unless-stopped \
    -p 80:80 \
    -p 443:443 \
    -p 8080:8080 \
    -v /var/run/docker.sock:/var/run/docker.sock:ro \
    -v $(pwd)/traefik:/etc/traefik:ro \
    -v traefik_ssl:/ssl \
    traefik:v2.10

# –ó–∞–ø—É—Å–∫ PostgreSQL –¥–ª—è workflows (–ø–æ—Ä—Ç 5432)
echo "üêò –ó–∞–ø—É—Å–∫ PostgreSQL (–¥–ª—è workflows)..."
docker run -d --name $POSTGRES_CONTAINER \
    --network $NETWORK_NAME \
    --restart unless-stopped \
    -p 5432:5432 \
    -v postgres_data:/var/lib/postgresql/data \
    -e POSTGRES_DB=workflows \
    -e POSTGRES_USER=postgres \
    -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
    postgres:15

# –ó–∞–ø—É—Å–∫ PostgreSQL –¥–ª—è N8N –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ä—Ç 5433)
echo "üóÑÔ∏è –ó–∞–ø—É—Å–∫ PostgreSQL (–¥–ª—è –¥–∞–Ω–Ω—ã—Ö N8N)..."
docker run -d --name $BD_N8N_CONTAINER \
    --network $NETWORK_NAME \
    --restart unless-stopped \
    -p 5433:5432 \
    -v bd_n8n_data:/var/lib/postgresql/data \
    -e POSTGRES_DB=n8n \
    -e POSTGRES_USER=n8n \
    -e POSTGRES_PASSWORD=$BD_N8N_PASSWORD \
    postgres:15

# –ñ–¥–µ–º PostgreSQL (workflows)
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL (workflows)..."
for i in {1..30}; do
    if docker exec $POSTGRES_CONTAINER pg_isready -U postgres >/dev/null 2>&1; then
        echo "‚úÖ PostgreSQL (workflows) –≥–æ—Ç–æ–≤"
        break
    fi
    echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $i/30..."
    sleep 2
done

# –ñ–¥–µ–º PostgreSQL (N8N)
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL (N8N –¥–∞–Ω–Ω—ã–µ)..."
for i in {1..30}; do
    if docker exec $BD_N8N_CONTAINER pg_isready -U n8n >/dev/null 2>&1; then
        echo "‚úÖ PostgreSQL (N8N –¥–∞–Ω–Ω—ã–µ) –≥–æ—Ç–æ–≤"
        break
    fi
    echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $i/30..."
    sleep 2
done

# –ñ–¥–µ–º Traefik
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Traefik..."
sleep 5

# –ó–∞–ø—É—Å–∫ n8n (—Å PostgreSQL –¥–ª—è –¥–∞–Ω–Ω—ã—Ö N8N)
echo "üöÄ –ó–∞–ø—É—Å–∫ n8n..."
docker run -d --name $N8N_CONTAINER \
    --network $NETWORK_NAME \
    --restart unless-stopped \
    -v n8n_data:/home/node/.n8n \
    -e WEBHOOK_URL=https://$DOMAIN_NAME \
    -e N8N_HOST="0.0.0.0" \
    -e GENERIC_TIMEZONE=Europe/Kiev \
    -e TZ=Europe/Kiev \
    -e N8N_BASIC_AUTH_ACTIVE=true \
    -e N8N_BASIC_AUTH_USER=admin \
    -e N8N_BASIC_AUTH_PASSWORD=$N8N_PASSWORD \
    -e DB_TYPE=postgresdb \
    -e DB_POSTGRESDB_HOST=$BD_N8N_CONTAINER \
    -e DB_POSTGRESDB_PORT=5432 \
    -e DB_POSTGRESDB_DATABASE=n8n \
    -e DB_POSTGRESDB_USER=n8n \
    -e DB_POSTGRESDB_PASSWORD=$BD_N8N_PASSWORD \
    -e N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true \
    -e N8N_PROTOCOL=https \
    -e N8N_PORT=5678 \
    --label "traefik.enable=true" \
    --label "traefik.http.routers.n8n.rule=Host(\`$DOMAIN_NAME\`)" \
    --label "traefik.http.routers.n8n.entrypoints=websecure" \
    --label "traefik.http.routers.n8n.tls.certresolver=letsencrypt" \
    --label "traefik.http.services.n8n.loadbalancer.server.port=5678" \
    --label "traefik.http.middlewares.secure-headers.headers.sslredirect=true" \
    --label "traefik.http.middlewares.secure-headers.headers.stsincludesubdomains=true" \
    --label "traefik.http.middlewares.secure-headers.headers.stspreload=true" \
    --label "traefik.http.middlewares.secure-headers.headers.stsseconds=31536000" \
    --label "traefik.http.middlewares.secure-headers.headers.forcestsheader=true" \
    --label "traefik.http.routers.n8n.middlewares=secure-headers" \
    docker.n8n.io/n8nio/n8n

echo "https://$DOMAIN_NAME" > /tmp/n8n_url.txt

echo ""
echo "üéâ N8N —Å SSL –∏ PostgreSQL –∑–∞–ø—É—â–µ–Ω!"
echo ""
echo "üîó –î–æ—Å—Ç—É–ø—ã:"
echo "   üìä n8n: https://$DOMAIN_NAME"
echo "   üóÑÔ∏è PostgreSQL (workflows): localhost:5432"
echo "   üóÑÔ∏è PostgreSQL (N8N –¥–∞–Ω–Ω—ã–µ): localhost:5433"
echo "   üåê Traefik dashboard: http://localhost:8080"
echo ""
echo "üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
echo "   n8n: admin / $N8N_PASSWORD"
echo "   PostgreSQL (workflows): postgres / $POSTGRES_PASSWORD"
echo "   PostgreSQL (N8N –¥–∞–Ω–Ω—ã–µ): n8n / $BD_N8N_PASSWORD"
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å:"
docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(traefik|n8n|postgres|bd_n8n)"
echo ""
echo "üîó –ö–æ–º–∞–Ω–¥—ã:"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker rm -f traefik n8n postgres bd_n8n"
echo "   –õ–æ–≥–∏ n8n: docker logs n8n"
echo "   –õ–æ–≥–∏ Traefik: docker logs traefik"
echo "   –õ–æ–≥–∏ PostgreSQL (workflows): docker logs postgres"
echo "   –õ–æ–≥–∏ PostgreSQL (N8N): docker logs bd_n8n"
echo "   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSL: curl -I https://$DOMAIN_NAME"
echo ""
echo "üìã –í–∞–∂–Ω–æ:"
echo "   ‚Ä¢ N8N –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: bd_n8n) ‚úÖ"
echo "   ‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–π PostgreSQL –¥–ª—è workflows (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: postgres) ‚úÖ"
echo "   ‚Ä¢ –î–æ–º–µ–Ω $DOMAIN_NAME –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ"
echo "   ‚Ä¢ –ü–æ—Ä—Ç—ã 80 –∏ 443 –æ—Ç–∫—Ä—ã—Ç—ã ‚úÖ"
echo "   ‚Ä¢ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç Let's Encrypt ‚úÖ"
echo "   ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 –¥–Ω–µ–π"
echo ""
echo "üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ N8N workflows:"
echo "   ‚Ä¢ Workflows DB: host=postgres, port=5432, user=postgres, password=$POSTGRES_PASSWORD"
echo "   ‚Ä¢ N8N Internal: host=bd_n8n, port=5432, user=n8n, password=$BD_N8N_PASSWORD"
echo ""
echo "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:"
echo "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP ‚Üí HTTPS"
echo "   ‚Ä¢ HSTS headers –≤–∫–ª—é—á–µ–Ω—ã"
echo "   ‚Ä¢ TLS 1.2+ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
echo "   ‚Ä¢ –î–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π"