services:
  postgres:
    build: ./postgres
    container_name: postgres_container
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - postgres_fastapi_network

  web:
    build:
      context: .
      dockerfile: app/Dockerfile
    container_name: fastapi_app
    working_dir: /app
    ports:
      - "5000:5000"
    volumes:
      - ./app:/app # монтируем только директорию app, где уже есть всё необходимое
      - ./alembic.ini:/app/alembic.ini
      - ./alembic:/app/alembic
    environment:
      PYTHONPATH: /app
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres_db
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/docs" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: [ "main.py" ]
    restart: always
    networks:
      - postgres_fastapi_network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client_app # добавим имя контейнера
    volumes:
      - ./client:/client # монтируем код клиента
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      API_ENDPOINT: "http://web:5000/transfer" # правильный URL для доступа к API
      PYTHONUNBUFFERED: 1 # для правильного логирования
    depends_on:
      web:
        condition: service_healthy
    networks:
      - postgres_fastapi_network
    restart: always

  alembic:
    build:
      context: .
      dockerfile: app/Dockerfile
    container_name: alembic_runner
    volumes:
      - ./:/app # монтируем весь проект в /app
    working_dir: /app # рабочая директория соответствует монтированию
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PYTHONPATH: /app # PYTHONPATH тоже должен соответствовать

      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres_db
    entrypoint: [ "alembic" ] # Переопределяем ENTRYPOINT
    command: [ "-c", "alembic.ini", "upgrade", "head" ] # Команда как массив
    networks:
      - postgres_fastapi_network

networks:
  postgres_fastapi_network:
    name: postgres_fastapi_network
