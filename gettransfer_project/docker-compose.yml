services:
  postgres:
    build: ./postgres
    container_name: postgres_container
    user: "1000:1000"
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - postgres_fastapi_network
  web:
    build: ./app
    container_name: fastapi_app
    ports:
      - "5000:5000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    env_file:
      - ./core/.env
    depends_on:
      - postgres
    environment:
      RUN_MIGRATIONS: "1"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
    restart: always
    networks:
      - postgres_fastapi_network
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - /etc/localtime:/etc/localtime:ro # Использование временной зоны хоста
      - /etc/timezone:/etc/timezone:ro # Использование временной зоны хоста
    depends_on:
      - app
    networks:
      - postgres_fastapi_network
    restart: always
  alembic:
    build: ./app
    container_name: alembic_runner
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
    command: [ "alembic", "upgrade", "head" ]
    restart: "no"

networks:
  postgres_fastapi_network:
    name: postgres_fastapi_network
