  # PostgreSQL сервис
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        TIMEZONE: ${PG_PROJECT_TIMEZONE} 
    container_name: ${PROJECT_NAME}_db
    restart: unless-stopped
    
    # Загрузка всех переменных из .env файлов
    env_file:
      - .env
    
    environment:
      - TZ=${PG_PROJECT_TIMEZONE}
      # Явно указываем переменные для PostgreSQL
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-klarstein_pl}
      - PGDATA=${PGDATA:-/var/lib/postgresql/data/pgdata}
    volumes:
      # Монтирование директории данных
      - ${POSTGRES_DATA_DIR:-./pgdata}:${PGDATA:-/var/lib/postgresql/data/pgdata}
    networks:
      - app_network
    ports:
      # внешний порт:Внутренний (его не меняем)
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-klarstein_pl}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: 
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      # Монтируем config.json из корня проекта в контейнер
      - ./:/app/

      # Опционально: монтируем папку templates для разработки
      - ./web/templates:/web/templates
    environment:
      - PYTHONPATH=/web
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy

  # Клиент - только для одноразового запуска
  client:
    build: 
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - ./log:/client/log
    networks:
      - app_network
    # Не запускать автоматически - только через docker-compose run
    restart: "no"
    profiles:
      - manual  # Профиль для ручного запуска
    depends_on:
      db:
        condition: service_healthy
      web:
        condition: service_started
    # Добавляем переменные окружения для доступа к БД
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432

networks:
  app_network:
    driver: bridge