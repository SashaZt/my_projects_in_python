import json
import sqlite3
import sys
from pathlib import Path

import gspread
from google.oauth2.service_account import Credentials
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_directory = Path.cwd()
parent_directory = current_directory.parent

cookies_directory = parent_directory / "cookies"
cookies_file = cookies_directory / "cookies_important.json"

config_directory = current_directory / "config"
db_directory = current_directory / "db"
json_directory = current_directory / "json"
log_directory = current_directory / "log"
db_directory.mkdir(parents=True, exist_ok=True)
json_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)


output_json_file = json_directory / "output.json"
config_file = config_directory / "config.json"
service_account_file = config_directory / "credentials.json"
log_file_path = log_directory / "log_message.log"
db_path = db_directory / "tikleap_users.db"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)


# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def get_config(file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    with open(file, "r", encoding="utf-8") as file:
        data = json.load(file)
    return data


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = get_config(config_file)
cookies = get_config(cookies_file)
cookies_dict = cookies["cookies"]

countries = config["country"]


SPREADSHEET = config["google"]["spreadsheet"]
SHEET = config["google"]["sheet"]


def get_google_sheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç."""
    try:
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å google-auth
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]

        credentials = Credentials.from_service_account_file(
            service_account_file, scopes=scopes
        )

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ gspread —Å –Ω–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        client = gspread.authorize(credentials)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–ª—é—á—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏—Å—Ç
        spreadsheet = client.open_by_key(SPREADSHEET)
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Spreadsheet.")
        return spreadsheet.worksheet(SHEET)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        raise FileNotFoundError("–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API Google Sheets: {e}")
        raise
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        raise


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ Google Sheets
sheet = get_google_sheet()


def ensure_row_limit(sheet, required_rows=100000):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ Google Sheets, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    current_rows = len(sheet.get_all_values())
    if current_rows < required_rows:
        sheet.add_rows(required_rows - current_rows)


ensure_row_limit(sheet, 1000)


def export_unloaded_users_to_google_sheets():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö loading_table = False, –≤ Google Sheets
    """
    try:
        logger.info("–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...")
        if not db_path.exists():
            logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}")
            return

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å loading_table = False
        cursor.execute(
            """
        SELECT current_datetime, country_code, profile_link, rank, earning
        FROM tikleap_users
        WHERE loading_table = 0
        ORDER BY country_code, rank
        """
        )

        unloaded_users = cursor.fetchall()

        if not unloaded_users:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets")
            conn.close()
            return

        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {len(unloaded_users)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç Google Sheets
        sheet = get_google_sheet()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = sheet.row_values(1)
        expected_headers = [
            "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            "–ò—Å—Ç–æ—á–Ω–∏–∫",
            "–°—Å—ã–ª–∫–∞",
            "–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ",
            "–ó–∞—Ä–∞–±–æ—Ç–æ–∫",
        ]

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if not headers or headers != expected_headers:
            sheet.clear()  # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            sheet.update(values=[expected_headers], range_name="A1:E1")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Google Sheets")

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        existing_data = sheet.get_all_values()
        next_row = len(existing_data) + 1

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        rows_to_insert = []
        updated_user_ids = []

        for user in unloaded_users:
            rows_to_insert.append(list(user))

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è loading_table
            cursor.execute(
                """
            SELECT id FROM tikleap_users 
            WHERE profile_link = ?
            """,
                (user[2],),
            )

            user_id = cursor.fetchone()
            if user_id:
                updated_user_ids.append(user_id[0])

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        if rows_to_insert:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ (A{next_row}:E{next_row+len(rows_to_insert)-1})
            range_to_update = f"A{next_row}:E{next_row+len(rows_to_insert)-1}"

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ values, –ø–æ—Ç–æ–º range_name
            sheet.update(values=rows_to_insert, range_name=range_to_update)

            logger.success(
                f"–£—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω–æ {len(rows_to_insert)} –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ loading_table –¥–ª—è –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for user_id in updated_user_ids:
                cursor.execute(
                    """
                UPDATE tikleap_users
                SET loading_table = 1
                WHERE id = ?
                """,
                    (user_id,),
                )

            conn.commit()
            logger.info(
                f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å loading_table –¥–ª—è {len(updated_user_ids)} –∑–∞–ø–∏—Å–µ–π"
            )

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        conn.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        try:
            if "conn" in locals() and conn:
                conn.close()
        except:
            pass


def get_column_b_data(sheet_name="–°–ü–ò–°–û–ö –°–¢–†–ê–ù –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ B —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞.

    Args:
        sheet_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ Google Sheets

    Returns:
        list: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ B
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]

        credentials = Credentials.from_service_account_file(
            service_account_file, scopes=scopes
        )

        client = gspread.authorize(credentials)
        spreadsheet = client.open_by_key(SPREADSHEET)
        worksheet = spreadsheet.worksheet(sheet_name)

        logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–∏—Å—Ç—É '{sheet_name}'")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ B
        column_b_values = worksheet.col_values(2)  # 2 = –∫–æ–ª–æ–Ω–∫–∞ B

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        filtered_values = [value.strip() for value in column_b_values if value.strip()]

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(filtered_values)} –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ B")
        return filtered_values

    except gspread.exceptions.WorksheetNotFound:
        logger.error(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
        raise
    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API Google Sheets: {e}")
        raise
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
