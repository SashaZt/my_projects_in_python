import asyncio
import datetime
import json
import random
import sqlite3
import sys
import time
from datetime import datetime
from pathlib import Path

import gspread
import schedule
from bs4 import BeautifulSoup
from google.oauth2.service_account import Credentials
from loguru import logger
from main_db import save_user_to_sqlite_online, save_users_to_sqlite
from main_sheets import export_unloaded_users_to_google_sheets, get_column_b_data
from rnet import Client, Impersonate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_directory = Path.cwd()
parent_directory = current_directory.parent

cookies_directory = parent_directory / "cookies"
cookies_file = cookies_directory / "cookies_important.json"

config_directory = current_directory / "config"

json_directory = current_directory / "json"
log_directory = current_directory / "log"
db_directory = current_directory / "db"


db_directory.mkdir(parents=True, exist_ok=True)
json_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)


output_json_file = json_directory / "output.json"
config_file = config_directory / "config.json"
service_account_file = config_directory / "credentials.json"
log_file_path = log_directory / "log_message.log"
db_path = db_directory / "tikleap_users.db"

headers = {
    "accept": "*/*",
    "accept-language": "ru,en;q=0.9,uk;q=0.8",
    "dnt": "1",
    "priority": "u=1, i",
    "referer": "https://www.tikleap.com/country/kz",
    "sec-ch-ua": '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": '"macOS"',
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-origin",
    "sec-gpc": "1",
    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
    "x-requested-with": "XMLHttpRequest",
}

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)


# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def get_config(file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    with open(file, "r", encoding="utf-8") as file:
        data = json.load(file)
    return data


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = get_config(config_file)
cookies = get_config(cookies_file)
cookies_dict = cookies["cookies"]

# countries = config["country"]


def get_random_pause(min_seconds, max_seconds):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Returns:
        float: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã

    Examples:
        >>> pause = get_random_pause(2, 5)
        >>> print(f"–ü–∞—É–∑–∞: {pause:.2f} —Å–µ–∫—É–Ω–¥")

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å time.sleep
        >>> time.sleep(get_random_pause(1, 3))

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å asyncio.sleep
        >>> await asyncio.sleep(get_random_pause(0.5, 2.0))
    """
    if min_seconds > max_seconds:
        min_seconds, max_seconds = max_seconds, min_seconds
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–µ–Ω—è–ª –º–µ—Å—Ç–∞–º–∏ min –∏ max: {min_seconds} - {max_seconds}")

    if min_seconds < 0:
        min_seconds = 0
        logger.warning(
            "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 0"
        )

    pause_duration = random.uniform(min_seconds, max_seconds)
    logger.debug(
        f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {pause_duration:.2f} —Å–µ–∫—É–Ω–¥ ({min_seconds}-{max_seconds})"
    )

    return pause_duration


async def async_random_pause(min_seconds, max_seconds):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Examples:
        >>> await async_random_pause(1, 3)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
        >>> await async_random_pause(2.5, 5.0)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 2.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    """
    pause_duration = get_random_pause(min_seconds, max_seconds)
    logger.info(f"üò¥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ {pause_duration:.2f} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(pause_duration)


async def response_methods():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    client = Client(impersonate=Impersonate.Chrome137)
    all_users_data = []

    try:
        logger.info("–û–±–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
        export_unloaded_users_to_google_sheets()
        countries = get_column_b_data()
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω: {countries}")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É
        for country in countries:
            logger.info(f"üåç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—É: {country}")
            country_users = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω—ã
            for page in range(1, 6):
                logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}")

                response = await client.get(
                    f"https://www.tikleap.com/country-load-more/{country}/{page}",
                    cookies=cookies_dict,
                    headers=headers,
                )
                if response.ok:
                    logger.info(f"Status Code: {response.status_code}")

                    json_content = await response.json()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    file_name = json_directory / f"{country}_page_{page:02d}.json"
                    with open(file_name, "w", encoding="utf-8") as f:
                        json.dump(json_content, f, ensure_ascii=False, indent=4)
                    logger.success(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {file_name}")

                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    page_users = parse_users_data(json_content, country)
                    for user in page_users:
                        save_user_to_sqlite_online(user, db_path)
                    country_users.extend(page_users)
                    all_users_data.extend(page_users)

                    logger.info(
                        f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –Ω–∞–π–¥–µ–Ω–æ {len(page_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    )

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await async_random_pause(10, 15)
                else:
                    logger.info(response.status_code)
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏
            logger.info(
                f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã {country}. –ù–∞–π–¥–µ–Ω–æ {len(country_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            await async_random_pause(15, 30)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Ñ–∞–π–ª
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª: {output_json_file}")
        with open(output_json_file, "w", encoding="utf-8") as f:
            json.dump(all_users_data, f, ensure_ascii=False, indent=4)

        logger.success(
            f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users_data)}"
        )
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        # save_users_to_sqlite(all_users_data)

        export_unloaded_users_to_google_sheets()
        return all_users_data

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ response_methods: {e}")
        return []

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            await client.close()
        except:
            pass


def parse_users_data(json_content, country_code):
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞

    Args:
        json_content (dict): JSON-–¥–∞–Ω–Ω—ã–µ —Å HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        country_code (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    users_data = []
    current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º HTML –∏–∑ JSON
        html_content = json_content.get("html", "")
        if not html_content:
            logger.warning("HTML –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ JSON")
            return users_data

        # –ü–∞—Ä—Å–∏–º HTML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
        soup = BeautifulSoup(html_content, "lxml")

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
        table_rows = soup.find_all("a", class_="ranklist-table-row")

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(table_rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")

        for row in table_rows:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                profile_link = row.get("href", "")
                if not profile_link:
                    logger.warning("–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å")
                    continue
                # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
                rank_element = row.select_one(".ranklist-place-wrapper span")
                if not rank_element:
                    logger.warning(
                        f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è {profile_link} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–Ω–≥–∞"
                    )
                    continue
                rank = rank_element.text.strip()

                # –ù–∞—Ö–æ–¥–∏–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
                earning_element = row.select_one(".ranklist-earning-wrapper span.price")
                if not earning_element:
                    logger.warning(
                        f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è {profile_link} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞"
                    )
                    continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
                earning_display = earning_element.text.strip()

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = {
                    "current_datetime": current_datetime,
                    "country_code": country_code,
                    "rank": int(rank) if rank.isdigit() else rank,
                    "profile_link": profile_link,
                    "earning": earning_display,
                }

                users_data.append(user_data)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                continue

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    return users_data


if __name__ == "__main__":
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö TikLeap...")
        result = asyncio.run(response_methods())

        if result and len(result) > 0:
            logger.success(
                f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –°–æ–±—Ä–∞–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π"
            )
            sys.exit(0)  # –ö–æ–¥ 0 = —É—Å–ø–µ—Ö
        else:
            logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
            sys.exit(2)  # –ö–æ–¥ 2 = –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

    except Exception as e:
        error_msg = str(e).lower()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        if any(
            keyword in error_msg
            for keyword in [
                "is_decode error",
                "decode",
                "json",
                "cookies",
                "unauthorized",
                "forbidden",
                "authentication",
                "session",
                "token",
            ]
        ):
            logger.error(
                "üîê –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π/—Å–µ—Å—Å–∏–µ–π - –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            )
            sys.exit(3)  # –ö–æ–¥ 3 = –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        elif any(
            keyword in error_msg
            for keyword in ["timeout", "connection", "network", "unreachable"]
        ):
            logger.error("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ")
            sys.exit(4)  # –ö–æ–¥ 4 = —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
        else:
            logger.error("üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞")
            sys.exit(1)  # –ö–æ–¥ 1 = –æ–±—â–∞—è –æ—à–∏–±–∫–∞
