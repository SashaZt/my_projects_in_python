import json
import sqlite3
import sys
from pathlib import Path

from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_directory = Path.cwd()

config_directory = current_directory / "config"

json_directory = current_directory / "json"
db_directory = current_directory / "db"
log_directory = current_directory / "log"

db_directory.mkdir(parents=True, exist_ok=True)
json_directory.mkdir(parents=True, exist_ok=True)


output_json_file = json_directory / "output.json"
config_file = config_directory / "config.json"
log_file_path = log_directory / "log_message.log"
db_path = db_directory / "tikleap_users.db"


logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)


# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def get_config(file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    with open(file, "r", encoding="utf-8") as file:
        data = json.load(file)
    return data


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = get_config(config_file)


def save_users_to_sqlite(users_data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    Args:
        users_data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db_path (str or Path, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        if not users_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute(
            """
        CREATE TABLE IF NOT EXISTS tikleap_users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            current_datetime TEXT,
            country_code TEXT,
            profile_link TEXT UNIQUE,
            rank INTEGER,
            earning TEXT,
            loading_table BOOLEAN DEFAULT 0
        )
        """
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        added_count = 0
        updated_count = 0

        for user in users_data:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if not user.get("profile_link"):
                    logger.warning("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç profile_link")
                    continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rank –≤ int —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    rank = int(user.get("rank", 0))
                except (ValueError, TypeError):
                    logger.warning(
                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç rank –¥–ª—è {user.get('profile_link')}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0"
                    )
                    rank = 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute(
                    "SELECT * FROM tikleap_users WHERE profile_link = ?",
                    (user["profile_link"],),
                )
                existing_user = cursor.fetchone()

                if existing_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    cursor.execute(
                        """
                    UPDATE tikleap_users SET 
                        current_datetime = ?,
                        country_code = ?,
                        rank = ?,
                        earning = ?
                    WHERE profile_link = ?
                    """,
                        (
                            user["current_datetime"],
                            user["country_code"],
                            rank,
                            user["earning"],
                            user["profile_link"],
                        ),
                    )
                    updated_count += 1
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute(
                        """
                    INSERT INTO tikleap_users 
                    (current_datetime, country_code, profile_link, rank, earning, loading_table) 
                    VALUES (?, ?, ?, ?, ?, 0)
                    """,
                        (
                            user["current_datetime"],
                            user["country_code"],
                            user["profile_link"],
                            rank,
                            user["earning"],
                        ),
                    )
                    added_count += 1
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('profile_link', 'Unknown')}: {e}"
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.success(
            f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π"
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ
        cursor.execute("SELECT COUNT(*) FROM tikleap_users")
        total_count = cursor.fetchone()[0]
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_count}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–≥—Ä—É–∑–∫–µ
        cursor.execute("SELECT COUNT(*) FROM tikleap_users WHERE loading_table = 0")
        unloaded_count = cursor.fetchone()[0]
        logger.info(f"–û–∂–∏–¥–∞—é—Ç –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets: {unloaded_count} –∑–∞–ø–∏—Å–µ–π")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        conn.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")


def save_user_to_sqlite_online(user, db_path=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º)

    Args:
        user (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_path (str or Path, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        if not user:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return

        # logger.debug(
        #     f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {user.get('profile_link', 'Unknown')}"
        # )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS tikleap_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                current_datetime TEXT,
                country_code TEXT,
                rank INTEGER,
                profile_link TEXT UNIQUE,
                earning TEXT,
                loading_table BOOLEAN DEFAULT 0
            )
            """
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if not user.get("profile_link"):
            logger.warning("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç profile_link")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rank –≤ int —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            rank = int(user.get("rank", 0))
        except (ValueError, TypeError):
            logger.warning(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç rank –¥–ª—è {user.get('profile_link')}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0"
            )
            rank = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute(
            "SELECT id FROM tikleap_users WHERE profile_link = ?",
            (user["profile_link"],),
        )
        existing_user = cursor.fetchone()

        if existing_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute(
                """
                UPDATE tikleap_users SET 
                    current_datetime = ?,
                    country_code = ?,
                    rank = ?,
                    earning = ?
                WHERE profile_link = ?
                """,
                (
                    user.get("current_datetime", ""),
                    user.get("country_code", ""),
                    rank,
                    user.get("earning", ""),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ user["earning"]
                    user["profile_link"],
                ),
            )
            # logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['profile_link']}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                """
                INSERT INTO tikleap_users 
                (current_datetime, country_code, profile_link, rank, earning, loading_table) 
                VALUES (?, ?, ?, ?, ?, 0)
                """,
                (
                    user.get("current_datetime", ""),
                    user.get("country_code", ""),
                    user["profile_link"],
                    rank,
                    user.get("earning", ""),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ user["earning"]
                ),
            )
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['profile_link']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        conn.close()

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('profile_link', 'Unknown')}: {e}"
        )
        import traceback

        logger.error(f"Traceback: {traceback.format_exc()}")
