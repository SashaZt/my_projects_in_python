#!/usr/bin/env python3
"""
TikLeap Orchestrator - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è -> —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º tikleap_manager.sh
"""

import asyncio
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(
    "logs/orchestrator.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
    level="INFO",
    rotation="10 MB",
    retention="7 days",
)
logger.add(
    sys.stdout,
    format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | <cyan>{message}</cyan>",
    level="INFO",
)


class TikLeapOrchestrator:
    def __init__(self):
        self.project_root = Path(__file__).parent.absolute()
        self.tikleap_manager = self.project_root / "tikleap_manager.sh"
        self.client_script = self.project_root / "client" / "main.py"
        self.cookies_file = self.project_root / "cookies" / "cookies_important.json"
        self.cookies_dir = self.project_root / "cookies"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.cookies_dir.mkdir(exist_ok=True)
        (self.project_root / "logs").mkdir(exist_ok=True)

        logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.project_root}")
        logger.info(f"üîß TikLeap manager: {self.tikleap_manager}")
        logger.info(f"üìä Client script: {self.client_script}")
        logger.info(f"üç™ Cookies file: {self.cookies_file}")

    def check_tikleap_manager(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ tikleap_manager.sh"""
        if not self.tikleap_manager.exists():
            logger.error(f"‚ùå tikleap_manager.sh –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.tikleap_manager}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if not os.access(self.tikleap_manager, os.X_OK):
            logger.warning("‚ö†Ô∏è tikleap_manager.sh –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            try:
                os.chmod(self.tikleap_manager, 0o755)
                logger.info("‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")
                return False

        return True

    def run_auth_via_manager(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ tikleap_manager.sh --full"""
        try:
            if not self.check_tikleap_manager():
                return False

            logger.info("üîê –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ tikleap_manager.sh...")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ cookies –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.cookies_file.exists():
                self.cookies_file.unlink()
                logger.info("üóëÔ∏è –£–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä—ã–µ cookies")

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ cookies —Ñ–∞–π–ª—ã
            existing_cookies = list(self.cookies_dir.glob("*.json"))
            if existing_cookies:
                for cookie_file in existing_cookies:
                    cookie_file.unlink()
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {cookie_file.name}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º tikleap_manager.sh --full
            logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {self.tikleap_manager} --full")

            process = subprocess.Popen(
                [str(self.tikleap_manager), "--full"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=str(self.project_root),
                text=True,
                bufsize=1,
                universal_newlines=True,
            )

            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            logger.info("üì∫ –í—ã–≤–æ–¥ tikleap_manager:")
            stdout_lines = []
            stderr_lines = []

            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if process.poll() is not None:
                    break

                # –ß–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                try:
                    import select

                    ready, _, _ = select.select(
                        [process.stdout, process.stderr], [], [], 1
                    )

                    for stream in ready:
                        if stream == process.stdout:
                            line = stream.readline()
                            if line:
                                line = line.strip()
                                stdout_lines.append(line)
                                logger.info(f"üì§ {line}")
                        elif stream == process.stderr:
                            line = stream.readline()
                            if line:
                                line = line.strip()
                                stderr_lines.append(line)
                                logger.warning(f"‚ö†Ô∏è {line}")

                except:
                    # Fallback –¥–ª—è —Å–∏—Å—Ç–µ–º –±–µ–∑ select
                    time.sleep(1)

            # –î–æ—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
            remaining_stdout, remaining_stderr = process.communicate()
            if remaining_stdout:
                for line in remaining_stdout.strip().split("\n"):
                    if line:
                        stdout_lines.append(line)
                        logger.info(f"üì§ {line}")

            if remaining_stderr:
                for line in remaining_stderr.strip().split("\n"):
                    if line:
                        stderr_lines.append(line)
                        logger.warning(f"‚ö†Ô∏è {line}")

            return_code = process.returncode
            logger.info(f"üèÅ tikleap_manager –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {return_code}")

            if return_code == 0:
                logger.success("‚úÖ tikleap_manager –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤
                time.sleep(3)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies —Ñ–∞–π–ª–∞
                if self.cookies_file.exists():
                    logger.success(f"üç™ Cookies –Ω–∞–π–¥–µ–Ω—ã: {self.cookies_file}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    file_size = self.cookies_file.stat().st_size
                    logger.info(f"üìè –†–∞–∑–º–µ—Ä cookies —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

                    if file_size > 0:
                        try:
                            import json

                            with open(self.cookies_file, "r") as f:
                                cookies_data = json.load(f)

                            if (
                                isinstance(cookies_data, dict)
                                and "cookies" in cookies_data
                            ):
                                cookies_count = len(cookies_data["cookies"])
                                logger.success(
                                    f"‚úÖ Cookies –≤–∞–ª–∏–¥–Ω—ã, —Å–æ–¥–µ—Ä–∂–∞—Ç {cookies_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                                )
                                return True
                            elif isinstance(cookies_data, list):
                                logger.success(
                                    f"‚úÖ Cookies –≤–∞–ª–∏–¥–Ω—ã, —Å–æ–¥–µ—Ä–∂–∞—Ç {len(cookies_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                                )
                                return True
                            else:
                                logger.warning(
                                    f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ cookies: {type(cookies_data)}"
                                )
                                return True  # –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookies: {e}")
                            return False
                    else:
                        logger.error("‚ùå Cookies —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
                        return False
                else:
                    # –ü–æ–∏—â–µ–º cookies —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                    all_files = list(self.cookies_dir.iterdir())
                    logger.warning(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    logger.info(
                        f"üìÅ –§–∞–π–ª—ã –≤ cookies –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {[f.name for f in all_files]}"
                    )
                    return False
            else:
                logger.error(
                    f"‚ùå tikleap_manager –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥: {return_code}"
                )
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback

            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            return False

    async def run_data_collection(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üìä –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ client/main.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not self.client_script.exists():
                logger.error(f"‚ùå –§–∞–π–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.client_script}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cookies —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            if not self.cookies_file.exists():
                logger.error("‚ùå Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö")
                return False

            # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ client
            client_dir = self.project_root / "client"
            logger.info(f"üìÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {client_dir}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env["PYTHONPATH"] = str(self.project_root)

            logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: python {self.client_script}")

            process = subprocess.Popen(
                [sys.executable, str(self.client_script)],
                cwd=str(client_dir),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env=env,
                text=True,
            )

            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            logger.info("üì∫ –í—ã–≤–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")

            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç
                stdout, stderr = process.communicate(timeout=600)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
                if stdout:
                    for line in stdout.strip().split("\n"):
                        if line:
                            logger.info(f"üì§ {line}")

                if stderr:
                    for line in stderr.strip().split("\n"):
                        if line:
                            logger.warning(f"‚ö†Ô∏è {line}")

            except subprocess.TimeoutExpired:
                logger.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
                process.kill()
                stdout, stderr = process.communicate()
                return False

            if process.returncode == 0:
                logger.success("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–¥: {process.returncode}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback

            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            return False

    async def run_single_cycle(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è + —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        start_time = datetime.now()

        try:
            # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ tikleap_manager.sh
            auth_success = self.run_auth_via_manager()
            if not auth_success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                return False

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
            logger.info("‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö...")
            await asyncio.sleep(5)

            # –®–∞–≥ 2: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            data_success = await self.run_data_collection()
            if not data_success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False

            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
            duration = datetime.now() - start_time
            logger.success(f"üéâ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            import traceback

            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            return False

    async def run_scheduler(self, interval_minutes=5):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
        logger.info(f"‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_minutes} –º–∏–Ω—É—Ç")

        cycle_count = 0
        while True:
            try:
                cycle_count += 1
                logger.info(f"üî¢ –¶–∏–∫–ª #{cycle_count}")

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª
                success = await self.run_single_cycle()

                if success:
                    logger.success(f"‚úÖ –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                logger.info(
                    f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞..."
                )
                await asyncio.sleep(interval_minutes * 60)

            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                import traceback

                logger.error(f"üîç Traceback: {traceback.format_exc()}")
                logger.info("‚è≥ –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                await asyncio.sleep(120)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    orchestrator = TikLeapOrchestrator()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == "--single":
            # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            logger.info("üéØ –†–µ–∂–∏–º: –æ–¥–∏–Ω —Ü–∏–∫–ª")
            success = await orchestrator.run_single_cycle()
            sys.exit(0 if success else 1)
        elif sys.argv[1] == "--interval":
            # –ó–∞–ø—É—Å–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            interval = int(sys.argv[2]) if len(sys.argv) > 2 else 5
            logger.info(f"üîÑ –†–µ–∂–∏–º: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω—É—Ç")
            await orchestrator.run_scheduler(interval)
        elif sys.argv[1] == "--auth-only":
            # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            logger.info("üîê –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            success = orchestrator.run_auth_via_manager()
            sys.exit(0 if success else 1)
        elif sys.argv[1] == "--scrape-only":
            # –¢–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            logger.info("üìä –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
            success = await orchestrator.run_data_collection()
            sys.exit(0 if success else 1)
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python main_orchestrator.py --single           # –û–¥–∏–Ω —Ü–∏–∫–ª")
            print("  python main_orchestrator.py --interval 5       # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
            print(
                "  python main_orchestrator.py --auth-only        # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            )
            print(
                "  python main_orchestrator.py --scrape-only      # –¢–æ–ª—å–∫–æ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"
            )
            sys.exit(1)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        logger.info("üîÑ –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        await orchestrator.run_scheduler(5)


if __name__ == "__main__":
    asyncio.run(main())
