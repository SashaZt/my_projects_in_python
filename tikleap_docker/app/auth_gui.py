#!/usr/bin/env python3
import asyncio
import datetime
import json
import os
import sys

from loguru import logger

try:
    import nodriver as uc
except ImportError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ nodriver...")
    import subprocess

    subprocess.check_call([sys.executable, "-m", "pip", "install", "nodriver"])
    import nodriver as uc

# –ü—Ä–æ—Å—Ç—ã–µ –ø—É—Ç–∏ –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
home_dir = os.path.expanduser("~")
work_dir = os.path.join(home_dir, "tikleap_work")
cookies_dir = os.path.join(work_dir, "cookies")

# –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
try:
    os.makedirs(work_dir, exist_ok=True)
    os.makedirs(cookies_dir, exist_ok=True)
    print(f"‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {work_dir}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º /tmp –∫–∞–∫ fallback
    work_dir = "/tmp/tikleap_work"
    cookies_dir = os.path.join(work_dir, "cookies")
    os.makedirs(work_dir, exist_ok=True)
    os.makedirs(cookies_dir, exist_ok=True)
    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {work_dir}")

logger.remove()

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


async def get_cookies(browser):
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è cookies –¥–ª—è nodriver
    """
    try:
        # ========= –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –í–°–ï–• COOKIES =========
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies...")

        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ cookies –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Cookie
        all_cookies = await browser.cookies.get_all()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_cookies)} cookies")

        if not all_cookies:
            logger.warning("Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {}

        # ========= –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• COOKIES =========
        target_cookies = {}
        important_keys = ["XSRF-TOKEN", "tikleap_session"]

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö cookies
        for cookie in all_cookies:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ Cookie, –∞ –Ω–µ .get()
                cookie_name = cookie.name if hasattr(cookie, "name") else ""
                cookie_value = cookie.value if hasattr(cookie, "value") else ""

                if cookie_name in important_keys:
                    target_cookies[cookie_name] = cookie_value
                    logger.success(
                        f"–ù–∞–π–¥–µ–Ω cookie: {cookie_name} = {cookie_value[:20]}..."
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ cookie: {e}")
                continue

        # –ü–æ–∏—Å–∫ cookies –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏
        for cookie in all_cookies:
            try:
                cookie_name = (
                    cookie.name.lower()
                    if hasattr(cookie, "name") and cookie.name
                    else ""
                )
                cookie_value = cookie.value if hasattr(cookie, "value") else ""

                # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if any(
                    keyword in cookie_name
                    for keyword in ["xsrf", "csrf", "token", "session"]
                ):
                    if cookie.name not in target_cookies:
                        target_cookies[cookie.name] = cookie_value
                        logger.info(
                            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π cookie: {cookie.name} = {cookie_value[:20]}..."
                        )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö cookies: {e}")
                continue

        # ========= –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –í –°–õ–û–í–ê–†–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø =========

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã Cookie –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON
        cookies_for_json = []
        for cookie in all_cookies:
            try:
                cookie_dict = {
                    "name": getattr(cookie, "name", ""),
                    "value": getattr(cookie, "value", ""),
                    "domain": getattr(cookie, "domain", ""),
                    "path": getattr(cookie, "path", "/"),
                    "secure": getattr(cookie, "secure", False),
                    "httpOnly": getattr(cookie, "httpOnly", False),
                    "sameSite": getattr(cookie, "sameSite", "None"),
                    "expires": getattr(cookie, "expires", None),
                }
                cookies_for_json.append(cookie_dict)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è cookie –≤ —Å–ª–æ–≤–∞—Ä—å: {e}")

        # ========= –°–û–•–†–ê–ù–ï–ù–ò–ï COOKIES =========
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º os.path.join –≤–º–µ—Å—Ç–æ / –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        important_cookies_file = os.path.join(cookies_dir, "cookies_important.json")
        cookie_data = {
            "timestamp": timestamp,
            "created_at": datetime.datetime.now().isoformat(),
            "expires_at": (
                datetime.datetime.now() + datetime.timedelta(days=5)
            ).isoformat(),
            "cookies": target_cookies,
            "total_cookies": len(all_cookies),
        }

        with open(important_cookies_file, "w", encoding="utf-8") as f:
            json.dump(cookie_data, f, indent=4, ensure_ascii=False)
        logger.info(f"–í–∞–∂–Ω—ã–µ cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {important_cookies_file}")

        logger.info("üç™ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ cookies:")
        for name, value in target_cookies.items():
            logger.info(f"  {name}: {value[:30]}{'...' if len(value) > 30 else ''}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   –í—Å–µ–≥–æ cookies: {len(all_cookies)}")
        logger.info(f"   –í–∞–∂–Ω—ã—Ö cookies: {len(target_cookies)}")
        logger.info(
            f"   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –¥–æ: {datetime.datetime.now() + datetime.timedelta(days=5)}"
        )

        # –í—ã–≤–æ–¥ –≤—Å–µ—Ö cookies –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug("üìã –í—Å–µ cookies:")
        for cookie in all_cookies:
            try:
                name = getattr(cookie, "name", "Unknown")
                value = getattr(cookie, "value", "")
                domain = getattr(cookie, "domain", "")
                logger.debug(f"  {name} = {value[:20]}... (domain: {domain})")
            except:
                continue

        return target_cookies

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_cookies: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        return {}


async def main():
    browser = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        browser_args = []
        # browser_args = ["--headless=new"]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        try:
            browser = await uc.start(
                headless=False,  # GUI —Ä–µ–∂–∏–º –¥–ª—è Docker VNC
                browser_args=[
                    "--no-sandbox",
                    "--disable-dev-shm-usage",
                    "--window-size=1800,1000",
                ],
            )
            if not browser:
                logger.error("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            logger.success("–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...")
        try:
            login_page = await browser.get("https://www.tikleap.com/login")
            if not login_page:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ (–≤–µ—Ä–Ω—É–ª–∞ None)")
                return
            logger.info(f"–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {login_page.url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞: {str(e)}")
            return

        await asyncio.sleep(2)

        # –í–≤–æ–¥–∏–º email
        logger.info("–í–≤–æ–¥–∏–º email...")
        email_field = await login_page.select("input#email")
        if email_field:
            await email_field.send_keys("37200@starlivemail.com")
            await asyncio.sleep(0.5)
            logger.success("Email –≤–≤–µ–¥–µ–Ω")
        else:
            logger.warning("–ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

        # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        logger.info("–í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...")
        password_field = await login_page.select("input#password")
        if password_field:
            await password_field.send_keys("bfnsa232@1!dsA")
            await asyncio.sleep(0.5)
            logger.success("–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω")
        else:
            logger.warning("–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞
        logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞...")
        login_button = await login_page.select(".form-action button")

        if not login_button:
            login_button = await login_page.find("Log In", best_match=True)
            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏")

        if not login_button:
            login_button = await login_page.select("form button")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ñ–æ—Ä–º–µ")

        if login_button:
            logger.info("–ö–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–∏–º–∞–µ–º...")
            await asyncio.sleep(1)

            try:
                await login_button.click()
                logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ .click()")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ click(): {e}")
                try:
                    await login_button.mouse_click()
                    logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ .mouse_click()")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ mouse_click(): {e}")

            logger.info("–ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–∞...")
            await asyncio.sleep(5)
        else:
            logger.warning("–ö–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies
        logger.info("üç™ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies...")
        extracted_cookies = await get_cookies(browser)

        if extracted_cookies:
            logger.success("üéâ Cookies —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã!")
            logger.info(f"üìÅ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {cookies_dir}")
            logger.info("üîÑ Cookies –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ 5 –¥–Ω–µ–π")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–∞–∂–Ω—ã–µ cookies")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")

    finally:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ browser –Ω–µ None
        if browser is not None and hasattr(browser, "stop"):
            try:
                logger.info("‚è≥ –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)
                await browser.stop()
                logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")


if __name__ == "__main__":
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ TikLeap –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Docker + VNC –≤–µ—Ä—Å–∏—è)")
    uc.loop().run_until_complete(main())
