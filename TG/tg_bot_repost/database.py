import os

from config import DB_NAME, logger
from models import Base, RepostMessage, async_session
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.future import select
from sqlalchemy.orm import sessionmaker

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = f"sqlite+aiosqlite:///{os.path.abspath(DB_NAME)}"
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)


# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω—ã
async def fetch_pending_messages(category: str, limit: int):
    async with async_session() as session:
        result = await session.execute(
            select(RepostMessage.message_id)
            .where(RepostMessage.category == category, RepostMessage.repost == False)
            .limit(limit)
        )
        messages = result.scalars().all()
        logger.info(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ({category})")
        return messages
