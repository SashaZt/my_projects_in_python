from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from config import logger
from database import fetch_pending_messages
from main import dp
from messages import get_and_forward_messages


# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì© –ü–µ—Ä–µ—Å–ª–∞—Ç—å Materials Pro ‚Üí Free",
                    callback_data="send_materials",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì© –ü–µ—Ä–µ—Å–ª–∞—Ç—å Models Pro ‚Üí Free", callback_data="send_models"
                )
            ],
        ]
    )
    return keyboard


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await fetch_and_save_messages()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID
    keyboard = await main_menu()
    await message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard
    )


# üîπ –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
@dp.callback_query(F.data.in_(["send_materials", "send_models"]))
async def ask_for_limit(callback_query: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏."""
    await callback_query.answer()
    category = (
        "materials_pro" if callback_query.data == "send_materials" else "models_pro"
    )
    await callback_query.message.answer(
        f"üì© –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑ {category.replace('_', ' ')}? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)"
    )
    dp.callback_query_data = {"category": category}


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text.regexp(r"^\d+$"))  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —á–∏—Å–µ–ª
async def process_limit_input(message: types.Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    limit = int(message.text)

    if limit <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
        return

    category = dp.callback_query_data.get("category", "materials_pro")
    await message.answer(
        f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {category.replace('_', ' ')}..."
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    await get_and_forward_messages(category, limit)

    await message.answer(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π!")
