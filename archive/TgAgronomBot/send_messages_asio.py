import aiomysql
import asyncio
from telebot.async_telebot import AsyncTeleBot
from datetime import datetime, timedelta, time as dtime
import logging
import schedule
from TgAgronomBot.configuration.config import DB_CONFIG, TOKEN
import telebot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telebot –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∏–ø–∞–º

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = AsyncTeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
last_check_time = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID
sent_messages = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
daily_message_count = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def create_connection():
    return await aiomysql.connect(
        host=DB_CONFIG["host"],
        port=3306,  # –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        user=DB_CONFIG["user"],
        password=DB_CONFIG["password"],
        db=DB_CONFIG["database"],
    )


async def get_traders():
    query = """
    SELECT 
        u.user_id,
        u.role,
        u.signup,
        u.trial_duration,
        r.region_name,
        m.material_name
    FROM 
        users_tg_bot u
    JOIN 
        user_regions ur ON u.user_id = ur.user_id
    JOIN 
        regions r ON ur.region_id = r.region_id
    JOIN 
        user_raw_materials urm ON u.user_id = urm.user_id
    JOIN 
        raw_materials m ON urm.material_id = m.material_id
    WHERE
        u.role = 'trader';
    """
    try:
        conn = await create_connection()
        async with conn.cursor() as cursor:
            await cursor.execute(query)
            traders = await cursor.fetchall()
        conn.close()
        return traders
    except aiomysql.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {err}")
        return []


async def get_new_messages(trader, check_time):
    user_id, role, signup, trial_duration, region, material = trader
    query = """
    SELECT
        id, Messages, data_time
    FROM
        messages_tg
    WHERE
        data_time > %s AND
        FIND_IN_SET(%s, Regions) > 0 AND
        FIND_IN_SET(%s, Raw_Materials) > 0 AND
        trade = 'sell';
    """
    try:
        conn = await create_connection()
        async with conn.cursor() as cursor:
            await cursor.execute(query, (check_time, region, material))
            messages = await cursor.fetchall()
        conn.close()
        if messages:
            logger.info(f"–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}")
        return messages
    except aiomysql.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}: {err}")
        return []


async def send_message(user_id, message_text):
    try:
        await bot.send_message(user_id, message_text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_messages_to_traders():
    traders = await get_traders()
    current_time = datetime.now()
    check_time_threshold = current_time - timedelta(seconds=30)

    for trader in traders:
        user_id, role, signup, trial_duration, region, material = trader
        signup_time = signup  # signup —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è datetime –æ–±—ä–µ–∫—Ç–æ–º
        end_trial_time = signup_time + timedelta(seconds=trial_duration)

        if current_time <= end_trial_time:
            check_time = last_check_time.get(user_id, signup_time)
            if check_time < check_time_threshold:
                check_time = check_time_threshold

            messages = await get_new_messages(trader, check_time)
            if messages:
                for message in messages:
                    message_id, message_text, message_time = message
                    if message_id not in sent_messages.get(user_id, set()):
                        await send_message(user_id, message_text)
                        if user_id not in sent_messages:
                            sent_messages[user_id] = set()
                        sent_messages[user_id].add(message_id)
                        last_check_time[user_id] = max(
                            last_check_time.get(user_id, signup_time), message_time
                        )
            last_check_time[user_id] = current_time


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_trial_end_message(user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if user_id in user_messages:
        return  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    message = (
        "–í–∞—à–µ –ø—Ä–æ–±–Ω–µ –≤—Ä–µ–º—è –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å, –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É.\n"
        "üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 1 –∫—É–ª—å—Ç—É—Ä—É\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 1 —Ä–µ–≥—ñ–æ–Ω—É\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞780 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "üåΩ–°–¢–ê–ù–î–ê–†–¢ (–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π)\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 5 –∫—É–ª—å—Ç—É—Ä\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 3 —Ä–µ–≥—ñ–æ–Ω—É\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞1985 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "üå±–ï–ö–°–¢–†–ê\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ª—å—Ç—É—Ä\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞3890 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "–Ø–∫–∏–π –∑ —Ç–∞—Ä–∏—Ñ—ñ–≤ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–∏?\n"
        "üëáüëá–û–ë–ï–†–Ü–¢–¨üëáüëá"
    )
    try:
        sent_message = await bot.send_message(
            user_id, message, reply_markup=await tarif_markup()
        )
        logger.info(f"Sent trial period ended message to user {user_id}")
        last_check_time[user_id] = datetime.now()
        daily_message_count[user_id] = daily_message_count.get(user_id, 0) + 1
        user_messages[user_id] = [sent_message.message_id]
    except Exception as e:
        logger.error(f"Failed to send message to user {user_id}: {e}")


async def check_and_send_trial_end_messages():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

    current_time = datetime.now()
    traders = await get_traders()
    for trader in traders:
        user_id, role, signup, trial_duration, region, material = trader
        signup_time = signup
        end_trial_time = signup_time + timedelta(seconds=trial_duration)

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ {user_id} –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

        if (
            current_time > end_trial_time - timedelta(days=1)
            and current_time <= end_trial_time
            and await can_send_message(user_id)
        ):
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä—É {user_id}")
            await send_trial_end_message(user_id)


async def tarif_markup():
    markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    basic_button = telebot.types.InlineKeyboardButton(
        text="–ë–∞–∑–æ–≤—ã–π", callback_data="tarif_basic"
    )
    standard_button = telebot.types.InlineKeyboardButton(
        text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="tarif_standard"
    )
    extra_button = telebot.types.InlineKeyboardButton(
        text="–≠–∫—Å—Ç—Ä–∞", callback_data="tarif_extra"
    )
    markup.add(basic_button, standard_button, extra_button)
    return markup


async def can_send_message(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    now = datetime.now()
    if not (dtime(8, 0) <= now.time() <= dtime(20, 0)):
        return False

    last_sent = last_check_time.get(user_id)
    if last_sent and now - last_sent < timedelta(minutes=1):
        return False

    count = daily_message_count.get(user_id, 0)
    if count >= 20:
        return False
    return True


@bot.callback_query_handler(func=lambda call: True)
async def callback_query(call):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {call.data}")
    if call.data == "tarif_basic":
        message_basic = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n"
            "üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 1 –∫—É–ª—å—Ç—É—Ä—É\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 1 —Ä–µ–≥—ñ–æ–Ω—É\n"
            "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
            "üí∞780 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:\n"
            "üí≥ –ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫\n"
            "5457 0822 5614 6379\n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º: @AgroHelper_supp"
        )
        await bot.send_message(call.message.chat.id, message_basic)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_basic}")
    elif call.data == "tarif_standard":
        message_standard = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n"
            "üåΩ–°–¢–ê–ù–î–ê–†–¢ (–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π)\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 5 –∫—É–ª—å—Ç—É—Ä\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 3 —Ä–µ–≥—ñ–æ–Ω—É\n"
            "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
            "üí∞1985 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:\n"
            "üí≥ –ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫\n"
            "5457 0822 5614 6379\n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º: @AgroHelper_supp"
        )
        await bot.send_message(call.message.chat.id, message_standard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_standard}")
    elif call.data == "tarif_extra":
        message_extra = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n"
            "üå±–ï–ö–°–¢–†–ê\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ª—å—Ç—É—Ä\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤\n"
            "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
            "üí∞3890 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:\n"
            "üí≥ –ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫\n"
            "5457 0822 5614 6379\n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º: @AgroHelper_supp"
        )
        await bot.send_message(call.message.chat.id, message_extra)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_extra}")


async def run_scheduler():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)


async def main():
    schedule.every(30).seconds.do(
        lambda: asyncio.create_task(send_messages_to_traders())
    )
    # asyncio.create_task(check_and_send_trial_end_messages())
    # await bot.infinity_polling()


if __name__ == "__main__":
    asyncio.run(main())
