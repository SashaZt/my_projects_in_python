services:
  # PostgreSQL сервис
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-crm_bts_middleware}-postgres
    restart: unless-stopped
    environment:
      # Основные параметры PostgreSQL
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
      # Параметры настройки производительности
      PG_MAX_CONNECTIONS: ${PG_MAX_CONNECTIONS}
      PG_SHARED_BUFFERS: ${PG_SHARED_BUFFERS}
      PG_EFFECTIVE_CACHE_SIZE: ${PG_EFFECTIVE_CACHE_SIZE}
      PG_MAINTENANCE_WORK_MEM: ${PG_MAINTENANCE_WORK_MEM}
      PG_CHECKPOINT_COMPLETION_TARGET: ${PG_CHECKPOINT_COMPLETION_TARGET}
      PG_WAL_BUFFERS: ${PG_WAL_BUFFERS}
      PG_DEFAULT_STATISTICS_TARGET: ${PG_DEFAULT_STATISTICS_TARGET}
      PG_RANDOM_PAGE_COST: ${PG_RANDOM_PAGE_COST}
      PG_EFFECTIVE_IO_CONCURRENCY: ${PG_EFFECTIVE_IO_CONCURRENCY}
      PG_WORK_MEM: ${PG_WORK_MEM}
      PG_MIN_WAL_SIZE: ${PG_MIN_WAL_SIZE}
      PG_MAX_WAL_SIZE: ${PG_MAX_WAL_SIZE}
    volumes:
      # Монтирование директории данных
      - ${POSTGRES_DATA_DIR:-./pgdata}:${PGDATA:-/var/lib/postgresql/data/pgdata}
    networks:
      - app_network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB:-crm_bts}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # TikTok Parser Client сервис
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-tiktok_monitoring}-client
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TIMEZONE:-UTC}
    volumes:
      - ./client:/client
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "python", "-c", "import os; exit(0 if os.path.exists('/client/logs/parser.log') else 1)" ]
      interval: 30s
      timeout: 10s
      retries: 3
  # API сервис для дашборда
  # api:
  #   build:
  #     context: ./api
  #     dockerfile: Dockerfile
  #   container_name: ${PROJECT_NAME:-tiktok_monitoring}-api
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     TZ: ${TIMEZONE:-UTC}
  #     # Другие параметры API
  #     API_PORT: ${API_PORT:-8000}
  #     API_HOST: ${API_HOST:-0.0.0.0}
  #   ports:
  #     - "${API_PORT:-8000}:8000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - app_network
  #   volumes:
  #     - ./api/logs:/api/logs

networks:
  app_network:
    driver: bridge
