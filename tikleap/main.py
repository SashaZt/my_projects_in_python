import asyncio
import datetime
import json
import sqlite3
import sys
import time
from pathlib import Path

import gspread
import nodriver as uc
import schedule
from bs4 import BeautifulSoup
from google.oauth2.service_account import Credentials
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_directory = Path.cwd()
config_directory = current_directory / "config"
html_directory = current_directory / "html"
data_directory = current_directory / "data"
log_directory = current_directory / "log"

data_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)
html_directory.mkdir(parents=True, exist_ok=True)
output_json_file = data_directory / "output.json"
config_file = config_directory / "config.json"
service_account_file = config_directory / "credentials.json"
log_file_path = log_directory / "log_message.log"
output_xlsx_file = data_directory / "output.xlsx"
db_path = data_directory / "tikleap_users.db"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)


# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def get_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    with open(config_file, "r", encoding="utf-8") as file:
        data = json.load(file)
    return data


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = get_config()
SPREADSHEET = config["google"]["spreadsheet"]
SHEET = config["google"]["sheet"]


def get_google_sheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç."""
    try:
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å google-auth
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]

        credentials = Credentials.from_service_account_file(
            service_account_file, scopes=scopes
        )

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ gspread —Å –Ω–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        client = gspread.authorize(credentials)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–ª—é—á—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏—Å—Ç
        spreadsheet = client.open_by_key(SPREADSHEET)
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Spreadsheet.")
        return spreadsheet.worksheet(SHEET)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
        raise FileNotFoundError("–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API Google Sheets: {e}")
        raise
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        raise


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ Google Sheets
sheet = get_google_sheet()


def ensure_row_limit(sheet, required_rows=10000):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ Google Sheets, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    current_rows = len(sheet.get_all_values())
    if current_rows < required_rows:
        sheet.add_rows(required_rows - current_rows)


ensure_row_limit(sheet, 1000)


async def process_country(browser, country_code):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã: {country_code}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã
        target_page = await browser.get(
            f"https://www.tikleap.com/country/{country_code}"
        )
        await asyncio.sleep(2)
        await target_page  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–µ—Ä–µ—à–ª–∏
        logger.info(f"–¢–µ–∫—É—â–∏–π URL: {target_page.url}")

        if f"country/{country_code}" in target_page.url:
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã {country_code}")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É View More
            max_attempts = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–∂–∞—Ç–∏—è
            attempts_without_button = 0

            for attempt in range(max_attempts):
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑
                logger.info(
                    f"–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts})..."
                )
                await target_page.scroll_down(500)  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞ 500 –ø–∏–∫—Å–µ–ª–µ–π
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É View More
                view_more_button = await target_page.select(".ranklist-table-more")

                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –Ω–µ–µ
                if view_more_button:
                    logger.info("–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'View More'. –ù–∞–∂–∏–º–∞–µ–º...")
                    try:
                        await view_more_button.click()
                        logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'View More'")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ 'View More': {e}")
                        try:
                            await view_more_button.mouse_click()
                            logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ 'View More' —á–µ—Ä–µ–∑ mouse_click()")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —á–µ—Ä–µ–∑ mouse_click(): {e}")

                    await asyncio.sleep(1)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    attempts_without_button = 0
                else:
                    attempts_without_button += 1
                    logger.warning(
                        f"–ö–Ω–æ–ø–∫–∞ 'View More' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempts_without_button}/3)"
                    )

                    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    if attempts_without_button >= 3:
                        logger.info(
                            "–ö–Ω–æ–ø–∫–∞ 'View More' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                        )
                        break

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            file_path = html_directory / f"country_{country_code}.html"
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ {file_path}")

            # –ü–æ–ª—É—á–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            html_content = await target_page.get_content()

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–µ–≥–æ HTML
            with open(file_path, "w", encoding="utf-8") as file:
                file.write(html_content)

            logger.success(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã {country_code}")
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã {country_code}: {str(e)}")
        return False


async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏–∑ JSON-—Ñ–∞–π–ª–∞
    try:

        country_list = config.get("country", [])

        if not country_list:
            logger.error("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ country.json")
            return

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(country_list)} —Å—Ç—Ä–∞–Ω: {', '.join(country_list)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω: {str(e)}")
        return

    browser = None
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        browser = await uc.start(headless=False)

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...")
        login_page = await browser.get("https://www.tikleap.com/login")
        await asyncio.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Cloudflare
        content = await login_page.get_content()
        if (
            "Please enable cookies" in content
            or "Sorry, you have been blocked" in content
        ):
            logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Cloudflare. –û–±–Ω–æ–≤–ª—è–µ–º...")
            await login_page.reload()
            await asyncio.sleep(2)

        # –í–≤–æ–¥–∏–º email
        logger.info("–í–≤–æ–¥–∏–º email...")
        email_field = await login_page.select("input#email")
        if email_field:
            await email_field.send_keys("37200@starlivemail.com")
            await asyncio.sleep(0.5)
        else:
            logger.error("–ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        logger.info("–í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...")
        password_field = await login_page.select("input#password")
        if password_field:
            await password_field.send_keys("bfnsa232@1!dsA")
            await asyncio.sleep(0.5)
        else:
            logger.error("–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞
        logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞...")
        login_button = await login_page.select(".form-action button")

        if not login_button:
            login_button = await login_page.find("Log In", best_match=True)
            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏")

        if not login_button:
            login_button = await login_page.select("form button")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ñ–æ—Ä–º–µ")

        if login_button:
            logger.info("–ö–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–∏–º–∞–µ–º...")
            await asyncio.sleep(1)

            try:
                await login_button.click()
                logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ .click()")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ click(): {e}")
                try:
                    await login_button.mouse_click()
                    logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ .mouse_click()")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ mouse_click(): {e}")

            logger.info("–ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–∞...")
            await asyncio.sleep(5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Ö–æ–¥
            await login_page
            await login_page.reload()

            current_url = login_page.url
            logger.info(f"–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {current_url}")

            if "login" in current_url:
                logger.warning("–í—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞. –í—Ö–æ–¥ –º–æ–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
                error_message = await login_page.select(".form-error")
                if error_message:
                    error_text = await error_message.get_property("textContent")
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_text}")

                # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é
                logger.info("–î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (30 —Å–µ–∫—É–Ω–¥)...")
                await asyncio.sleep(30)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞
            successful_countries = 0
            for country in country_list:
                success = await process_country(browser, country)
                if success:
                    successful_countries += 1
                # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏
                await asyncio.sleep(2)

            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_countries} –∏–∑ {len(country_list)} —Å—Ç—Ä–∞–Ω."
            )

        else:
            logger.error("–ö–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if browser:
            try:
                await browser.stop()
                logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è HTML-—Ñ–∞–π–ª–æ–≤
def process_all_html_files():
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö HTML-—Ñ–∞–π–ª–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HTML-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        html_files = list(html_directory.glob("country_*.html"))

        if not html_files:
            logger.warning("HTML-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ html/")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
        all_users_data = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        processed_files = 0
        for file_path in html_files:
            country_code = file_path.stem.replace("country_", "")
            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_path.name} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}..."
            )

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML-—Ñ–∞–π–ª–∞
            users_data = parse_html_file(file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if users_data:
                save_user_data(users_data, country_code)
                all_users_data.extend(users_data)
                processed_files += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Ñ–∞–π–ª
        with open(output_json_file, "w", encoding="utf-8") as f:
            json.dump(all_users_data, f, ensure_ascii=False, indent=4)
        logger.success(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±—â–∏–π —Ñ–∞–π–ª: {output_json_file}")

        logger.success(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_files} –∏–∑ {len(html_files)} —Ñ–∞–π–ª–æ–≤."
        )

        save_users_to_sqlite(all_users_data, db_path)

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        export_unloaded_users_to_google_sheets()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML-—Ñ–∞–π–ª–æ–≤: {str(e)}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")


def save_user_data(users_data, country_code):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ JSON —Ñ–∞–π–ª
    """
    try:
        file_path = data_directory / f"users_{country_code}.json"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ
        existing_data = []
        if file_path.exists():
            with open(file_path, "r", encoding="utf-8") as f:
                try:
                    existing_data = json.load(f)
                except json.JSONDecodeError:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {file_path}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª."
                    )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        combined_data = existing_data + users_data

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(combined_data, f, ensure_ascii=False, indent=4)

        logger.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def parse_html_file(file_path):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML-—Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, country_kz.html -> kz)
        country_code = Path(file_path).stem.replace("country_", "")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        current_datetime = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º HTML-—Ñ–∞–π–ª
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        # –ü–∞—Ä—Å–∏–º HTML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
        soup = BeautifulSoup(content, "lxml")

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        table_rows = soup.select(".ranklist-table-row")

        users_data = []

        for row in table_rows:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                profile_link = row.get("href", "")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–∞
                if not profile_link:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å")
                    continue

                # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                rank_element = row.select_one(".ranklist-place-wrapper span")
                if not rank_element:
                    logger.warning(
                        f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è {profile_link} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–Ω–≥–∞"
                    )
                    continue
                rank = rank_element.text.strip()

                # –ù–∞—Ö–æ–¥–∏–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                earning_element = row.select_one(".ranklist-earning-wrapper span.price")
                if not earning_element:
                    logger.warning(
                        f"–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è {profile_link} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞"
                    )
                    continue
                earning = earning_element.text.strip()

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = {
                    "current_datetime": current_datetime,
                    "country_code": country_code,
                    "profile_link": profile_link,
                    "rank": rank,
                    "earning": earning,
                }

                users_data.append(user_data)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

        logger.success(
            f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª {file_path}. –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

        return users_data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []


def save_users_to_sqlite(users_data, db_path=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    Args:
        users_data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db_path (str or Path, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        if not users_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if db_path is None:
            db_path = data_directory / "tikleap_users.db"

        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute(
            """
        CREATE TABLE IF NOT EXISTS tikleap_users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            current_datetime TEXT,
            country_code TEXT,
            profile_link TEXT UNIQUE,
            rank INTEGER,
            earning TEXT,
            loading_table BOOLEAN DEFAULT 0
        )
        """
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        added_count = 0
        updated_count = 0

        for user in users_data:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if not user.get("profile_link"):
                    logger.warning("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç profile_link")
                    continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rank –≤ int —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    rank = int(user.get("rank", 0))
                except (ValueError, TypeError):
                    logger.warning(
                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç rank –¥–ª—è {user.get('profile_link')}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0"
                    )
                    rank = 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute(
                    "SELECT * FROM tikleap_users WHERE profile_link = ?",
                    (user["profile_link"],),
                )
                existing_user = cursor.fetchone()

                if existing_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    cursor.execute(
                        """
                    UPDATE tikleap_users SET 
                        current_datetime = ?,
                        country_code = ?,
                        rank = ?,
                        earning = ?
                    WHERE profile_link = ?
                    """,
                        (
                            user["current_datetime"],
                            user["country_code"],
                            rank,
                            user["earning"],
                            user["profile_link"],
                        ),
                    )
                    updated_count += 1
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute(
                        """
                    INSERT INTO tikleap_users 
                    (current_datetime, country_code, profile_link, rank, earning, loading_table) 
                    VALUES (?, ?, ?, ?, ?, 0)
                    """,
                        (
                            user["current_datetime"],
                            user["country_code"],
                            user["profile_link"],
                            rank,
                            user["earning"],
                        ),
                    )
                    added_count += 1
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('profile_link', 'Unknown')}: {e}"
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.success(
            f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π"
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ
        cursor.execute("SELECT COUNT(*) FROM tikleap_users")
        total_count = cursor.fetchone()[0]
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {total_count}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–≥—Ä—É–∑–∫–µ
        cursor.execute("SELECT COUNT(*) FROM tikleap_users WHERE loading_table = 0")
        unloaded_count = cursor.fetchone()[0]
        logger.info(f"–û–∂–∏–¥–∞—é—Ç –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets: {unloaded_count} –∑–∞–ø–∏—Å–µ–π")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        conn.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")


def export_unloaded_users_to_google_sheets():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö loading_table = False, –≤ Google Sheets
    """
    try:
        logger.info("–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...")
        if not db_path.exists():
            logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}")
            return

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å loading_table = False
        cursor.execute(
            """
        SELECT current_datetime, country_code, profile_link, rank, earning
        FROM tikleap_users
        WHERE loading_table = 0
        ORDER BY country_code, rank
        """
        )

        unloaded_users = cursor.fetchall()

        if not unloaded_users:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets")
            conn.close()
            return

        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {len(unloaded_users)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç Google Sheets
        sheet = get_google_sheet()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = sheet.row_values(1)
        expected_headers = [
            "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            "–ò—Å—Ç–æ—á–Ω–∏–∫",
            "–°—Å—ã–ª–∫–∞",
            "–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ",
            "–ó–∞—Ä–∞–±–æ—Ç–æ–∫",
        ]

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if not headers or headers != expected_headers:
            sheet.clear()  # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            sheet.update(values=[expected_headers], range_name="A1:E1")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Google Sheets")

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        existing_data = sheet.get_all_values()
        next_row = len(existing_data) + 1

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        rows_to_insert = []
        updated_user_ids = []

        for user in unloaded_users:
            rows_to_insert.append(list(user))

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è loading_table
            cursor.execute(
                """
            SELECT id FROM tikleap_users 
            WHERE profile_link = ?
            """,
                (user[2],),
            )

            user_id = cursor.fetchone()
            if user_id:
                updated_user_ids.append(user_id[0])

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        if rows_to_insert:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ (A{next_row}:E{next_row+len(rows_to_insert)-1})
            range_to_update = f"A{next_row}:E{next_row+len(rows_to_insert)-1}"

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ values, –ø–æ—Ç–æ–º range_name
            sheet.update(values=rows_to_insert, range_name=range_to_update)

            logger.success(
                f"–£—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω–æ {len(rows_to_insert)} –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ loading_table –¥–ª—è –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for user_id in updated_user_ids:
                cursor.execute(
                    """
                UPDATE tikleap_users
                SET loading_table = 1
                WHERE id = ?
                """,
                    (user_id,),
                )

            conn.commit()
            logger.info(
                f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å loading_table –¥–ª—è {len(updated_user_ids)} –∑–∞–ø–∏—Å–µ–π"
            )

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        conn.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        try:
            if "conn" in locals() and conn:
                conn.close()
        except:
            pass


if __name__ == "__main__":

    def job():
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...")
        try:
            uc.loop().run_until_complete(main())
            process_all_html_files()
            export_unloaded_users_to_google_sheets()
            logger.success("–ü–ª–∞–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    job()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    schedule.every(5).minutes.do(job)

    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    while True:
        schedule.run_pending()
        time.sleep(1)
