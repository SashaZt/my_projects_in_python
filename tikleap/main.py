import asyncio
import datetime
import json
import os
import sys
from pathlib import Path

import nodriver as uc
from bs4 import BeautifulSoup
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
current_directory = Path.cwd()
html_directory = current_directory / "html"
data_directory = current_directory / "data"
log_directory = current_directory / "log"

data_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)
html_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"
output_xlsx_file = data_directory / "output.xlsx"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)


# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


async def process_country(browser, country_code):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã: {country_code}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã
        target_page = await browser.get(
            f"https://www.tikleap.com/country/{country_code}"
        )
        await asyncio.sleep(2)
        await target_page  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–µ—Ä–µ—à–ª–∏
        logger.info(f"–¢–µ–∫—É—â–∏–π URL: {target_page.url}")

        if f"country/{country_code}" in target_page.url:
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã {country_code}")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É View More
            max_attempts = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–∂–∞—Ç–∏—è
            attempts_without_button = 0

            for attempt in range(max_attempts):
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑
                logger.info(
                    f"–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts})..."
                )
                await target_page.scroll_down(500)  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞ 500 –ø–∏–∫—Å–µ–ª–µ–π
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É View More
                view_more_button = await target_page.select(".ranklist-table-more")

                # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –Ω–µ–µ
                if view_more_button:
                    logger.info("–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'View More'. –ù–∞–∂–∏–º–∞–µ–º...")
                    try:
                        await view_more_button.click()
                        logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'View More'")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ 'View More': {e}")
                        try:
                            await view_more_button.mouse_click()
                            logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ 'View More' —á–µ—Ä–µ–∑ mouse_click()")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —á–µ—Ä–µ–∑ mouse_click(): {e}")

                    await asyncio.sleep(1)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    attempts_without_button = 0
                else:
                    attempts_without_button += 1
                    logger.warning(
                        f"–ö–Ω–æ–ø–∫–∞ 'View More' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempts_without_button}/3)"
                    )

                    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    if attempts_without_button >= 3:
                        logger.info(
                            "–ö–Ω–æ–ø–∫–∞ 'View More' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                        )
                        break

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            file_path = html_directory / f"country_{country_code}.html"
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ {file_path}")

            # –ü–æ–ª—É—á–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            html_content = await target_page.get_content()

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–µ–≥–æ HTML
            with open(file_path, "w", encoding="utf-8") as file:
                file.write(html_content)

            logger.success(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã {country_code}")
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω—ã {country_code}: {str(e)}")
        return False


async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏–∑ JSON-—Ñ–∞–π–ª–∞
    try:
        with open("country.json", "r", encoding="utf-8") as f:
            country_data = json.load(f)
            country_list = country_data.get("country", [])

        if not country_list:
            logger.error("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ country.json")
            return

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(country_list)} —Å—Ç—Ä–∞–Ω: {', '.join(country_list)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω: {str(e)}")
        return

    browser = None
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        browser = await uc.start(headless=False)

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...")
        login_page = await browser.get("https://www.tikleap.com/login")
        await asyncio.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Cloudflare
        content = await login_page.get_content()
        if (
            "Please enable cookies" in content
            or "Sorry, you have been blocked" in content
        ):
            logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Cloudflare. –û–±–Ω–æ–≤–ª—è–µ–º...")
            await login_page.reload()
            await asyncio.sleep(2)

        # –í–≤–æ–¥–∏–º email
        logger.info("–í–≤–æ–¥–∏–º email...")
        email_field = await login_page.select("input#email")
        if email_field:
            await email_field.send_keys("37200@starlivemail.com")
            await asyncio.sleep(0.5)
        else:
            logger.error("–ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
        logger.info("–í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...")
        password_field = await login_page.select("input#password")
        if password_field:
            await password_field.send_keys("bfnsa232@1!dsA")
            await asyncio.sleep(0.5)
        else:
            logger.error("–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞
        logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω–∞...")
        login_button = await login_page.select(".form-action button")

        if not login_button:
            login_button = await login_page.find("Log In", best_match=True)
            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏")

        if not login_button:
            login_button = await login_page.select("form button")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ñ–æ—Ä–º–µ")

        if login_button:
            logger.info("–ö–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–∏–º–∞–µ–º...")
            await asyncio.sleep(1)

            try:
                await login_button.click()
                logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ .click()")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ click(): {e}")
                try:
                    await login_button.mouse_click()
                    logger.info("–ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ .mouse_click()")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ mouse_click(): {e}")

            logger.info("–ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–∞...")
            await asyncio.sleep(5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Ö–æ–¥
            await login_page
            await login_page.reload()

            current_url = login_page.url
            logger.info(f"–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {current_url}")

            if "login" in current_url:
                logger.warning("–í—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞. –í—Ö–æ–¥ –º–æ–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
                error_message = await login_page.select(".form-error")
                if error_message:
                    error_text = await error_message.get_property("textContent")
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_text}")

                # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é
                logger.info("–î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (30 —Å–µ–∫—É–Ω–¥)...")
                await asyncio.sleep(30)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞
            successful_countries = 0
            for country in country_list:
                success = await process_country(browser, country)
                if success:
                    successful_countries += 1
                # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏
                await asyncio.sleep(2)

            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_countries} –∏–∑ {len(country_list)} —Å—Ç—Ä–∞–Ω."
            )

        else:
            logger.error("–ö–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if browser:
            try:
                await browser.stop()
                logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è HTML-—Ñ–∞–π–ª–æ–≤
def process_all_html_files():
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö HTML-—Ñ–∞–π–ª–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HTML-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        html_files = list(html_directory.glob("country_*.html"))

        if not html_files:
            logger.warning("HTML-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ html/")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(html_files)} HTML-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
        all_users_data = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        processed_files = 0
        for file_path in html_files:
            country_code = file_path.stem.replace("country_", "")
            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_path.name} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}..."
            )

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML-—Ñ–∞–π–ª–∞
            users_data = parse_html_file(file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if users_data:
                save_user_data(users_data, country_code)
                all_users_data.extend(users_data)
                processed_files += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Ñ–∞–π–ª
        output_json_file = data_directory / "output.json"
        with open(output_json_file, "w", encoding="utf-8") as f:
            json.dump(all_users_data, f, ensure_ascii=False, indent=4)
        logger.success(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±—â–∏–π —Ñ–∞–π–ª: {output_json_file}")

        logger.success(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_files} –∏–∑ {len(html_files)} —Ñ–∞–π–ª–æ–≤."
        )
        save_users_to_excel(all_users_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML-—Ñ–∞–π–ª–æ–≤: {str(e)}")


def save_user_data(users_data, country_code):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ JSON —Ñ–∞–π–ª
    """
    try:
        file_path = data_directory / f"users_{country_code}.json"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ
        existing_data = []
        if file_path.exists():
            with open(file_path, "r", encoding="utf-8") as f:
                try:
                    existing_data = json.load(f)
                except json.JSONDecodeError:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {file_path}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª."
                    )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        combined_data = existing_data + users_data

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(combined_data, f, ensure_ascii=False, indent=4)

        logger.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def parse_html_file(file_path):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML-—Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, country_kz.html -> kz)
        country_code = Path(file_path).stem.replace("country_", "")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        current_datetime = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º HTML-—Ñ–∞–π–ª
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        # –ü–∞—Ä—Å–∏–º HTML —Å –ø–æ–º–æ—â—å—é BeautifulSoup
        soup = BeautifulSoup(content, "lxml")

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        table_rows = soup.select(".ranklist-table-row")

        users_data = []

        for row in table_rows:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                profile_link = row.get("href", "")

                # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
                rank = row.select_one(".ranklist-place-wrapper span").text.strip()

                # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = row.select_one(".ranklist-username").text.strip()

                # –ù–∞—Ö–æ–¥–∏–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
                earning = row.select_one(
                    ".ranklist-earning-wrapper span.price"
                ).text.strip()

                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤
                diamonds = row.select_one(
                    ".ranklist-diamonds-wrapper span"
                ).text.strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Å—Ç—Ä–∏–º —Å–µ–π—á–∞—Å
                is_live = bool(row.select_one(".ranklist-live-badge"))

                # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                avatar_img = row.select_one(".avatar-wrapper img")
                avatar_url = avatar_img.get("src", "") if avatar_img else ""

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = {
                    "–¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è": current_datetime,
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": country_code,
                    "—Å—Å—ã–ª–∫–∞": profile_link,
                    "–º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è": rank,
                    # "username": username,
                    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è": earning,
                    # "diamonds": diamonds,
                    # "is_live": is_live,
                    # "avatar_url": avatar_url,
                }

                users_data.append(user_data)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

        logger.success(
            f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª {file_path}. –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

        return users_data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []


def save_users_to_excel(users_data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ Excel —Ñ–∞–π–ª

    Args:
        users_data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        output_file (str or Path, optional): –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É Excel.
                    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª users_data.xlsx –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data)
    """
    try:
        import pandas as pd
        from openpyxl import Workbook
        from openpyxl.styles import Alignment, Font, PatternFill
        from openpyxl.utils import get_column_letter

        if not users_data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel")
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        df = pd.DataFrame(users_data)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "Users Data"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = list(users_data[0].keys())
        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col_num)
            cell.value = header
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal="center")
            cell.fill = PatternFill(
                start_color="DDDDDD", end_color="DDDDDD", fill_type="solid"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for row_num, user in enumerate(users_data, 2):
            for col_num, field in enumerate(headers, 1):
                cell = ws.cell(row=row_num, column=col_num)
                cell.value = user.get(field, "")
                cell.alignment = Alignment(horizontal="left")

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for col_num, header in enumerate(headers, 1):
            column_letter = get_column_letter(col_num)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            ws.column_dimensions[column_letter].width = max(12, len(header) + 2)

            # –ï—Å–ª–∏ —ç—Ç–æ URL —Å—Ç–æ–ª–±–µ—Ü, –¥–µ–ª–∞–µ–º –µ–≥–æ —à–∏—Ä–µ
            if "link" in header or "url" in header:
                ws.column_dimensions[column_letter].width = 40

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É
        wb.save(output_xlsx_file)
        logger.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel-—Ñ–∞–π–ª: {output_xlsx_file}")

    except ImportError:
        logger.error(
            "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pandas –∏ openpyxl: pip install pandas openpyxl"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel: {e}")


if __name__ == "__main__":
    # uc.loop().run_until_complete(main())
    process_all_html_files()
