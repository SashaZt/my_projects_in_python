# residential
import json
import os
import re
import shutil
import sys
from collections import defaultdict
from pathlib import Path

import pdfplumber
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_directory = Path.cwd()
pdf_directory = current_directory / "pdf"
log_directory = current_directory / "log"
temp_directory = current_directory / "temp"
temp_directory.mkdir(parents=True, exist_ok=True)
pdf_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def extract_table_data(table, table_name="", table_type=""):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–ª–æ–≤–∞—Ä—å —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É

    table_type:
    - "header" - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - "key_value_row" - —Ç–∞–±–ª–∏—Ü–∞, –≥–¥–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ
    - "address" - –¥–ª—è –∞–¥—Ä–µ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - "property_details" - –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    - "value_data" - –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏
    """
    result = {}

    if not table or len(table) == 0:
        logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
        return result

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É —Ç–∞–±–ª–∏—Ü—ã
    if table_type == "header":
        # –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (lines_01)
        if len(table) > 0 and len(table[0]) >= 2:
            result["document_type"] = table[0][1] if table[0][1] else ""

    elif table_type == "key_value_row":
        # –î–ª—è —Ç–∞–±–ª–∏—Ü —Å –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ (lines_02, lines_03, lines_04)
        if len(table) > 0 and len(table[0]) >= 2:
            key = table[0][0].replace(":", "").strip() if table[0][0] else ""
            value = table[0][1].strip() if table[0][1] else ""
            if key:
                result[key] = value

    elif table_type == "address":
        # –î–ª—è –∞–¥—Ä–µ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (lines_05) - —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ Owner1, Owner2, –∏ —Ç.–¥.
        for i, row in enumerate(table, 1):
            if row and row[0]:
                owner_key = f"Owner{i}"
                result[owner_key] = row[0].strip()
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º None
                owner_key = f"Owner{i}"
                result[owner_key] = None

    elif table_type == "property_details":
        # –î–ª—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (lines_06)
        for row in table:
            if len(row) >= 2 and row[0]:
                key = row[0].strip()
                value = row[1].strip() if len(row) > 1 and row[1] else ""
                result[key] = value

    elif table_type == "single_key_value":
        # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ (lines_07)
        if len(table) > 0 and len(table[0]) >= 2:
            key = table[0][0].replace(":", "").strip() if table[0][0] else ""
            value = table[0][1].strip() if len(table[0]) > 1 and table[0][1] else ""
            if key:
                result[key] = value

    elif table_type == "value_data":
        # –î–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏ (lines_08)
        for row in table:
            if len(row) >= 2:
                key = row[0].strip() if row[0] else ""
                value = row[1].strip() if len(row) > 1 and row[1] else ""
                if key:
                    result[key] = value

    elif table_type == "transfer_data":
        # –î–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–∞–≤ (lines_09, lines_10, lines_11, lines_12)
        if len(table) >= 2:
            key = table[0][0].strip() if table[0][0] else ""
            value = table[1][0].strip() if len(table) > 1 and table[1][0] else ""
            if key:
                result[key] = value

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_data = []
        for row in table:
            cleaned_row = [
                str(cell).strip() if cell is not None else "" for cell in row
            ]
            raw_data.append(cleaned_row)
        result = raw_data

    return result


def analyze_pdf_with_multiple_tables(pdf_path, page_no=0, save_debug_images=True):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PDF —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """
    results = {"page_info": {"number": page_no + 1}, "data": {}}

    with pdfplumber.open(pdf_path) as pdf:
        if page_no >= len(pdf.pages):
            logger.error(
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_no} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–≤—Å–µ–≥–æ {len(pdf.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü)"
            )
            return results

        page = pdf.pages[page_no]
        results["page_info"]["width"] = page.width
        results["page_info"]["height"] = page.height

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        table_definitions = [
            {
                "name": "document_type",
                "horizontal_lines": [10, 25],
                "vertical_lines": [50, 60, 137],
                "type": "header",
            },
            {
                "name": "situs",
                "horizontal_lines": [30, 45],
                "vertical_lines": [15, 40, 180],
                "type": "key_value_row",
            },
            {
                "name": "class",
                "horizontal_lines": [30, 45],
                "vertical_lines": [380, 405, 535],
                "type": "key_value_row",
            },
            {
                "name": "card",
                "horizontal_lines": [30, 45],
                "vertical_lines": [550, 572, 610],
                "type": "key_value_row",
            },
            {
                "name": "owner_address",
                "horizontal_lines": [65, 77, 86, 96, 106, 130],
                "vertical_lines": [15, 205],
                "type": "address",
            },
            {
                "name": "property_details",
                "horizontal_lines": [65, 75, 84, 93, 103, 110, 118, 130],
                "vertical_lines": [210, 265, 360],
                "type": "property_details",
            },
            {
                "name": "total_acres",
                "horizontal_lines": [300, 310],
                "vertical_lines": [15, 59, 90],
                "type": "single_key_value",
            },
            {
                "name": "value_data",
                "horizontal_lines": [240, 252, 262, 275],
                "vertical_lines": [420, 470, 520],
                "type": "value_data",
            },
            {
                "name": "transfer_date",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [15, 80],
                "type": "transfer_data",
            },
            {
                "name": "transfer_price",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [120, 150],
                "type": "transfer_data",
            },
            {
                "name": "transfer_type",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [150, 200],
                "type": "transfer_data",
            },
            {
                "name": "transfer_validity",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [270, 410],
                "type": "transfer_data",
            },
        ]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        for table_def in table_definitions:
            table_name = table_def["name"]
            horizontal_lines = table_def["horizontal_lines"]
            vertical_lines = table_def["vertical_lines"]
            table_type = table_def.get("type", "")

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table_name} (—Ç–∏–ø: {table_type})")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            table_settings = {
                "vertical_strategy": "explicit",
                "explicit_vertical_lines": vertical_lines,
                "horizontal_strategy": "explicit",
                "explicit_horizontal_lines": horizontal_lines,
                "snap_tolerance": 3,
                "join_tolerance": 3,
                "edge_min_length": 10,
                "min_words_vertical": 1,
                "min_words_horizontal": 1,
            }

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            tables = page.extract_tables(table_settings)

            # –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if tables:
                for table_no, table in enumerate(tables):
                    print(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' #{table_no + 1}:")
                    for row in table:
                        print(row)
                    print("\n")

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                table_data = extract_table_data(tables[0], table_name, table_type)

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if table_type == "key_value_row" or table_type == "single_key_value":
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏-–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–æ—Ä–µ–Ω—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    results["data"].update(table_data)
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –∏–º–µ–Ω–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    results["data"][table_name] = table_data
            else:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if save_debug_images:
                image = page.to_image(resolution=150)
                image.debug_tablefinder(table_settings)
                filename = os.path.join(temp_directory, f"{table_name}.png")
                image.save(filename)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if save_debug_images:
            image = page.to_image(resolution=150)
            filename = os.path.join(temp_directory, f"page_{page_no + 1}_full.png")
            image.save(filename)

    return results


def post_process_data(data):
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    """
    processed = {}

    # –ö–æ–ø–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    processed["page_info"] = data.get("page_info", {})

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    property_data = {}

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    property_data["document_type"] = (
        data.get("data", {}).get("document_type", {}).get("document_type", "")
    )

    # –ê–¥—Ä–µ—Å –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    property_data["location"] = {
        "situs": data.get("data", {}).get("Situs", ""),
        "card": data.get("data", {}).get("Card", ""),
        "class": data.get("data", {}).get("Class", ""),
        "total_acres": data.get("data", {}).get("Total Acres", ""),
    }

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
    owner_address = data.get("data", {}).get("owner_address", {})
    property_data["owner"] = {
        "Owner1": owner_address.get("Owner1", ""),
        "Owner2": owner_address.get("Owner2", ""),
        "Owner3": owner_address.get("Owner3", ""),
        "Owner4": owner_address.get("Owner4", ""),
        "Owner5": owner_address.get("Owner5", ""),
    }

    # –î–µ—Ç–∞–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    property_details = data.get("data", {}).get("property_details", {})
    property_data["details"] = property_details

    # –î–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    value_data = data.get("data", {}).get("value_data", {})
    property_data["assessment"] = value_data

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–∞–≤
    property_data["transfer"] = {
        "date": data.get("data", {}).get("transfer_date", {}).get("Transfer Date", ""),
        "price": data.get("data", {}).get("transfer_price", {}).get("Price", ""),
        "type": data.get("data", {}).get("transfer_type", {}).get("Type", ""),
        "validity": data.get("data", {})
        .get("transfer_validity", {})
        .get("Validity", ""),
    }

    processed["property"] = property_data

    return processed


def save_table_data(data, output_path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü –≤ JSON-—Ñ–∞–π–ª
    """
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    return output_path


if __name__ == "__main__":
    pdf_file = "R001-017-002.pdf"
    pdf_path = pdf_directory / pdf_file

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    raw_data = analyze_pdf_with_multiple_tables(
        pdf_path, page_no=0, save_debug_images=True
    )

    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    processed_data = post_process_data(raw_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    raw_output_path = temp_directory / f"{pdf_file.replace('.pdf', '')}_raw_data.json"
    save_table_data(raw_data, raw_output_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    output_path = temp_directory / f"{pdf_file.replace('.pdf', '')}_processed.json"
    saved_path = save_table_data(processed_data, output_path)

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–ª—è {pdf_file}")
    print(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {raw_output_path}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {saved_path}")
