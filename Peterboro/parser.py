import json
import os
import re
import sys
from pathlib import Path

import pdfplumber
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_directory = Path.cwd()
pdf_directory = current_directory / "pdf"
log_directory = current_directory / "log"
temp_directory = current_directory / "temp"
temp_directory.mkdir(parents=True, exist_ok=True)
pdf_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def detect_document_type(pdf_path):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ PDF (RESIDENTIAL –∏–ª–∏ COMMERCIAL)

    Returns:
        str: —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ ('RESIDENTIAL', 'COMMERCIAL' –∏–ª–∏ 'UNKNOWN')
    """
    document_type = "UNKNOWN"

    with pdfplumber.open(pdf_path) as pdf:
        if len(pdf.pages) > 0:
            page = pdf.pages[0]

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            header_settings = {
                "vertical_strategy": "explicit",
                "explicit_vertical_lines": [50, 60, 137],
                "horizontal_strategy": "explicit",
                "explicit_horizontal_lines": [10, 25],
                "snap_tolerance": 3,
                "join_tolerance": 3,
                "edge_min_length": 10,
                "min_words_vertical": 1,
                "min_words_horizontal": 1,
            }

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header_tables = page.extract_tables(header_settings)

            if header_tables and len(header_tables) > 0 and len(header_tables[0]) > 0:
                header_row = header_tables[0][0]
                if len(header_row) >= 2 and header_row[1]:
                    document_type = header_row[1].strip()
                    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}")
                    return document_type

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            text = page.extract_text()
            if text:
                if "RESIDENTIAL" in text.upper():
                    document_type = "RESIDENTIAL"
                    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {document_type}")
                elif "COMMERCIAL" in text.upper():
                    document_type = "COMMERCIAL"
                    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {document_type}")

    logger.warning(
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {document_type}"
    )
    return document_type


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é extract_table_data, –¥–æ–±–∞–≤–∏–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è picture_info:


def extract_table_data(table, table_name="", table_type=""):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–ª–æ–≤–∞—Ä—å —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É

    table_type:
    - "header" - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - "key_value_row" - —Ç–∞–±–ª–∏—Ü–∞, –≥–¥–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ
    - "address" - –¥–ª—è –∞–¥—Ä–µ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - "property_details" - –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    - "value_data" - –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏
    - "tabular_data" - –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    result = {}

    if not table or len(table) == 0:
        logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
        return result

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è picture_info
    if table_name == "picture_info":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è "Type" –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
        if len(table) >= 2 and table[0][0] == "Type" and table[1][0]:
            result["Type"] = table[1][0]
            logger.info(f"picture_info –∏–∑–≤–ª–µ—á–µ–Ω: Type = {table[1][0]}")
            return result
        # –î—Ä—É–≥–æ–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - "Type", –≤—Ç–æ—Ä–∞—è - –∑–Ω–∞—á–µ–Ω–∏–µ
        elif (
            len(table) >= 1
            and len(table[0]) >= 2
            and table[0][0] == "Type"
            and table[0][1]
        ):
            result["Type"] = table[0][1]
            logger.info(f"picture_info –∏–∑–≤–ª–µ—á–µ–Ω (—Ñ–æ—Ä–º–∞—Ç 2): Type = {table[0][1]}")
            return result
        # –ï—â–µ –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–π –∏–ª–∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
        elif len(table) >= 1 and table[0][0] and "Type" not in table[0][0]:
            result["Type"] = table[0][0]
            logger.info(f"picture_info –∏–∑–≤–ª–µ—á–µ–Ω (—Ñ–æ—Ä–º–∞—Ç 3): Type = {table[0][0]}")
            return result
        elif len(table) >= 2 and table[1][0] and "Type" not in table[1][0]:
            result["Type"] = table[1][0]
            logger.info(f"picture_info –∏–∑–≤–ª–µ—á–µ–Ω (—Ñ–æ—Ä–º–∞—Ç 4): Type = {table[1][0]}")
            return result

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if table_type == "header":
        # –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (lines_01)
        if len(table) > 0 and len(table[0]) >= 2:
            result["document_type"] = table[0][1] if table[0][1] else ""

    elif table_type == "key_value_row":
        # –î–ª—è —Ç–∞–±–ª–∏—Ü —Å –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ (lines_02, lines_03, lines_04)
        if len(table) > 0 and len(table[0]) >= 2:
            key = table[0][0].replace(":", "").strip() if table[0][0] else ""
            value = table[0][1].strip() if table[0][1] else ""
            if key:
                result[key] = value

    elif table_type == "address":
        # –î–ª—è –∞–¥—Ä–µ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (lines_05) - —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ Owner1, Owner2, –∏ —Ç.–¥.
        for i, row in enumerate(table, 1):
            if row and row[0]:
                owner_key = f"Owner{i}"
                result[owner_key] = row[0].strip()
            else:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º None
                owner_key = f"Owner{i}"
                result[owner_key] = None

    elif table_type == "property_details":
        # –î–ª—è –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (lines_06)
        for row in table:
            if len(row) >= 2 and row[0]:
                key = row[0].strip()
                value = row[1].strip() if len(row) > 1 and row[1] else ""
                result[key] = value

    elif table_type == "single_key_value":
        # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ (lines_07)
        if len(table) > 0 and len(table[0]) >= 2:
            key = table[0][0].replace(":", "").strip() if table[0][0] else ""
            value = table[0][1].strip() if len(table[0]) > 1 and table[0][1] else ""
            if key:
                result[key] = value

    elif table_type == "value_data":
        # –î–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏ (lines_08)
        for row in table:
            if len(row) >= 2:
                key = row[0].strip() if row[0] else ""
                value = row[1].strip() if len(row) > 1 and row[1] else ""
                if key:
                    result[key] = value

    elif table_type == "transfer_data":
        # –î–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–∞–≤ (lines_09, lines_10, lines_11, lines_12)
        if len(table) >= 2:
            key = table[0][0].strip() if table[0][0] else ""
            value = table[1][0].strip() if len(table) > 1 and table[1][0] else ""
            if key:
                result[key] = value

    elif table_type == "tabular_data":
        # –î–ª—è —Ç–∞–±–ª–∏—Ü —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (lines_13-23)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
        for row in table:
            if len(row) >= 2 and row[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                key = row[0].strip()
                value = row[1].strip() if row[1] else ""
                result[key] = value
    # elif table_type == "tabular_data":
    #     # –î–ª—è —Ç–∞–±–ª–∏—Ü —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (lines_13-23)
    #     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
    #     for row in table:
    #         # –£—á–∏—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ] –∏ [–∫–ª—é—á]
    #         if row and len(row) > 0 and row[0]:
    #             key = row[0].strip()
    #             # –î–ª—è —Å—Ç—Ä–æ–∫ —Å –¥–≤—É–º—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ
    #             if len(row) >= 2:
    #                 value = row[1].strip() if row[1] else ""
    #             # –î–ª—è —Å—Ç—Ä–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º, –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ
    #             else:
    #                 value = ""
    #             result[key] = value

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_data = []
        for row in table:
            cleaned_row = [
                str(cell).strip() if cell is not None else "" for cell in row
            ]
            raw_data.append(cleaned_row)
        result = raw_data

    return result


def get_table_definitions_residential(page_no):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è RESIDENTIAL –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã RESIDENTIAL
    if page_no == 0:
        return [
            {
                "name": "document_type",
                "horizontal_lines": [10, 25],
                "vertical_lines": [50, 60, 137],
                "type": "header",
            },
            {
                "name": "situs",
                "horizontal_lines": [30, 45],
                "vertical_lines": [15, 40, 180],
                "type": "key_value_row",
            },
            {
                "name": "class",
                "horizontal_lines": [30, 45],
                "vertical_lines": [380, 405, 535],
                "type": "key_value_row",
            },
            {
                "name": "card",
                "horizontal_lines": [30, 45],
                "vertical_lines": [550, 572, 610],
                "type": "key_value_row",
            },
            {
                "name": "owner_address",
                "horizontal_lines": [65, 77, 86, 96, 106, 130],
                "vertical_lines": [15, 205],
                "type": "address",
            },
            {
                "name": "property_details",
                "horizontal_lines": [65, 75, 84, 93, 103, 110, 118, 130],
                "vertical_lines": [210, 265, 360],
                "type": "property_details",
            },
            {
                "name": "total_acres",
                "horizontal_lines": [300, 310],
                "vertical_lines": [15, 59, 90],
                "type": "single_key_value",
            },
            {
                "name": "value_data",
                "horizontal_lines": [240, 252, 262, 275],
                "vertical_lines": [420, 470, 520],
                "type": "value_data",
            },
            {
                "name": "transfer_date",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [15, 80],
                "type": "transfer_data",
            },
            {
                "name": "transfer_price",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [120, 150],
                "type": "transfer_data",
            },
            {
                "name": "transfer_type",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [150, 200],
                "type": "transfer_data",
            },
            {
                "name": "transfer_validity",
                "horizontal_lines": [437, 449, 458],
                "vertical_lines": [270, 410],
                "type": "transfer_data",
            },
        ]
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã RESIDENTIAL
    elif page_no == 1:
        return [
            {
                "name": "building_style",
                "horizontal_lines": [75, 85, 95, 105, 115],
                "vertical_lines": [30, 95, 140],
                "type": "tabular_data",
            },
            {
                "name": "exterior_features",
                "horizontal_lines": [75, 85, 95, 105, 115],
                "vertical_lines": [190, 260, 320],
                "type": "tabular_data",
            },
            {
                "name": "rooms",
                "horizontal_lines": [150, 160, 170, 180],
                "vertical_lines": [30, 95, 140],
                "type": "tabular_data",
            },
            {
                "name": "kitchen_info",
                "horizontal_lines": [150, 160, 170, 180],
                "vertical_lines": [190, 260, 320],
                "type": "tabular_data",
            },
            {
                "name": "bathroom_info",
                "horizontal_lines": [205, 215, 225, 235],
                "vertical_lines": [30, 95, 140],
                "type": "tabular_data",
            },
            {
                "name": "heat_info",
                "horizontal_lines": [205, 215, 225, 235],
                "vertical_lines": [190, 260, 320],
                "type": "tabular_data",
            },
            {
                "name": "physical_condition",
                "horizontal_lines": [252, 262, 270, 280, 290],
                "vertical_lines": [30, 95, 137],
                "type": "tabular_data",
            },
            {
                "name": "interior_features",
                "horizontal_lines": [252, 262, 270, 280],
                "vertical_lines": [190, 260, 320],
                "type": "tabular_data",
            },
            {
                "name": "construction_details",
                "horizontal_lines": [365, 373, 383],
                "vertical_lines": [30, 95, 137],
                "type": "tabular_data",
            },
            {
                "name": "value_history",
                "horizontal_lines": [510, 521, 530, 545],
                "vertical_lines": [15, 95, 165],
                "type": "tabular_data",
            },
            {
                "name": "picture_info",
                "horizontal_lines": [275, 287, 390],
                "vertical_lines": [365, 450],
                "type": "tabular_data",
            },
        ]
    else:
        return []


def get_table_definitions_commercial(page_no):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è COMMERCIAL –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã COMMERCIAL
    if page_no == 0:
        return [
            {
                "name": "document_type",
                "horizontal_lines": [10, 25],
                "vertical_lines": [50, 60, 137],
                "type": "header",
            },
            {
                "name": "situs",
                "horizontal_lines": [30, 45],
                "vertical_lines": [15, 40, 180],
                "type": "key_value_row",
            },
            {
                "name": "class",
                "horizontal_lines": [30, 45],
                "vertical_lines": [380, 405, 535],
                "type": "key_value_row",
            },
            {
                "name": "card",
                "horizontal_lines": [30, 45],
                "vertical_lines": [550, 572, 610],
                "type": "key_value_row",
            },
            {
                "name": "owner_address",
                "horizontal_lines": [65, 77, 86, 96, 106, 130],
                "vertical_lines": [15, 205],
                "type": "address",
            },
            {
                "name": "property_details",
                "horizontal_lines": [65, 75, 84, 93, 103, 110, 118, 130],
                "vertical_lines": [210, 265, 360],
                "type": "property_details",
            },
            {
                "name": "total_acres",
                "horizontal_lines": [305, 315],
                "vertical_lines": [15, 59, 90],
                "type": "single_key_value",
            },
            {
                "name": "value_data",
                "horizontal_lines": [247, 256, 267, 275],
                "vertical_lines": [420, 470, 520],
                "type": "value_data",
            },
            {
                "name": "transfer_date",
                "horizontal_lines": [445, 453, 464],
                "vertical_lines": [15, 80],
                "type": "transfer_data",
            },
            {
                "name": "transfer_price",
                "horizontal_lines": [445, 453, 464],
                "vertical_lines": [120, 150],
                "type": "transfer_data",
            },
            {
                "name": "transfer_type",
                "horizontal_lines": [445, 455, 465],
                "vertical_lines": [150, 200],
                "type": "transfer_data",
            },
            {
                "name": "transfer_validity",
                "horizontal_lines": [445, 455, 465],
                "vertical_lines": [270, 410],
                "type": "transfer_data",
            },
        ]
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã COMMERCIAL
    elif page_no == 1:
        return [
            {
                "name": "building_info",
                "horizontal_lines": [72, 82, 92, 101, 110, 120, 129, 138, 149],
                "vertical_lines": [14, 95, 170],
                "type": "tabular_data",
            },
            # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ]
    else:
        return []


def get_table_definitions(document_type, page_no):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    if document_type == "RESIDENTIAL":
        return get_table_definitions_residential(page_no)
    elif document_type == "COMMERCIAL":
        return get_table_definitions_commercial(page_no)
    else:
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è RESIDENTIAL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.warning(
            f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}, –∏—Å–ø–æ–ª—å–∑—É–µ–º RESIDENTIAL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )
        return get_table_definitions_residential(page_no)


def analyze_pdf_page(pdf_path, document_type, page_no=0, save_debug_images=True):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ç–∞–±–ª–∏—Ü
    """
    results = {
        "page_info": {"number": page_no + 1, "document_type": document_type},
        "data": {},
    }

    with pdfplumber.open(pdf_path) as pdf:
        if page_no >= len(pdf.pages):
            logger.error(
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_no} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–≤—Å–µ–≥–æ {len(pdf.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü)"
            )
            return results

        page = pdf.pages[page_no]
        results["page_info"]["width"] = page.width
        results["page_info"]["height"] = page.height

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        table_definitions = get_table_definitions(document_type, page_no)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        for table_def in table_definitions:
            table_name = table_def["name"]
            horizontal_lines = table_def["horizontal_lines"]
            vertical_lines = table_def["vertical_lines"]
            table_type = table_def.get("type", "")

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table_name} (—Ç–∏–ø: {table_type})")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            table_settings = {
                "vertical_strategy": "explicit",
                "explicit_vertical_lines": vertical_lines,
                "horizontal_strategy": "explicit",
                "explicit_horizontal_lines": horizontal_lines,
                "snap_tolerance": 5,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                "join_tolerance": 5,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                "edge_min_length": 10,
                "min_words_vertical": 1,
                "min_words_horizontal": 1,
            }

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            tables = page.extract_tables(table_settings)

            # –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if tables:
                for table_no, table in enumerate(tables):
                    logger.info(
                        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_no + 1}, –¢–∞–±–ª–∏—Ü–∞ '{table_name}' #{table_no + 1}:"
                    )
                    for row in table:
                        logger.info(row)

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                table_data = extract_table_data(tables[0], table_name, table_type)

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if table_type == "key_value_row" or table_type == "single_key_value":
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏-–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–æ—Ä–µ–Ω—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    results["data"].update(table_data)
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –∏–º–µ–Ω–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    results["data"][table_name] = table_data
            else:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return results


def analyze_pdf_with_multiple_pages(
    pdf_path, pages_to_process=[0, 1], save_debug_images=True
):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü PDF –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document_type = detect_document_type(pdf_path)

    combined_results = {
        "page_count": 0,
        "document_type": document_type,
        "pages_info": [],
        "data": {},
    }

    with pdfplumber.open(pdf_path) as pdf:
        combined_results["page_count"] = len(pdf.pages)

        for page_no in pages_to_process:
            if page_no >= len(pdf.pages):
                logger.error(
                    f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_no} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–≤—Å–µ–≥–æ {len(pdf.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü)"
                )
                continue

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_no + 1} —Ç–∏–ø–∞ {document_type}")
            page_results = analyze_pdf_page(
                pdf_path, document_type, page_no, save_debug_images
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            combined_results["pages_info"].append(page_results["page_info"])

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if page_no == 0:  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                combined_results["data"].update(page_results["data"])
            else:  # –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                # –î–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á page_2
                page_key = f"page_{page_no + 1}"
                combined_results["data"][page_key] = page_results["data"]

                # –ö–æ–ø–∏—Ä—É–µ–º picture_info —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2 –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
                if (
                    document_type == "RESIDENTIAL"
                    and "picture_info" in page_results["data"]
                ):
                    combined_results["data"]["picture_info"] = page_results["data"][
                        "picture_info"
                    ]
                    logger.info(
                        f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω picture_info –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {page_results['data']['picture_info']}"
                    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info(
        f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞ {pdf_path}: {combined_results}"
    )

    return combined_results


def save_json_data(data, output_path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
    """
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    return output_path


# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–∏–Ω PDF
if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1:
        pdf_file = sys.argv[1]
        pdf_path = (
            pdf_directory / pdf_file if not os.path.isabs(pdf_file) else Path(pdf_file)
        )

        if not pdf_path.exists():
            logger.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {pdf_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)

        logger.info(f"–ê–Ω–∞–ª–∏–∑ PDF: {pdf_path}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF
        raw_data = analyze_pdf_with_multiple_pages(pdf_path, pages_to_process=[0, 1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_path = temp_directory / f"{pdf_path.stem}_raw_data.json"
        save_json_data(raw_data, output_path)

        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    else:
        logger.warning("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python parser.py <–ø—É—Ç—å_–∫_pdf>")
