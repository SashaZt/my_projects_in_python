// ==UserScript==
// @name         Dealfront API Response Interceptor
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  Intercept POST requests to search-contacts API and save responses as JSON
// @author       You
// @match        https://app.dealfront.com/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    let interceptedResponses = [];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
    function downloadJSON(data, filename) {
        const blob = new Blob([JSON.stringify(data, null, 2)], {
            type: 'application/json'
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    function createDownloadButton() {
        const button = document.createElement('button');
        button.innerHTML = `üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (${interceptedResponses.length})`;
        button.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 10000;
            padding: 10px 15px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        `;

        button.addEventListener('click', () => {
            if (interceptedResponses.length === 0) {
                alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
                return;
            }

            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = `dealfront-contacts-${timestamp}.json`;
            downloadJSON(interceptedResponses, filename);
        });

        return button;
    }

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç XMLHttpRequest
    const originalXHR = window.XMLHttpRequest;
    window.XMLHttpRequest = function () {
        const xhr = new originalXHR();
        const originalOpen = xhr.open;
        const originalSend = xhr.send;

        let method, url;

        xhr.open = function (m, u) {
            method = m;
            url = u;
            return originalOpen.apply(this, arguments);
        };

        xhr.send = function () {
            if (method === 'POST' && url.includes('backend/search-contacts')) {
                console.log('üîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å:', url);

                const originalOnReadyStateChange = xhr.onreadystatechange;
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        try {
                            const responseData = JSON.parse(xhr.responseText);
                            const interceptData = {
                                timestamp: new Date().toISOString(),
                                url: url,
                                status: xhr.status,
                                response: responseData
                            };

                            interceptedResponses.push(interceptData);
                            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', interceptData);

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ
                            updateButtonCounter();

                        } catch (e) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
                        }
                    }

                    if (originalOnReadyStateChange) {
                        return originalOnReadyStateChange.apply(this, arguments);
                    }
                };
            }

            return originalSend.apply(this, arguments);
        };

        return xhr;
    };

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch API
    const originalFetch = window.fetch;
    window.fetch = function (resource, options = {}) {
        const url = typeof resource === 'string' ? resource : resource.url;
        const method = options.method || 'GET';

        if (method === 'POST' && url.includes('backend/search-contacts')) {
            console.log('üîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω fetch POST –∑–∞–ø—Ä–æ—Å:', url);

            return originalFetch.apply(this, arguments).then(response => {
                if (response.ok) {
                    const clonedResponse = response.clone();
                    clonedResponse.json().then(data => {
                        const interceptData = {
                            timestamp: new Date().toISOString(),
                            url: url,
                            status: response.status,
                            response: data
                        };

                        interceptedResponses.push(interceptData);
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (fetch):', interceptData);

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ
                        updateButtonCounter();

                    }).catch(e => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (fetch):', e);
                    });
                }
                return response;
            });
        }

        return originalFetch.apply(this, arguments);
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    let downloadButton;

    function updateButtonCounter() {
        if (downloadButton) {
            downloadButton.innerHTML = `üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (${interceptedResponses.length})`;
        }
    }

    function initButton() {
        downloadButton = createDownloadButton();
        document.body.appendChild(downloadButton);
    }

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initButton);
    } else {
        initButton();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    function createClearButton() {
        const button = document.createElement('button');
        button.innerHTML = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å';
        button.style.cssText = `
            position: fixed;
            top: 60px;
            right: 10px;
            z-index: 10000;
            padding: 8px 12px;
            background: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        `;

        button.addEventListener('click', () => {
            if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?')) {
                interceptedResponses = [];
                updateButtonCounter();
                console.log('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
            }
        });

        return button;
    }

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    let isAutoRunning = false;
    let autoInterval;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    function findPaginationButtons() {
        // –ò—â–µ–º –ø–æ XPath
        const xpath = "//a[@class='eb-pagination-button']";
        const result = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);

        const buttons = [];
        for (let i = 0; i < result.snapshotLength; i++) {
            buttons.push(result.snapshotItem(i));
        }

        return buttons;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    function clickLastPaginationButton() {
        const buttons = findPaginationButtons();
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', buttons.length);

        if (buttons.length > 0) {
            const lastButton = buttons[buttons.length - 1];
            console.log('‚û°Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–µ:', lastButton.textContent);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
            if (lastButton.classList.contains('disabled') || lastButton.getAttribute('disabled')) {
                console.log('‚èπÔ∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é');
                stopAutoRun();
                return false;
            }

            lastButton.click();
            return true;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return false;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    function startAutoRun() {
        if (isAutoRunning) return;

        isAutoRunning = true;
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏');

        autoInterval = setInterval(() => {
            console.log('‚è∞ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...');
            const success = clickLastPaginationButton();

            if (!success) {
                console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                stopAutoRun();
            }
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –ø–∞—É–∑–∞

        updateStartButton();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    function stopAutoRun() {
        if (!isAutoRunning) return;

        isAutoRunning = false;
        if (autoInterval) {
            clearInterval(autoInterval);
            autoInterval = null;
        }
        console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        updateStartButton();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø
    function createStartButton() {
        const button = document.createElement('button');
        button.innerHTML = '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç';
        button.style.cssText = `
            position: fixed;
            top: 110px;
            right: 10px;
            z-index: 10000;
            padding: 10px 15px;
            background: #2196F3;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        `;

        button.addEventListener('click', () => {
            if (isAutoRunning) {
                stopAutoRun();
            } else {
                startAutoRun();
            }
        });

        return button;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
    function updateStartButton() {
        if (startButton) {
            if (isAutoRunning) {
                startButton.innerHTML = '‚èπÔ∏è –°—Ç–æ–ø';
                startButton.style.background = '#f44336';
            } else {
                startButton.innerHTML = '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç';
                startButton.style.background = '#2196F3';
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
    function createTestButton() {
        const button = document.createElement('button');
        button.innerHTML = 'üîç –¢–µ—Å—Ç';
        button.style.cssText = `
            position: fixed;
            top: 160px;
            right: 10px;
            z-index: 10000;
            padding: 8px 12px;
            background: #FF9800;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        `;

        button.addEventListener('click', () => {
            const buttons = findPaginationButtons();
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', buttons.length);

            if (buttons.length > 0) {
                console.log('üìã –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:');
                buttons.forEach((btn, index) => {
                    console.log(`${index + 1}. "${btn.textContent.trim()}" - ${btn.classList.contains('disabled') ? '–æ—Ç–∫–ª—é—á–µ–Ω–∞' : '–∞–∫—Ç–∏–≤–Ω–∞'}`);
                });

                const lastButton = buttons[buttons.length - 1];
                console.log(`‚û°Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞: "${lastButton.textContent.trim()}"`);
            } else {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        });

        return button;
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    let startButton;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    setTimeout(() => {
        const clearButton = createClearButton();
        document.body.appendChild(clearButton);

        startButton = createStartButton();
        document.body.appendChild(startButton);

        const testButton = createTestButton();
        document.body.appendChild(testButton);
    }, 1000);

    console.log('üöÄ Dealfront API Interceptor —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
})();