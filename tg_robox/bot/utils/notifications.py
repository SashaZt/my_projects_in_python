# bot/utils/notifications.py
from aiogram import Bot
from typing import List, Union, Optional
from config.logger import logger


async def notify_admins(bot: Bot, admin_ids: List[int], message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}"
            )


async def send_card_code(bot: Bot, user_id: int, card_code: str, card_value: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    message = (
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üí≥ –ù–æ–º–∏–Ω–∞–ª –∫–∞—Ä—Ç—ã: ${card_value}\n"
        f"üîë –ö–æ–¥ –∫–∞—Ä—Ç—ã: <code>{card_code}</code>\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞."
    )

    try:
        await bot.send_message(user_id, message, parse_mode="HTML")
        logger.info(f"–ö–æ–¥ –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


async def send_order_status_update(
    bot: Bot,
    user_id: int,
    order_id: int,
    status: str,
    additional_info: Optional[str] = None,
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    status_emoji = {
        "created": "üïí",
        "paid": "‚úÖ",
        "completed": "‚úÖ",
        "canceled": "‚ùå",
        "failed": "‚ùå",
    }.get(status, "‚ùì")

    message = (
        f"{status_emoji} <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{status.capitalize()}</b>\n"
    )

    if additional_info:
        message += f"\n{additional_info}\n"

    try:
        await bot.send_message(user_id, message, parse_mode="HTML")
        logger.info(
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
        )
        return True
    except Exception as e:
        logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
        )
        return False


async def send_error_notification(bot: Bot, chat_id: int, error_message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    message = (
        f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
        f"{error_message}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )

    try:
        await bot.send_message(chat_id, message, parse_mode="HTML")
        return True
    except Exception as e:
        logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}"
        )
        return False


async def broadcast_message(
    bot: Bot, user_ids: List[int], message: str, parse_mode: str = "HTML"
):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    successful = 0
    failed = 0

    for user_id in user_ids:
        try:
            await bot.send_message(user_id, message, parse_mode=parse_mode)
            successful += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}, –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
    return successful, failed
