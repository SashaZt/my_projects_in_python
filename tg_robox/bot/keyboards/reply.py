# keyboards/reply.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import func, case
from db.models import CardCode
from config.config import Config

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
router = Router()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    config = Config.load()
    return user_id in config.bot.admin_ids


def get_start_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?"))
    builder.add(KeyboardButton(text="üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))

    return builder.as_markup(resize_keyboard=True)


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton(text="üõç –ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")],
        [KeyboardButton(text="üõç –ú–æ—ó –ø–æ–∫—É–ø–∫–∏"), KeyboardButton(text="‚ÑπÔ∏è –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?")],
        [
            KeyboardButton(text="üìä –í—ñ–¥–≥—É–∫–∏"),        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Å—é–¥–∞ –≤–º–µ—Å—Ç–æ "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
            KeyboardButton(text="üõü –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ / FAQ"),
        ],
        # –£–±—Ä–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å "üìä –í—ñ–¥–≥—É–∫–∏"
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = ReplyKeyboardBuilder()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    builder.row(
        KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–¥"), 
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    builder.row(
        KeyboardButton(text="üóù –ó–∞–ª–∏—à–æ–∫ –∫–ª—é—á—ñ–≤"),  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        KeyboardButton(text="üéÅ –†–æ–∑—ñ–≥—Ä–∞—à / –ë–æ–Ω—É—Å–∏"),
    )

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥
    builder.add(KeyboardButton(text="üë®‚Äçüíª –†–µ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"))

    return builder.as_markup(resize_keyboard=True)


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò - –ü–ï–†–ï–ù–ï–°–ï–ù –í –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ï–°–¢–û
@router.message(F.text == "üóù –ó–∞–ª–∏—à–æ–∫ –∫–ª—é—á—ñ–≤")
async def rest_keys_button(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫–ª—é—á–µ–π –∏–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∫–ª—é—á–µ–π –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º
    stmt = (
        select(
            CardCode.card_value,
            func.count(CardCode.code_id).label('total_count'),
            func.sum(case((CardCode.is_used == False, 1), else_=0)).label('available_count'),
            func.sum(case((CardCode.is_used == True, 1), else_=0)).label('used_count')
        )
        .group_by(CardCode.card_value)
        .order_by(CardCode.card_value)
    )
    
    result = await session.execute(stmt)
    card_stats = result.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üóù <b>–ó–∞–ª–∏—à–æ–∫ –∫–ª—é—á—ñ–≤ –∑–∞ –Ω–æ–º—ñ–Ω–∞–ª–∞–º–∏</b>\n\n"
    
    if card_stats:
        total_available = 0
        total_used = 0
        total_all = 0
        
        for stat in card_stats:
            card_value = float(stat.card_value)
            total_count = stat.total_count or 0
            available_count = stat.available_count or 0
            used_count = stat.used_count or 0
            
            total_available += available_count
            total_used += used_count
            total_all += total_count
            
            message_text += (
                f"üíµ <b>${card_value:.0f}</b>: "
                f"<b>{available_count}</b> –¥–æ—Å—Ç—É–ø–Ω–æ / {total_count} –≤—Å—å–æ–≥–æ\n"
            )
        
        message_text += f"\nüìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á—ñ–≤:</b>\n"
        message_text += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{total_available}</b>\n"
        message_text += f"‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {total_used}\n"
        message_text += f"üì¶ –í—Å—å–æ–≥–æ: {total_all}\n"
    else:
        message_text += "‚ùå –ö–ª—é—á—ñ–≤ –≤ –±–∞–∑—ñ –Ω–µ–º–∞—î\n"
    
    await message.answer(message_text)