# scheduled_tasks.py
import asyncio
import logging
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from db.models import Review
from db.database import get_session_maker
from config.config import Config
from config.logger import logger


async def publish_approved_reviews(bot):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        async with get_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–æ–±—Ä–µ–Ω—ã, –Ω–æ –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
            stmt = (
                select(Review)
                .options(joinedload(Review.user), joinedload(Review.order))
                .where(Review.is_approved == True, Review.is_published == False)
                .order_by(Review.created_at.asc())
            )
            result = await session.execute(stmt)
            reviews = result.scalars().all()

            if not reviews:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return

            group_id = "-4763327238"  # ID –≥—Ä—É–ø–ø—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏

            for review in reviews:
                user = review.user
                user_name = user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
                review_text = (
                    f"üìù <b>–í—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞</b>\n\n"
                    f"üë§ {user_name}\n"
                    f"{'‚≠êÔ∏è' * rating}\n\n"
                    f"üí¨ {review.comment}\n\n"
                    f"üìÖ {review.created_at.strftime('%d.%m.%Y')}"
                )

                # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç–∑—ã–≤ –≤ –≥—Ä—É–ø–ø–µ
                await bot.send_message(chat_id=group_id, text=review_text)

                # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
                review.is_published = True

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
