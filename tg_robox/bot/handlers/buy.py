# handlers/but.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import LabeledPrice
from pathlib import Path
import sys
from keyboards import reply as kb
from keyboards import inline as ikb
from utils.states import BuyCardStates
from utils.notifications import send_card_code, send_order_status_update
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from db.models import RobloxProduct, Order, Payment, CardCode, User
import uuid
from datetime import datetime
from utils.payment_logging import log_payment_event
import os
from aiogram.types import FSInputFile

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
ROOT_DIR = Path(__file__).parent.parent.absolute()
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

from config.config import Config
from config.logger import logger

router = Router()


@router.message(F.text == "üõç –ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")
async def buy_card(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É'"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ë–î
    stmt = (
        select(RobloxProduct)
        .where(RobloxProduct.is_available == True)
        .order_by(RobloxProduct.robux_amount)
    )
    result = await session.execute(stmt)
    products = result.scalars().all()
    if not products:
        await message.answer(
            "‚ùå –ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=kb.get_main_menu_keyboard(),
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    await message.answer(
        "üõç <b>–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É Roblox:</b>\n\n"
        "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ Roblox-–∫–∞—Ä—Ç–∫–∏\n"
        "–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª: üëæ\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –∫–æ–¥ –∞–±–æ –∫—ñ–ª—å–∫–∞ –∫–æ–¥—ñ–≤, —è–∫—ñ –ø–æ–ø–æ–≤–Ω—è—Ç—å —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å.",
        reply_markup=ikb.get_products_keyboard(products),
    )
    await state.set_state(BuyCardStates.select_product)


import os
from aiogram.types import FSInputFile


@router.callback_query(BuyCardStates.select_product, F.data.startswith("product_"))
async def product_selected(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
    product_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –ë–î
    stmt = select(RobloxProduct).where(RobloxProduct.product_id == product_id)
    result = await session.execute(stmt)
    product = result.scalar_one_or_none()

    if not product:
        await callback.message.edit_text(
            "‚ùå –û–±—Ä–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.",
            reply_markup=ikb.get_back_to_menu_keyboard(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤
    stmt = (
        select(CardCode)
        .where(CardCode.card_value == 10, CardCode.is_used == False)
        .limit(product.card_count)
    )
    result = await session.execute(stmt)
    available_codes = result.scalars().all()

    if len(available_codes) < product.card_count:
        await callback.message.edit_text(
            f"‚ùå –ù–∞ –∂–∞–ª—å, –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥—ñ ({len(available_codes)}/{product.card_count}).\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –ø—Ä–æ–¥—É–∫—Ç –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
            reply_markup=ikb.get_back_to_products_keyboard(),
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
    caption = (
        f"üìÑ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        f"üéÆ {product.name}\n"
        f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
        f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n"
        f"üí≥ –î–æ –æ–ø–ª–∞—Ç–∏: {product.price_uah}‚Ç¥\n\n"
        f"‚ö†Ô∏è –ü—Ä–∏–¥–±–∞–Ω—ñ —ñ–≥—Ä–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏ —î —Ü–∏—Ñ—Ä–æ–≤–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.\n"
        f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–µ –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏.\n"
        f"–û–ø–ª–∞—á—É—é—á–∏, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—è –∑ —É–º–æ–≤–∞–º–∏ –ø–æ–∫—É–ø–∫–∏."
        f"–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç–∏'"
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = f"assets/images/{product.product_id}.jpg"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(photo_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            photo = FSInputFile(photo_path)
            await callback.bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=photo,
                caption=caption,
                reply_markup=ikb.get_payment_keyboard(product_id, product.price_uah),
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=caption,
                reply_markup=ikb.get_payment_keyboard(product_id, product.price_uah),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=caption,
            reply_markup=ikb.get_payment_keyboard(product_id, product.price_uah),
        )

    await state.set_state(BuyCardStates.confirm_payment)


@router.callback_query(BuyCardStates.confirm_payment, F.data.startswith("pay_"))
async def proceed_to_payment(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏—Ç–∏'"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ü–µ–Ω—É –∏–∑ callback_data
    _, product_id, price = callback.data.split("_")
    product_id = int(product_id)
    price = float(price)

    user_id = callback.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    log_payment_event(
        event_type="payment_started",
        user_id=user_id,
        payment_data={
            "product_id": product_id,
            "price": price,
            "callback_data": callback.data,
        },
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    stmt = select(RobloxProduct).where(RobloxProduct.product_id == product_id)
    result = await session.execute(stmt)
    product = result.scalar_one_or_none()

    if not product:
        log_payment_event(
            event_type="product_unavailable",
            user_id=user_id,
            payment_data={"product_id": product_id},
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚ùå –ü—Ä–æ–¥—É–∫—Ç –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø–æ–∫—É–ø–∫—É —Å–ø–æ—á–∞—Ç–∫—É.",
                reply_markup=ikb.get_back_to_menu_keyboard(),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚ùå –ü—Ä–æ–¥—É–∫—Ç –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø–æ–∫—É–ø–∫—É —Å–ø–æ—á–∞—Ç–∫—É.",
                reply_markup=ikb.get_back_to_menu_keyboard(),
            )
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    order = await create_order(
        session,
        user_id=callback.from_user.id,
        product_id=product_id,
        price=price,
        cards_required=product.card_count,
    )

    log_payment_event(
        event_type="order_created",
        user_id=user_id,
        order_id=order.order_id,
        payment_data={
            "product_id": product_id,
            "price": price,
            "card_count": product.card_count,
        },
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config.load()
    provider_token = config.portmone.portmone_token

    if not provider_token:
        log_payment_event(
            event_type="payment_token_missing", user_id=user_id, order_id=order.order_id
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚ùå –ü–ª–∞—Ç–µ–∂—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=ikb.get_back_to_menu_keyboard(),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚ùå –ü–ª–∞—Ç–µ–∂—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=ikb.get_back_to_menu_keyboard(),
            )
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ = 1 –∫–æ–ø–µ–π–∫–∞)
        price_in_kopecks = int(price * 100)

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
        invoice_id = str(uuid.uuid4())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º invoice_id –≤ –ø–ª–∞—Ç–µ–∂–µ
        stmt = select(Payment).where(Payment.order_id == order.order_id)
        result = await session.execute(stmt)
        payment = result.scalar_one_or_none()

        if payment:
            payment.portmone_order_id = invoice_id
            await session.commit()
            log_payment_event(
                event_type="invoice_id_saved",
                user_id=user_id,
                order_id=order.order_id,
                payment_data={"invoice_id": invoice_id},
            )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üí≥ <b>–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –æ–ø–ª–∞—Ç–∏</b>\n\n"
            f"–ó–∞—Ä–∞–∑ –≤–∞–º –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–ª–∞—Ç—ñ–∂–Ω—É —Ñ–æ—Ä–º—É.\n"
            f"–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ.\n\n"
            f"<b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> #{order.order_id}",
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"–ö—É–ø—ñ–≤–ª—è {product.name}",
            description=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_id} - Roblox Gift Card –Ω–∞ {product.robux_amount} ROBUX",
            payload=f"order_{order.order_id}_{invoice_id}",
            provider_token=provider_token,
            currency="UAH",
            prices=[LabeledPrice(label=product.name, amount=price_in_kopecks)],
            start_parameter="buy_roblox_card",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
            protect_content=True,
        )

        log_payment_event(
            event_type="invoice_sent",
            user_id=user_id,
            order_id=order.order_id,
            payment_data={
                "invoice_id": invoice_id,
                "amount": price,
                "amount_kopecks": price_in_kopecks,
                "product_name": product.name,
                "robux_amount": product.robux_amount,
            },
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        await state.set_state(BuyCardStates.waiting_payment)
        await callback.answer()

    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")
        log_payment_event(
            event_type="payment_error",
            user_id=user_id,
            order_id=order.order_id if "order" in locals() else None,
            payment_data={"error": error_msg, "error_type": type(e).__name__},
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=ikb.get_back_to_menu_keyboard(),
            )
        except Exception:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback.answer(
                "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                show_alert=True,
            )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "üìã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=kb.get_main_menu_keyboard(),
    )


@router.callback_query(F.data == "back_to_products")
async def back_to_products(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ë–î
    stmt = (
        select(RobloxProduct)
        .where(RobloxProduct.is_available == True)
        .order_by(RobloxProduct.robux_amount)
    )
    result = await session.execute(stmt)
    products = result.scalars().all()

    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ)
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="üõç <b>–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É Roblox:</b>\n\n"
            "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ Roblox-–∫–∞—Ä—Ç–∫–∏.\n"
            "–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª: üëæ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –∫–æ–¥ –∞–±–æ –∫—ñ–ª—å–∫–∞ –∫–æ–¥—ñ–≤, —è–∫—ñ –ø–æ–ø–æ–≤–Ω—è—Ç—å —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å.",
            reply_markup=ikb.get_products_keyboard(products),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="üõç <b>–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É Roblox:</b>\n\n"
            "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ Roblox-–∫–∞—Ä—Ç–∫–∏.\n"
            "–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª: üëæ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –∫–æ–¥ –∞–±–æ –∫—ñ–ª—å–∫–∞ –∫–æ–¥—ñ–≤, —è–∫—ñ –ø–æ–ø–æ–≤–Ω—è—Ç—å —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å.",
            reply_markup=ikb.get_products_keyboard(products),
        )

    await state.set_state(BuyCardStates.select_product)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
@router.message(Command("simulate_payment"))
async def simulate_payment(message: Message, session: AsyncSession):
    """–°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        order_id = int(message.text.split()[1])

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        stmt = select(Order).where(Order.order_id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()

        if not order:
            await message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        stmt = select(RobloxProduct).where(RobloxProduct.product_id == order.product_id)
        result = await session.execute(stmt)
        product = result.scalar_one_or_none()

        if not product:
            await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞
        order.status = "paid"
        order.payment.status = "success"
        order.payment.payment_date = datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ –∫–∞—Ä—Ç
        stmt = (
            select(CardCode)
            .where(CardCode.card_value == product.card_value, CardCode.is_used == False)
            .limit(product.card_count)
        )
        result = await session.execute(stmt)
        card_codes = result.scalars().all()

        if len(card_codes) < product.card_count:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥—ñ ({len(card_codes)}/{product.card_count})!"
            )
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥—ã –∫ –∑–∞–∫–∞–∑—É
        codes_text = ""
        for card_code in card_codes:
            card_code.is_used = True
            card_code.order_id = order.order_id
            card_code.used_at = datetime.now()
            order.cards_issued += 1
            codes_text += f"üîë <code>{card_code.code}</code>\n"

        # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–¥—ã –≤—ã–¥–∞–Ω—ã, –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        if order.cards_issued >= order.cards_required:
            order.status = "completed"
            order.completed_at = datetime.now()

        await session.commit()
        if "premium" not in product.name.lower():
            logger.info(product.name.lower())
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.bot.send_message(
                order.user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üéÆ {product.name}\n"
                f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
                f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n\n"
                f"<b>–í–∞—à—ñ –∫–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:</b>\n"
                + "\n".join(f"üîë {code}" for code in codes_text.splitlines())
                + "\n\n"
                "–û—Å—å –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥.\n\n"
                "https://youtu.be/6r9qPBOOzHk\n\n"
                "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –≥—Ä–∏ http://roblox.com/redeem\n"
                "2. –£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–æ–º—É –±–∞–∂–∞—î—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥.\n"
                "3. –£–≤–µ–¥—ñ—Ç—å –∫–æ–¥.\n"
                "4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ—é.\n"
                "5. –û–±–º—ñ–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ –ø–∞–∫–µ—Ç –†–æ–±—É–∫—Å—ñ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ‚ùóÔ∏è\n\n"
                "–©–æ–± –æ–±–º—ñ–Ω—è—Ç–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ –†–æ–±—É–∫—Å–∏ üí∞\n"
                '–ê–∫—Ç–∏–≤—É–π—Ç–µ –∫–æ–¥ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Get Robux"\n\n'
                "–ö–æ–¥ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç http://roblox.com/redeem ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è",
                reply_markup=kb.get_main_menu_keyboard(),
            )

            await message.answer(
                f"‚úÖ –ü–ª–∞—Ç—ñ–∂ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º #{order_id} –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!"
            )
        else:
            await message.bot.send_message(
                order.user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üéÆ {product.name}\n"
                f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
                f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n\n"
                f"<b>–í–∞—à—ñ –∫–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:</b>\n"
                + "\n".join(f"üîë {code}" for code in codes_text.splitlines())
                + "\n\n"
                "–ü–ï–†–ï–î –ê–ö–¢–ò–í–ê–¶–Ü–Ñ–Æ –£–í–ê–ñ–ù–û –ü–û–î–ò–í–Ü–¢–¨–°–Ø –Ü–ù–°–¢–†–£–ö–¶–Ü–Æ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n"
                "–û—Å—å –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥:\n\n"
                "https://youtu.be/BtiaZTegCSI\n\n"
                "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –≥—Ä–∏ http://roblox.com/redeem\n"
                "2. –£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–æ–º—É –±–∞–∂–∞—î—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥ —Ç–∞ –ø—ñ–¥–ø–∏—Å–∫—É.\n"
                "3. –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n"
                "https://www.roblox.com/upgrades/redeem?ap=481&pm=redeemCard&selectedUpsellProductId=0\n"
                '4. –í—Å—Ç–∞–≤—Ç–µ –Ω–∞–¥–∞–Ω–∏–π –∫–æ–¥ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å **"Redeem"**"\n'
                "5. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ **Subscribe!**\n"
                "6. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —Å—é–¥–∏ https://www.roblox.com/my/account#!/subscriptions\n"
                "7. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É\n"
                "8. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Cancel Renewal ‚ùó‚ùó‚ùó",
                reply_markup=kb.get_main_menu_keyboard(),
            )
            await message.answer(
                f"‚úÖ –ü–ª–∞—Ç—ñ–∂ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º #{order_id} –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!"
            )

    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /simulate_payment <order_id>"
        )
    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")


async def create_order(
    session: AsyncSession,
    user_id: int,
    product_id: int,
    price: float,
    cards_required: int,
) -> Order:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order = Order(
        user_id=user_id,
        product_id=product_id,
        status="created",
        cards_required=cards_required,
        cards_issued=0,
        total_price=price,
    )
    session.add(order)
    await session.flush()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º flush –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–∫–∞–∑–∞

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = Payment(
        order_id=order.order_id,
        amount=price,
        status="pending",
        portmone_order_id=str(uuid.uuid4()),  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è Portmone
    )
    session.add(payment)
    await session.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑
    return order


def generate_payment_url(order_id: int, amount: float) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Portmone (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Portmone API
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π URL
    return f"https://www.portmone.com.ua/r3/payment?order={order_id}&amount={amount}"
