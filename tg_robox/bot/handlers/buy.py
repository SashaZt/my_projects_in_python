# handlers/but.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import LabeledPrice
from pathlib import Path
import sys
from keyboards import reply as kb
from keyboards import inline as ikb
from utils.states import BuyCardStates
from utils.notifications import send_card_code, send_order_status_update
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from db.models import RobloxProduct, Order, Payment, CardCode, User
import uuid
from datetime import datetime
from utils.payment_logging import log_payment_event


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
ROOT_DIR = Path(__file__).parent.parent.absolute()
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

from config.config import Config
from config.logger import logger

router = Router()


@router.message(F.text == "üõç –ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")
async def buy_card(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É'"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ë–î
    stmt = (
        select(RobloxProduct)
        .where(RobloxProduct.is_available == True)
        .order_by(RobloxProduct.robux_amount)
    )
    result = await session.execute(stmt)
    products = result.scalars().all()

    if not products:
        await message.answer(
            "‚ùå –ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=kb.get_main_menu_keyboard(),
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    await message.answer(
        "üõç <b>–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É Roblox:</b>\n\n"
        "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ Roblox-–∫–∞—Ä—Ç–∫–∏. –û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª: üí∞",
        reply_markup=ikb.get_products_keyboard(products),
    )
    await state.set_state(BuyCardStates.select_product)


@router.callback_query(BuyCardStates.select_product, F.data.startswith("product_"))
async def product_selected(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
    product_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –ë–î
    stmt = select(RobloxProduct).where(RobloxProduct.product_id == product_id)
    result = await session.execute(stmt)
    product = result.scalar_one_or_none()

    if not product:
        await callback.message.edit_text(
            "‚ùå –û–±—Ä–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.",
            reply_markup=ikb.get_back_to_menu_keyboard(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤
    stmt = (
        select(CardCode)
        .where(CardCode.card_value == product.card_value, CardCode.is_used == False)
        .limit(product.card_count)
    )
    result = await session.execute(stmt)
    available_codes = result.scalars().all()

    if len(available_codes) < product.card_count:
        await callback.message.edit_text(
            f"‚ùå –ù–∞ –∂–∞–ª—å, –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥—ñ ({len(available_codes)}/{product.card_count}).\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –ø—Ä–æ–¥—É–∫—Ç –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
            reply_markup=ikb.get_back_to_products_keyboard(),
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    await callback.message.edit_text(
        f"üìÑ <b>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        f"üéÆ {product.name}\n"
        f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
        f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n"
        f"üí≥ –î–æ –æ–ø–ª–∞—Ç–∏: {product.price_uah}‚Ç¥\n\n"
        f"–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç–∏'",
        reply_markup=ikb.get_payment_keyboard(product_id, product.price_uah),
    )
    await state.set_state(BuyCardStates.confirm_payment)


@router.callback_query(BuyCardStates.confirm_payment, F.data.startswith("pay_"))
async def proceed_to_payment(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏—Ç–∏'"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ü–µ–Ω—É –∏–∑ callback_data
    _, product_id, price = callback.data.split("_")
    product_id = int(product_id)
    price = float(price)

    user_id = callback.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    log_payment_event(
        event_type="payment_started",
        user_id=user_id,
        payment_data={
            "product_id": product_id,
            "price": price,
            "callback_data": callback.data,
        },
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    stmt = select(RobloxProduct).where(RobloxProduct.product_id == product_id)
    result = await session.execute(stmt)
    product = result.scalar_one_or_none()

    if not product:
        log_payment_event(
            event_type="product_unavailable",
            user_id=user_id,
            payment_data={"product_id": product_id},
        )
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–¥—É–∫—Ç –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø–æ–∫—É–ø–∫—É —Å–ø–æ—á–∞—Ç–∫—É.",
            reply_markup=ikb.get_back_to_menu_keyboard(),
        )
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    order = await create_order(
        session,
        user_id=callback.from_user.id,
        product_id=product_id,
        price=price,
        cards_required=product.card_count,
    )

    log_payment_event(
        event_type="order_created",
        user_id=user_id,
        order_id=order.order_id,
        payment_data={
            "product_id": product_id,
            "price": price,
            "card_count": product.card_count,
        },
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config.load()
    provider_token = config.portmone.portmone_token

    if not provider_token:
        log_payment_event(
            event_type="payment_token_missing", user_id=user_id, order_id=order.order_id
        )
        await callback.message.edit_text(
            "‚ùå –ü–ª–∞—Ç–µ–∂—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=ikb.get_back_to_menu_keyboard(),
        )
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ = 1 –∫–æ–ø–µ–π–∫–∞)
        price_in_kopecks = int(price * 100)

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
        invoice_id = str(uuid.uuid4())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º invoice_id –≤ –ø–ª–∞—Ç–µ–∂–µ
        stmt = select(Payment).where(Payment.order_id == order.order_id)
        result = await session.execute(stmt)
        payment = result.scalar_one_or_none()

        if payment:
            payment.portmone_order_id = invoice_id
            await session.commit()
            log_payment_event(
                event_type="invoice_id_saved",
                user_id=user_id,
                order_id=order.order_id,
                payment_data={"invoice_id": invoice_id},
            )

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ
        await callback.message.edit_text(
            f"üí≥ <b>–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –æ–ø–ª–∞—Ç–∏</b>\n\n"
            f"–ó–∞—Ä–∞–∑ –≤–∞–º –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–ª–∞—Ç—ñ–∂–Ω—É —Ñ–æ—Ä–º—É.\n"
            f"–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ.\n\n"
            f"<b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> #{order.order_id}",
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"–ü–æ–∫—É–ø–∫–∞ {product.name}",
            description=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_id} - Roblox Gift Card –Ω–∞ {product.robux_amount} ROBUX",
            payload=f"order_{order.order_id}_{invoice_id}",
            provider_token=provider_token,
            currency="UAH",
            prices=[LabeledPrice(label=product.name, amount=price_in_kopecks)],
            start_parameter="buy_roblox_card",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
            protect_content=True,
        )

        log_payment_event(
            event_type="invoice_sent",
            user_id=user_id,
            order_id=order.order_id,
            payment_data={
                "invoice_id": invoice_id,
                "amount": price,
                "amount_kopecks": price_in_kopecks,
                "product_name": product.name,
                "robux_amount": product.robux_amount,
            },
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        await state.set_state(BuyCardStates.waiting_payment)
        await callback.answer()

    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")
        log_payment_event(
            event_type="payment_error",
            user_id=user_id,
            order_id=order.order_id if "order" in locals() else None,
            payment_data={"error": error_msg, "error_type": type(e).__name__},
        )
        await callback.message.edit_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=ikb.get_back_to_menu_keyboard(),
        )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "üìã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=kb.get_main_menu_keyboard(),
    )


@router.callback_query(F.data == "back_to_products")
async def back_to_products(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ë–î
    stmt = (
        select(RobloxProduct)
        .where(RobloxProduct.is_available == True)
        .order_by(RobloxProduct.robux_amount)
    )
    result = await session.execute(stmt)
    products = result.scalars().all()

    await callback.message.edit_text(
        "üõç <b>–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É Roblox:</b>\n\n"
        "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ Roblox-–∫–∞—Ä—Ç–∫–∏. –û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª: üí∞",
        reply_markup=ikb.get_products_keyboard(products),
    )
    await state.set_state(BuyCardStates.select_product)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
@router.message(Command("simulate_payment"))
async def simulate_payment(message: Message, session: AsyncSession):
    """–°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        order_id = int(message.text.split()[1])

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        stmt = select(Order).where(Order.order_id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()

        if not order:
            await message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        stmt = select(RobloxProduct).where(RobloxProduct.product_id == order.product_id)
        result = await session.execute(stmt)
        product = result.scalar_one_or_none()

        if not product:
            await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞
        order.status = "paid"
        order.payment.status = "success"
        order.payment.payment_date = datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ –∫–∞—Ä—Ç
        stmt = (
            select(CardCode)
            .where(CardCode.card_value == product.card_value, CardCode.is_used == False)
            .limit(product.card_count)
        )
        result = await session.execute(stmt)
        card_codes = result.scalars().all()

        if len(card_codes) < product.card_count:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥—ñ ({len(card_codes)}/{product.card_count})!"
            )
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥—ã –∫ –∑–∞–∫–∞–∑—É
        codes_text = ""
        for card_code in card_codes:
            card_code.is_used = True
            card_code.order_id = order.order_id
            card_code.used_at = datetime.now()
            order.cards_issued += 1
            codes_text += f"üîë <code>{card_code.code}</code>\n"

        # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–¥—ã –≤—ã–¥–∞–Ω—ã, –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        if order.cards_issued >= order.cards_required:
            order.status = "completed"
            order.completed_at = datetime.now()

        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_message(
            order.user_id,
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üéÆ {product.name}\n"
            f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
            f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n\n"
            f"<b>–í–∞—à—ñ –∫–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:</b>\n"
            f"{codes_text}\n"
            f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å–∞–π—Ç <a href='https://www.roblox.com/redeem'>roblox.com/redeem</a>\n\n"
            f"–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É.",
            reply_markup=kb.get_main_menu_keyboard(),
        )

        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç—ñ–∂ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º #{order_id} –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!"
        )

    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /simulate_payment <order_id>"
        )
    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")


async def create_order(
    session: AsyncSession,
    user_id: int,
    product_id: int,
    price: float,
    cards_required: int,
) -> Order:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order = Order(
        user_id=user_id,
        product_id=product_id,
        status="created",
        cards_required=cards_required,
        cards_issued=0,
        total_price=price,
    )
    session.add(order)
    await session.flush()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º flush –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–∫–∞–∑–∞

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = Payment(
        order_id=order.order_id,
        amount=price,
        status="pending",
        portmone_order_id=str(uuid.uuid4()),  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è Portmone
    )
    session.add(payment)
    await session.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑
    return order


def generate_payment_url(order_id: int, amount: float) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Portmone (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Portmone API
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π URL
    return f"https://www.portmone.com.ua/r3/payment?order={order_id}&amount={amount}"
