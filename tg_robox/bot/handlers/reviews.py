# handlers/reviews.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from db.models import Review, Order
from keyboards import inline as ikb
from keyboards import reply as kb
from utils.states import ReviewStates
from config.logger import logger
from aiogram.types import InlineKeyboardButton
from sqlalchemy.orm import joinedload
from datetime import datetime
from sqlalchemy import func
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


class ReviewsStates(StatesGroup):
    viewing = State()


@router.callback_query(F.data.startswith("review_"))
async def start_review(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    stmt = select(Review).where(Review.order_id == order_id, Review.user_id == user_id)
    result = await session.execute(stmt)
    existing_review = result.scalar_one_or_none()

    if existing_review:
        await callback.answer(
            "–í–∏ –≤–∂–µ –∑–∞–ª–∏—à–∏–ª–∏ –≤—ñ–¥–≥—É–∫ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!", show_alert=True
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=order_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É
    await callback.message.answer(
        "‚≠ê <b>–û—Ü—ñ–Ω—ñ—Ç—å –Ω–∞—à —Å–µ—Ä–≤—ñ—Å</b>\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å —è–∫—ñ—Å—Ç—å –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –≤—ñ–¥ 1 –¥–æ 5 –∑—ñ—Ä–æ–∫:",
        reply_markup=ikb.get_rating_keyboard(),
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
    await state.set_state(ReviewStates.waiting_rating)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
@router.callback_query(ReviewStates.waiting_rating, F.data.startswith("rating_"))
async def process_rating(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ callback_data
    rating = int(callback.data.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(rating=rating)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await callback.message.answer(
        f"–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É! {'‚≠ê' * rating}\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –≤—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å.\n"
        "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏!"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(ReviewStates.waiting_comment)
    await callback.answer()


@router.message(ReviewStates.waiting_comment)
async def process_comment(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        order_id = data.get("order_id")
        rating = data.get("rating")

        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞: user_id={message.from_user.id}, order_id={order_id}, rating={rating}, comment={message.text}"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        comment = message.text

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        stmt = select(Order).where(Order.order_id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()

        if not order:
            logger.error(f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: order_id={order_id}")
            await message.answer(
                "‚ùå –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É - –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=kb.get_main_menu_keyboard(),
            )
            await state.clear()
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
            review = Review(
                order_id=order_id,
                user_id=message.from_user.id,
                rating=rating,
                comment=comment,
                is_approved=True,
                is_published=True,  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
                created_at=datetime.now(),  # –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            )

            logger.info(f"–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞: {review.__dict__}")

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –ë–î
            session.add(review)
            await session.flush()  # –°–Ω–∞—á–∞–ª–∞ flush –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID

            logger.info(f"–û—Ç–∑—ã–≤ –ø–æ–ª—É—á–∏–ª ID: {review.review_id}")

            # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            await session.commit()

            logger.info(f"–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {db_error}", exc_info=True)
            await message.answer(
                "‚ùå –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.",
                reply_markup=kb.get_main_menu_keyboard(),
            )
            await state.clear()
            return

        # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç–∑—ã–≤ –≤ –≥—Ä—É–ø–ø—É –Ω–∞–ø—Ä—è–º—É—é
        try:
            group_id = "-4763327238"  # ID –≥—Ä—É–ø–ø—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
            user_name = message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            if message.from_user.last_name:
                user_name += f" {message.from_user.last_name}"

            review_text = (
                f"üìù <b>–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞</b>\n\n"
                f"üë§ {user_name}\n"
                f"‚≠ê {'‚≠ê' * int(rating)}\n\n"
                f"üí¨ {comment}\n\n"
                f"üìÖ {review.created_at.strftime('%d.%m.%Y')}"
            )

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ –≥—Ä—É–ø–ø—É {group_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –≥—Ä—É–ø–ø—É
            sent_message = await message.bot.send_message(
                chat_id=group_id, text=review_text, parse_mode="HTML"
            )

            logger.info(
                f"–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É, message_id={sent_message.message_id}"
            )

            # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
            review.is_published = True
            await session.commit()
            logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π")

        except Exception as publish_error:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –≤ –≥—Ä—É–ø–ø–µ: {publish_error}", exc_info=True
            )
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–∑—ã–≤ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î

        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            f"‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!</b>\n\n"
            f"–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: {'‚≠ê' * rating}\n\n"
            f"–ú–∏ —Ü—ñ–Ω—É—î–º–æ –≤–∞—à —á–∞—Å —Ç–∞ –¥–æ–ø–æ–º–æ–≥—É —É –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—ñ –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É. "
            f"–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è –±–∞—á–∏—Ç–∏ –≤–∞—Å –∑–Ω–æ–≤—É!",
            reply_markup=kb.get_main_menu_keyboard(),
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=kb.get_main_menu_keyboard(),
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data == "cancel_review")
async def cancel_review(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    await callback.message.answer(
        "‚úÖ –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—ñ–∑–Ω—ñ—à–µ —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç –∞–±–æ –≥—Ä—É–ø—É.",
        reply_markup=kb.get_main_menu_keyboard(),
    )
    await state.clear()
    await callback.answer()


# @router.message(F.text == "üìä –í—ñ–¥–≥—É–∫–∏")
# async def view_reviews(message: Message, session: AsyncSession):
#     """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤"""
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤
#     stmt = (
#         select(Review)
#         .options(joinedload(Review.user))
#         .order_by(Review.created_at.desc())
#         .limit(5)
#     )
#     result = await session.execute(stmt)
#     reviews = result.scalars().all()

#     if not reviews:
#         await message.answer(
#             "üìä <b>–í—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n"
#             "–£ –Ω–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º, —Ö—Ç–æ –∑–∞–ª–∏—à–∏—Ç—å —Å–≤–æ—é –¥—É–º–∫—É!",
#             reply_markup=kb.get_main_menu_keyboard(),
#         )
#         return

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
#     reviews_text = "üìä <b>–í—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n"

#     for review in reviews:
#         user_name = review.user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
#         reviews_text += (
#             f"üë§ {user_name}\n"
#             f"{'‚≠êÔ∏è' * review.rating}\n"
#             f"üí¨ {review.comment}\n"
#             f"üìÖ {review.created_at.strftime('%d.%m.%Y')}\n\n"
#         )


#     await message.answer(reviews_text, reply_markup=kb.get_main_menu_keyboard())
@router.message(F.text == "üìä –í—ñ–¥–≥—É–∫–∏")
async def view_reviews(message: Message, session: AsyncSession, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await show_reviews_page(message, session, state, 0)
    await state.set_state(ReviewsStates.viewing)


@router.callback_query(ReviewsStates.viewing, F.data.startswith("reviews_page_"))
async def process_reviews_page(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split("_")[-1])

    await show_reviews_page(callback.message, session, state, page, is_callback=True)
    await callback.answer()


async def show_reviews_page(
    message,
    session: AsyncSession,
    state: FSMContext,
    page: int,
    is_callback: bool = False,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–∑—ã–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    total_reviews = await session.scalar(
        select(func.count()).select_from(Review).where(Review.is_approved == True)
    )

    if total_reviews == 0:
        text = (
            "üìä <b>–í—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n"
            "–£ –Ω–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º, —Ö—Ç–æ –∑–∞–ª–∏—à–∏—Ç—å —Å–≤–æ—é –¥—É–º–∫—É!"
        )

        if is_callback:
            await message.edit_text(text, reply_markup=kb.get_main_menu_keyboard())
        else:
            await message.answer(text, reply_markup=kb.get_main_menu_keyboard())
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    max_page = (total_reviews - 1) // per_page

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if page < 0:
        page = 0
    elif page > max_page:
        page = max_page

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_page=page)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    stmt = (
        select(Review)
        .options(joinedload(Review.user))
        .where(Review.is_approved == True)
        .order_by(Review.created_at.desc())
        .limit(per_page)
        .offset(page * per_page)
    )

    result = await session.execute(stmt)
    reviews = result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
    reviews_text = (
        f"üìä <b>–í—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b> (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{max_page+1})\n\n"
    )

    for review in reviews:
        user_name = review.user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        reviews_text += (
            f"üë§ {user_name}\n"
            f"{'‚≠êÔ∏è' * review.rating}\n"
            f"üí¨ {review.comment}\n"
            f"üìÖ {review.created_at.strftime('%d.%m.%Y')}\n\n"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"reviews_page_{page-1}")
        )

    # –ö–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page < max_page:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"reviews_page_{page+1}"
            )
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append(
        [InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    )

    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    if is_callback:
        try:
            await message.edit_text(
                reviews_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                reviews_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            )
    else:
        await message.answer(
            reviews_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —É –≤–∞—Å –µ–≥–æ –µ—â–µ –Ω–µ—Ç
@router.callback_query(F.data == "back_to_menu")
async def back_to_reviews_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=kb.get_main_menu_keyboard(),
    )
    await state.clear()
    await callback.answer()
