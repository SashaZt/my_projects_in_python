# handlers/webhook.py
from datetime import datetime

from aiogram import Bot, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiohttp import web
from config.logger import logger
from db.database import get_session_maker
from db.models import CardCode, Order, Payment, RobloxProduct
from keyboards import inline as ikb
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.future import select
from utils.payment_logging import log_payment_event

from config.config import Config

# –°–æ–∑–¥–∞–µ–º Router –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
router = Router()  # –≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º webhook_router –≤ router


async def monobank_webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Monobank"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Monobank: {data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        invoice_id = data.get("invoiceId")
        status = data.get("status")
        reference = data.get("reference")  # –≠—Ç–æ ID –∑–∞–∫–∞–∑–∞

        if not all([invoice_id, status, reference]):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –≤–µ–±—Ö—É–∫–µ Monobank")
            return web.json_response(
                {"status": "error", "message": "Missing required fields"}, status=400
            )

        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        try:
            order_id = int(reference)
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –≤ –≤–µ–±—Ö—É–∫–µ Monobank: {reference}")
            return web.json_response(
                {"status": "error", "message": "Invalid order ID"}, status=400
            )

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        config = Config.load()
        engine = create_async_engine(config.db.get_connection_string())
        session_maker = get_session_maker(engine)

        async with session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            stmt = select(Order).where(Order.order_id == order_id)
            result = await session.execute(stmt)
            order = result.scalar_one_or_none()

            if not order:
                logger.error(f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {order_id}")
                return web.json_response(
                    {"status": "error", "message": "Order not found"}, status=404
                )

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–µ–±—Ö—É–∫–∞
            log_payment_event(
                event_type=f"monobank_webhook_{status}",
                user_id=order.user_id,
                order_id=order_id,
                payment_data=data,
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            stmt = select(Payment).where(Payment.order_id == order_id)
            result = await session.execute(stmt)
            payment = result.scalar_one_or_none()

            if not payment:
                logger.error(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: {order_id}")
                return web.json_response(
                    {"status": "error", "message": "Payment not found"}, status=404
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if status == "success":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                payment.status = "success"
                payment.payment_date = datetime.now()
                payment.payment_data = data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
                order.status = "paid"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                stmt = select(RobloxProduct).where(
                    RobloxProduct.product_id == order.product_id
                )
                result = await session.execute(stmt)
                product = result.scalar_one_or_none()

                if not product:
                    logger.error(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: {order_id}")
                    return web.json_response(
                        {"status": "error", "message": "Product not found"}, status=404
                    )

                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ –∫–∞—Ä—Ç
                stmt = (
                    select(CardCode)
                    .where(
                        CardCode.card_value == product.card_value,
                        CardCode.is_used == False,
                    )
                    .limit(product.card_count)
                )
                result = await session.execute(stmt)
                card_codes = result.scalars().all()

                if len(card_codes) < product.card_count:
                    logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞: {order_id}")
                    return web.json_response(
                        {"status": "error", "message": "Not enough card codes"},
                        status=400,
                    )

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥—ã –∫ –∑–∞–∫–∞–∑—É
                codes_text = ""
                for card_code in card_codes:
                    card_code.is_used = True
                    card_code.order_id = order.order_id
                    card_code.used_at = datetime.now()
                    order.cards_issued += 1
                    codes_text += f"üîë <code>{card_code.code}</code>\n"

                # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–¥—ã –≤—ã–¥–∞–Ω—ã, –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                if order.cards_issued >= order.cards_required:
                    order.status = "completed"
                    order.completed_at = datetime.now()

                await session.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot = Bot(token=config.bot.token)

                try:
                    if "premium" not in product.name.lower():
                        # –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã
                        await bot.send_message(
                            order.user_id,
                            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                            f"üéÆ {product.name}\n"
                            f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
                            f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n\n"
                            f"<b>–í–∞—à—ñ –∫–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:</b>\n"
                            f"{codes_text}\n\n"
                            "–û—Å—å –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥.\n\n"
                            "https://youtu.be/6r9qPBOOzHk\n\n"
                            "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –≥—Ä–∏ http://roblox.com/redeem\n"
                            "2. –£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–æ–º—É –±–∞–∂–∞—î—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥.\n"
                            "3. –£–≤–µ–¥—ñ—Ç—å –∫–æ–¥.\n"
                            "4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ—é.\n"
                            "5. –û–±–º—ñ–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ –ø–∞–∫–µ—Ç –†–æ–±—É–∫—Å—ñ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ‚ùóÔ∏è\n\n"
                            "–©–æ–± –æ–±–º—ñ–Ω—è—Ç–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ –†–æ–±—É–∫—Å–∏ üí∞\n"
                            '–ê–∫—Ç–∏–≤—É–π—Ç–µ –∫–æ–¥ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Get Robux"\n\n'
                            "–ö–æ–¥ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç http://roblox.com/redeem ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è",
                        )
                    else:
                        # –ü—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç—ã
                        await bot.send_message(
                            order.user_id,
                            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                            f"üéÆ {product.name}\n"
                            f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
                            f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n\n"
                            f"<b>–í–∞—à—ñ –∫–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:</b>\n"
                            f"{codes_text}\n\n"
                            "–ü–ï–†–ï–î –ê–ö–¢–ò–í–ê–¶–Ü–Ñ–Æ –£–í–ê–ñ–ù–û –ü–û–î–ò–í–Ü–¢–¨–°–Ø –Ü–ù–°–¢–†–£–ö–¶–Ü–Æ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n"
                            "–û—Å—å –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥:\n\n"
                            "https://youtu.be/BtiaZTegCSI\n\n"
                            "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –≥—Ä–∏ http://roblox.com/redeem\n"
                            "2. –£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–æ–º—É –±–∞–∂–∞—î—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥ —Ç–∞ –ø—ñ–¥–ø–∏—Å–∫—É.\n"
                            "3. –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n"
                            "https://www.roblox.com/upgrades/redeem?ap=481&pm=redeemCard&selectedUpsellProductId=0\n"
                            '4. –í—Å—Ç–∞–≤—Ç–µ –Ω–∞–¥–∞–Ω–∏–π –∫–æ–¥ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å **"Redeem"**\n'
                            "5. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ **Subscribe!**\n"
                            "6. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —Å—é–¥–∏: https://www.roblox.com/my/account#!/subscriptions\n"
                            "7. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É\n"
                            "8. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Cancel Renewal ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è",
                        )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                    review_keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚≠ê –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫",
                                    callback_data=f"review_{order.order_id}",
                                )
                            ]
                        ]
                    )

                    await bot.send_message(
                        order.user_id,
                        "–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ, —è–∫—â–æ –≤–∏ –∑–∞–ª–∏—à–∏—Ç–µ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å.",
                        reply_markup=review_keyboard,
                    )

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}"
                    )

                finally:
                    await bot.session.close()

            elif status == "failure" or status == "expired":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                payment.status = "failed"
                payment.payment_data = data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
                order.status = "canceled"
                await session.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    bot = Bot(token=config.bot.token)
                    await bot.send_message(
                        order.user_id,
                        "‚ùå –ù–∞ –∂–∞–ª—å, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ä–∞—Ö—É–Ω–∫—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.\n"
                        "–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É, —Å—Ç–≤–æ—Ä–∏–≤—à–∏ –Ω–æ–≤–∏–π –∑–∞–∫–∞–∑.",
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}"
                    )
                finally:
                    await bot.session.close()

            elif status == "processing":
                # –ü–ª–∞—Ç–µ–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                payment.status = "processing"
                payment.payment_data = data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
                await session.commit()

                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                try:
                    bot = Bot(token=config.bot.token)
                    await bot.send_message(
                        order.user_id,
                        "‚è≥ –í–∞—à –ø–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.\n"
                        "–ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å, –∫–æ–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.",
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}"
                    )
                finally:
                    await bot.session.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            return web.json_response({"status": "success"})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞ Monobank: {e}")
        return web.json_response({"status": "error", "message": str(e)}, status=500)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
def setup_webhook_routes(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤"""
    config = Config.load()

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Monobank –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if hasattr(config, "monobank") and config.monobank.webhook_url:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
        webhook_url = config.monobank.webhook_url
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
        if "/" in webhook_url:
            webhook_path = webhook_url.split("/")[-1]
        else:
            webhook_path = webhook_url

        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if not webhook_path.startswith("/"):
            webhook_path = f"/{webhook_path}"

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞
        app.router.add_post(webhook_path, monobank_webhook_handler)
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–µ–±—Ö—É–∫ Monobank –ø–æ –ø—É—Ç–∏: {webhook_path}")

    return app


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤–µ–±—Ö—É–∫–æ–≤
async def start_webhook_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤"""
    config = Config.load()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –≤–µ–±—Ö—É–∫ Monobank
    if not hasattr(config, "monobank") or not config.monobank.webhook_url:
        logger.info("–í–µ–±—Ö—É–∫ Monobank –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
        return None

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
    app = setup_webhook_routes(app)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    webhook_port = (
        config.monobank.webhook_port
        if hasattr(config.monobank, "webhook_port")
        else 8080
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–π—Ç
    site = web.TCPSite(runner, "0.0.0.0", webhook_port)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {webhook_port}")

    return runner
