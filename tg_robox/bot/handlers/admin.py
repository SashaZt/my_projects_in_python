# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python
import csv
from datetime import datetime

# SQLAlchemy
from sqlalchemy import func, case
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload

# Aiogram
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from config.config import Config
from config.logger import logger
from db.models import CardCode, Order, User, Review
from keyboards import inline as ikb
router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    main_menu = State()
    add_code_menu = State()
    add_code_manually = State()
    add_code_value = State()
    add_code_file = State()
    add_code_confirm = State()
    reviews_menu = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    config = Config.load()
    # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"Admin check: user_id={user_id}, admin_ids={config.bot.admin_ids}")
    return user_id in config.bot.admin_ids


# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("admin"))
async def admin_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if not is_admin(message.from_user.id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await message.answer(
        "üõ† <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=ikb.get_admin_main_keyboard(),
    )
    await state.set_state(AdminStates.main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –∫–æ–¥"
@router.callback_query(AdminStates.main_menu, F.data == "admin_add_code")
async def add_code_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤:",
        reply_markup=ikb.get_admin_add_code_keyboard(),
    )
    await state.set_state(AdminStates.add_code_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
@router.callback_query(AdminStates.add_code_menu, F.data == "add_code_manually")
async def add_code_manually(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–∏–Ω–∞–ª –∫–∞—Ä—Ç—ã
    await callback.message.edit_text(
        "üíµ <b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º—ñ–Ω–∞–ª –∫–∞—Ä—Ç–∫–∏</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º—ñ–Ω–∞–ª –∫–∞—Ä—Ç–∫–∏ –≤ –¥–æ–ª–∞—Ä–∞—Ö ($), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10, 25, 50",
        reply_markup=ikb.get_back_to_admin_keyboard(),
    )
    await state.set_state(AdminStates.add_code_value)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ –∫–∞—Ä—Ç—ã
@router.message(AdminStates.add_code_value)
async def process_code_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        value = float(message.text.strip().replace("$", ""))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–∏–Ω–∞–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        if value <= 0:
            await message.answer(
                "‚ùå –ù–æ–º—ñ–Ω–∞–ª –∫–∞—Ä—Ç–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª:",
                reply_markup=ikb.get_back_to_admin_keyboard(),
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–∏–Ω–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(card_value=value)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –∫–∞—Ä—Ç—ã
        await message.answer(
            f"üîë <b>–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏ –Ω–æ–º—ñ–Ω–∞–ª–æ–º ${value}</b>\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ XXX-XXX-XXX:",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )
        await state.set_state(AdminStates.add_code_manually)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º—ñ–Ω–∞–ª—É. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10, 25, 50",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–∞—Ä—Ç—ã
@router.message(AdminStates.add_code_manually)
async def process_code_manually(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–∞—Ä—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    card_value = data.get("card_value")

    # –ü–æ–ª—É—á–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ –∫–∞—Ä—Ç—ã
    card_code = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not card_code:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏.", reply_markup=ikb.get_back_to_admin_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞
    stmt = select(CardCode).where(CardCode.code == card_code)
    result = await session.execute(stmt)
    existing_code = result.scalar_one_or_none()

    if existing_code:
        await message.answer(
            "‚ùå –¢–∞–∫–∏–π –∫–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    new_code = CardCode(
        card_value=card_value,
        code=card_code,
        is_used=False,
        added_by=message.from_user.id,
        added_at=datetime.now(),
    )

    session.add(new_code)
    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await message.answer(
        f"‚úÖ –ö–æ–¥ –∫–∞—Ä—Ç–∫–∏ –Ω–æ–º—ñ–Ω–∞–ª–æ–º ${card_value} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π!\n\n"
        f"–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω –∫–æ–¥?",
        reply_markup=ikb.get_admin_add_more_codes_keyboard(),
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤
    await state.set_state(AdminStates.add_code_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
@router.callback_query(AdminStates.add_code_menu, F.data == "add_code_file")
async def upload_code_file(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏"""
    await callback.message.edit_text(
        "üìÅ <b>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—ñ–≤ –∑ —Ñ–∞–π–ª—É</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å CSV-—Ñ–∞–π–ª –∑ –∫–æ–¥–∞–º–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "<code>card_value,code</code>\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥ –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—É:\n"
        "<code>10,ABC-DEF-GHI\n"
        "10,JKL-MNO-PQR\n"
        "25,STU-VWX-YZ1</code>",
        reply_markup=ikb.get_back_to_admin_keyboard(),
    )
    await state.set_state(AdminStates.add_code_file)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏
@router.message(AdminStates.add_code_file, F.document)
async def process_code_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ CSV
    file_name = message.document.file_name
    if not file_name.lower().endswith(".csv"):
        await message.answer(
            "‚ùå –§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV.",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        file_bytes = await message.bot.download(message.document)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
        file_content = file_bytes.read().decode("utf-8")

        # –ü–∞—Ä—Å–∏–º CSV –∏–∑ —Å—Ç—Ä–æ–∫–∏
        codes_data = []
        csv_reader = csv.reader(file_content.splitlines())
        for row in csv_reader:
            if len(row) >= 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 –∑–Ω–∞—á–µ–Ω–∏—è
                try:
                    card_value = float(row[0].strip())
                    code = row[1].strip()
                    codes_data.append((card_value, code))
                except ValueError:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –Ω–æ–º–∏–Ω–∞–ª–æ–º

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(codes_data=codes_data)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"üìä <b>–ó–Ω–∞–π–¥–µ–Ω–æ {len(codes_data)} –∫–æ–¥—ñ–≤ –≤ —Ñ–∞–π–ª—ñ</b>\n\n"
            f"–ù–æ–º—ñ–Ω–∞–ª–∏ –∫–∞—Ä—Ç:\n"
            + "\n".join(
                [
                    f"${value}: {sum(1 for v, _ in codes_data if v == value)} —à—Ç."
                    for value in set(value for value, _ in codes_data)
                ]
            )
            + "\n\n–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ü—ñ –∫–æ–¥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö?",
            reply_markup=ikb.get_admin_confirm_codes_keyboard(),
        )
        await state.set_state(AdminStates.add_code_confirm)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏: {e}")
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
@router.callback_query(AdminStates.add_code_confirm, F.data == "confirm_add_codes")
async def confirm_add_codes(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    codes_data = data.get("codes_data", [])

    if not codes_data:
        await callback.message.edit_text(
            "‚ùå –ù–µ–º–∞—î –∫–æ–¥—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )
        return

    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    added_count = 0
    duplicates_count = 0

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for card_value, code in codes_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞
        stmt = select(CardCode).where(CardCode.code == code)
        result = await session.execute(stmt)
        existing_code = result.scalar_one_or_none()

        if existing_code:
            duplicates_count += 1
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        new_code = CardCode(
            card_value=card_value,
            code=code,
            is_used=False,
            added_by=callback.from_user.id,
            added_at=datetime.now(),
        )

        session.add(new_code)
        added_count += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await callback.message.edit_text(
        f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤</b>\n\n"
        f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: {added_count} –∫–æ–¥—ñ–≤\n"
        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {duplicates_count} –∫–æ–¥—ñ–≤\n\n"
        f"–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ?",
        reply_markup=ikb.get_back_to_admin_keyboard(),
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    await state.set_state(AdminStates.main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤
@router.callback_query(F.data == "admin_back")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        "üõ† <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=ikb.get_admin_main_keyboard(),
    )
    await state.set_state(AdminStates.main_menu)


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ —Ñ–∞–π–ª /handlers/admin.py


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.callback_query(F.data == "admin_stats")
async def admin_stats(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    orders_count = await session.scalar(select(func.count()).select_from(Order))
    users_count = await session.scalar(select(func.count()).select_from(User))
    cards_total = await session.scalar(select(func.count()).select_from(CardCode))
    cards_used = await session.scalar(
        select(func.count()).select_from(CardCode).where(CardCode.is_used == True)
    )

    # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    total_payments = await session.scalar(
        select(func.coalesce(func.sum(Order.price), 0)).where(
            Order.status == "completed"
        )
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}\n"
        f"üõç –ó–∞–º–æ–≤–ª–µ–Ω—å: {orders_count}\n"
        f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –æ–ø–ª–∞—Ç: {total_payments:.2f}‚Ç¥\n\n"
        f"üéÆ –ö–∞—Ä—Ç–∫–∏:\n"
        f"‚ûñ –í—Å—å–æ–≥–æ: {cards_total}\n"
        f"‚ûñ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {cards_used}\n"
        f"‚ûñ –î–æ—Å—Ç—É–ø–Ω–æ: {cards_total - cards_used}\n"
    )

    await callback.message.edit_text(
        stats_message, reply_markup=ikb.get_back_to_admin_keyboard()
    )
    await state.set_state(AdminStates.main_menu)
    await callback.answer()


@router.message(F.text == "üóù –ó–∞–ª–∏—à–æ–∫ –∫–ª—é—á—ñ–≤")
async def rest_keys_button(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫–ª—é—á–µ–π –∏–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º
    stmt = (
        select(CardCode)
        .where(CardCode.is_used == False)  # –¢–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        .order_by(CardCode.card_value, CardCode.added_at.desc())
    )
    
    result = await session.execute(stmt)
    available_codes = result.scalars().all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–¥—ã –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º
    codes_by_value = {}
    for code in available_codes:
        value = float(code.card_value)
        if value not in codes_by_value:
            codes_by_value[value] = []
        codes_by_value[value].append(code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üóù <b>–ó–∞–ª–∏—à–æ–∫ –∫–ª—é—á—ñ–≤</b>\n\n"
    
    if codes_by_value:
        total_available = 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º
        for card_value in sorted(codes_by_value.keys()):
            codes_list = codes_by_value[card_value]
            total_available += len(codes_list)
            
            message_text += f"üíµ <b>${card_value:.0f}</b>: <b>{len(codes_list)}</b> –¥–æ—Å—Ç—É–ø–Ω–æ\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–∏ –∫–æ–¥—ã
            for code in codes_list:
                message_text += f"<code>{code.code}</code>\n"
            
            message_text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏
        
        message_text += f"üìä <b>–ó–∞–≥–∞–ª–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available} –∫–ª—é—á—ñ–≤</b>\n"
    else:
        message_text += "‚ùå –ö–ª—é—á—ñ–≤ –≤ –±–∞–∑—ñ –Ω–µ–º–∞—î\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(message_text) > 4000:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        await send_long_message(message, message_text)
    else:
        await message.answer(message_text)


    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    keyboard = [
        [
            InlineKeyboardButton(
                text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", 
                callback_data="rest_keys"  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º callback_data
            )
        ],
        [
            InlineKeyboardButton(
                text="üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∫–ª—é—á—ñ–≤", 
                callback_data="admin_keys_detail"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", 
                callback_data="admin_back"
            )
        ]
    ]
    
    await callback.message.edit_text(
        message_text, 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(AdminStates.main_menu)
    await callback.answer()

## –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º callback –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ
@router.callback_query(F.data == "admin_keys_detail")
async def admin_keys_detail(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª—é—á–∞–º —Å –ø–æ–∫–∞–∑–æ–º —Å–∞–º–∏—Ö –∫–æ–¥–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞)
    stmt = (
        select(CardCode)
        .where(CardCode.is_used == False)
        .order_by(CardCode.card_value, CardCode.added_at.desc())
    )
    
    result = await session.execute(stmt)
    available_codes = result.scalars().all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º
    codes_by_value = {}
    for code in available_codes:
        value = float(code.card_value)
        if value not in codes_by_value:
            codes_by_value[value] = []
        codes_by_value[value].append(code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üóù <b>–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–ª—é—á–∞—Ö</b>\n\n"
    
    if codes_by_value:
        for card_value in sorted(codes_by_value.keys()):
            codes_list = codes_by_value[card_value]
            message_text += f"üíµ <b>${card_value:.0f} ({len(codes_list)} —à—Ç.):</b>\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞
            for i, code in enumerate(codes_list[:3]):
                added_date = code.added_at.strftime("%d.%m") if code.added_at else "–ù–µ–≤—ñ–¥–æ–º–æ"
                message_text += f"  üîë <code>{code.code}</code> ({added_date})\n"
            
            # –ï—Å–ª–∏ –∫–æ–¥–æ–≤ –±–æ–ª—å—à–µ 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            if len(codes_list) > 3:
                message_text += f"  ... —Ç–∞ —â–µ {len(codes_list) - 3} –∫–æ–¥—ñ–≤\n"
            
            message_text += "\n"
    else:
        message_text += "‚ùå –î–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –Ω–µ–º–∞—î\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞—Ö
    stmt_used = (
        select(CardCode)
        .where(CardCode.is_used == True)
        .order_by(CardCode.used_at.desc())
        .limit(5)
    )
    
    result_used = await session.execute(stmt_used)
    used_codes = result_used.scalars().all()
    
    if used_codes:
        message_text += "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∫–ª—é—á—ñ:</b>\n"
        for code in used_codes:
            used_date = code.used_at.strftime("%d.%m %H:%M") if code.used_at else "–ù–µ–≤—ñ–¥–æ–º–æ"
            order_info = f" (#{code.order_id})" if code.order_id else ""
            message_text += f"  üîë ${code.card_value} - {used_date}{order_info}\n"
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –¥–æ –∫–ª—é—á—ñ–≤", 
                callback_data="rest_keys"  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º callback_data
            )
        ]
    ]
    
    await callback.message.edit_text(
        message_text, 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


# –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.message(F.text == "üóù –ó–∞–ª–∏—à–æ–∫ –∫–ª—é—á—ñ–≤")
async def users_button(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if not is_admin(message.from_user.id):
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    await rest_keys(
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        type('MockCallback', (), {
            'message': message,
            'answer': lambda: None
        })(),
        state,
        session
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–æ–∑—ñ–≥—Ä–∞—à / –ë–æ–Ω—É—Å–∏"
@router.callback_query(F.data == "admin_promos")
async def admin_promos(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–æ–∑—ñ–≥—Ä–∞—à / –ë–æ–Ω—É—Å–∏"""
    await callback.message.edit_text(
        "üéÅ <b>–†–æ–∑—ñ–≥—Ä–∞—à / –ë–æ–Ω—É—Å–∏</b>\n\n"
        "–¶–µ–π —Ä–æ–∑–¥—ñ–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n"
        "–°–∫–æ—Ä–æ —Ç—É—Ç –∑'—è–≤–∏—Ç—å—Å—è –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∏ —Ç–∞ –∞–∫—Ü—ñ—ó.",
        reply_markup=ikb.get_back_to_admin_keyboard(),
    )
    await state.set_state(AdminStates.main_menu)
    await callback.answer()


# –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –≤ get_admin_main_keyboard
def get_admin_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–¥", callback_data="admin_add_code")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üóù –ó–∞–ª–∏—à–æ–∫ –∫–ª—é—á—ñ–≤", callback_data="rest_keys")],
        [
            InlineKeyboardButton(
                text="üéÅ –†–æ–∑—ñ–≥—Ä–∞—à / –ë–æ–Ω—É—Å–∏", callback_data="admin_promos"
            )
        ],
        [
            InlineKeyboardButton(text="üìù –í—ñ–¥–≥—É–∫–∏", callback_data="admin_reviews")
        ],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton(text="üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="back_to_menu")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(AdminStates.main_menu, F.data == "admin_reviews")
async def admin_reviews_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"""

    keyboard = [
        [
            InlineKeyboardButton(
                text="üìù –û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏", callback_data="admin_last_reviews"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è≥ –û—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending_reviews"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –°—Ö–≤–∞–ª–µ–Ω—ñ –≤—ñ–¥–≥—É–∫–∏", callback_data="admin_approved_reviews"
            )
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
    ]

    await callback.message.edit_text(
        "üìù <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–≥—É–∫–∞–º–∏</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
    )


@router.callback_query(F.data == "admin_pending_reviews")
async def admin_pending_reviews(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    stmt = (
        select(Review)
        .options(joinedload(Review.user), joinedload(Review.order))
        .where(Review.is_approved == False)
        .order_by(Review.created_at.desc())
        .limit(5)
    )
    result = await session.execute(stmt)
    reviews = result.scalars().all()

    if not reviews:
        await callback.message.edit_text(
            "‚è≥ <b>–í—ñ–¥–≥—É–∫–∏, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó</b>\n\n"
            "–ù–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(offset=0, total_reviews=len(reviews))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
    review = reviews[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    approve_button = InlineKeyboardButton(
        text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_review_{review.review_id}"
    )
    reject_button = InlineKeyboardButton(
        text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_review_{review.review_id}"
    )
    next_button = InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="next_review")
    back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_reviews")

    keyboard = [[approve_button, reject_button], [next_button], [back_button]]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤
    user_name = review.user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    review_text = (
        f"‚è≥ <b>–í—ñ–¥–≥—É–∫ #{review.review_id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó</b>\n\n"
        f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user_name} (ID: {review.user_id})\n"
        f"üõç <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> #{review.order_id}\n"
        f"‚≠ê <b>–û—Ü—ñ–Ω–∫–∞:</b> {'‚≠ê' * review.rating}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {review.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b>\n{review.comment}"
    )

    await callback.message.edit_text(
        review_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data.startswith("reject_review_"))
async def reject_review(callback: CallbackQuery, session: AsyncSession):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    review_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤ –∏–∑ –ë–î
    stmt = select(Review).where(Review.review_id == review_id)
    result = await session.execute(stmt)
    review = result.scalar_one_or_none()

    if not review:
        await callback.answer("–í—ñ–¥–≥—É–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
    await session.delete(review)
    await session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await callback.answer("–í—ñ–¥–≥—É–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —ñ –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤
    await admin_pending_reviews(callback, session, await callback.bot.get_current())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
@router.callback_query(F.data == "admin_last_reviews")
async def admin_last_reviews(callback: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤
    stmt = (
        select(Review)
        .options(joinedload(Review.user))
        .order_by(Review.created_at.desc())
        .limit(10)
    )
    result = await session.execute(stmt)
    reviews = result.scalars().all()

    if not reviews:
        await callback.message.edit_text(
            "üìù <b>–û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏</b>\n\n" "–í—ñ–¥–≥—É–∫—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.",
            reply_markup=ikb.get_back_to_admin_keyboard(),
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
    reviews_text = "üìù <b>–û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏</b>\n\n"

    for review in reviews:
        user_name = review.user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        reviews_text += (
            f"üë§ {user_name} (ID: {review.user_id})\n"
            f"‚≠ê {'‚≠ê' * review.rating}\n"
            f"üí¨ {review.comment}\n"
            f"üìÖ {review.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )

    await callback.message.edit_text(
        reviews_text, reply_markup=ikb.get_back_to_admin_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –æ—Ü–µ–Ω–∫–∞–º
@router.callback_query(F.data == "admin_rating_reviews")
async def admin_rating_reviews(callback: CallbackQuery, session: AsyncSession):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –æ—Ü–µ–Ω–∫–∞–º"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ü–µ–Ω–∫–∞–º
    stats = []
    for rating in range(1, 6):
        count = await session.scalar(
            select(func.count()).select_from(Review).where(Review.rating == rating)
        )
        stats.append((rating, count))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = "‚≠ê <b>–í—ñ–¥–≥—É–∫–∏ –∑–∞ –æ—Ü—ñ–Ω–∫–∞–º–∏</b>\n\n"

    for rating, count in stats:
        stats_text += f"{'‚≠ê' * rating}: {count} –≤—ñ–¥–≥—É–∫—ñ–≤\n"

    await callback.message.edit_text(
        stats_text, reply_markup=ikb.get_back_to_admin_keyboard()
    )
