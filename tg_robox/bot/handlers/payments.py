from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
    SuccessfulPayment,
)
from config.logger import logger
from db.models import CardCode, Order, Payment, RobloxProduct, User
from keyboards import inline as ikb
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from utils.monobank import MonobankPayment
from utils.payment_logging import log_payment_event

router = Router()


@router.pre_checkout_query()
async def pre_checkout_query(
    pre_checkout_query: PreCheckoutQuery, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ payload
        payload = pre_checkout_query.invoice_payload
        parts = payload.split("_")
        order_id = int(parts[1]) if len(parts) > 1 else None
        user_id = pre_checkout_query.from_user.id

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        log_payment_event(
            event_type="pre_checkout",
            user_id=user_id,
            order_id=order_id,
            payment_data={
                "invoice_payload": payload,
                "total_amount": pre_checkout_query.total_amount,
                "currency": pre_checkout_query.currency,
            },
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
        stmt = select(Order).where(Order.order_id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()

        if not order:
            log_payment_event(
                event_type="pre_checkout_order_not_found",
                user_id=user_id,
                order_id=order_id,
            )
            await pre_checkout_query.answer(
                ok=False, error_message="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ "created"
        if order.status != "created":
            log_payment_event(
                event_type="pre_checkout_invalid_order_status",
                user_id=user_id,
                order_id=order_id,
                payment_data={"status": order.status},
            )
            await pre_checkout_query.answer(
                ok=False, error_message="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–¥–æ–≤
        stmt = select(RobloxProduct).where(RobloxProduct.product_id == order.product_id)
        result = await session.execute(stmt)
        product = result.scalar_one_or_none()

        if not product:
            log_payment_event(
                event_type="pre_checkout_product_not_found",
                user_id=user_id,
                order_id=order_id,
                payment_data={"product_id": order.product_id},
            )
            await pre_checkout_query.answer(
                ok=False, error_message="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
            )
            return

        stmt = (
            select(CardCode)
            .where(CardCode.card_value == product.card_value, CardCode.is_used == False)
            .limit(product.card_count)
        )
        result = await session.execute(stmt)
        available_codes = result.scalars().all()

        if len(available_codes) < product.card_count:
            log_payment_event(
                event_type="pre_checkout_not_enough_codes",
                user_id=user_id,
                order_id=order_id,
                payment_data={
                    "available": len(available_codes),
                    "required": product.card_count,
                },
            )
            await pre_checkout_query.answer(
                ok=False,
                error_message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥—ñ ({len(available_codes)}/{product.card_count})!",
            )
            return

        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
        log_payment_event(
            event_type="pre_checkout_success", user_id=user_id, order_id=order_id
        )
        await pre_checkout_query.answer(ok=True)

    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")
        log_payment_event(
            event_type="pre_checkout_error",
            user_id=pre_checkout_query.from_user.id,
            order_id=order_id if "order_id" in locals() else None,
            payment_data={"error": error_msg, "error_type": type(e).__name__},
        )
        await pre_checkout_query.answer(
            ok=False, error_message="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )


@router.message(F.successful_payment)
async def successful_payment(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_info = message.successful_payment
        payload = payment_info.invoice_payload
        parts = payload.split("_")
        order_id = int(parts[1]) if len(parts) > 1 else None
        user_id = message.from_user.id

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
        log_payment_event(
            event_type="payment_success",
            user_id=user_id,
            order_id=order_id,
            payment_data={
                "currency": payment_info.currency,
                "total_amount": payment_info.total_amount,
                "invoice_payload": payload,
                "telegram_payment_charge_id": payment_info.telegram_payment_charge_id,
                "provider_payment_charge_id": payment_info.provider_payment_charge_id,
            },
        )

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        stmt = select(Order).where(Order.order_id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()

        if not order:
            log_payment_event(
                event_type="payment_success_order_not_found",
                user_id=user_id,
                order_id=order_id,
            )
            await message.answer(
                "‚ùå –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ, –∞–ª–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        stmt = select(RobloxProduct).where(RobloxProduct.product_id == order.product_id)
        result = await session.execute(stmt)
        product = result.scalar_one_or_none()

        if not product:
            log_payment_event(
                event_type="payment_success_product_not_found",
                user_id=user_id,
                order_id=order_id,
                payment_data={"product_id": order.product_id},
            )
            await message.answer(
                "‚ùå –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤–∏–¥–∞—á–µ—é –∫–æ–¥—É.\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞
        order.status = "paid"

        stmt = select(Payment).where(Payment.order_id == order.order_id)
        result = await session.execute(stmt)
        payment = result.scalar_one_or_none()

        if payment:
            payment.status = "success"
            payment.payment_date = datetime.now()
            payment.transaction_id = payment_info.telegram_payment_charge_id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ –∫–∞—Ä—Ç
        stmt = (
            select(CardCode)
            .where(CardCode.card_value == product.card_value, CardCode.is_used == False)
            .limit(product.card_count)
        )
        result = await session.execute(stmt)
        card_codes = result.scalars().all()

        log_payment_event(
            event_type="payment_codes_found",
            user_id=user_id,
            order_id=order_id,
            payment_data={
                "codes_found": len(card_codes),
                "codes_required": product.card_count,
            },
        )

        if len(card_codes) < product.card_count:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}!")
            log_payment_event(
                event_type="payment_success_not_enough_codes",
                user_id=user_id,
                order_id=order_id,
                payment_data={
                    "available": len(card_codes),
                    "required": product.card_count,
                },
            )
            await message.answer(
                "‚ùå –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤–∏–¥–∞—á–µ—é –∫–æ–¥—É.\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            )
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥—ã –∫ –∑–∞–∫–∞–∑—É
        codes_text = ""
        issued_codes = []
        for card_code in card_codes:
            card_code.is_used = True
            card_code.order_id = order.order_id
            card_code.used_at = datetime.now()
            order.cards_issued += 1
            codes_text += f"üîë <code>{card_code.code}</code>\n"
            issued_codes.append(card_code.code)

        # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–¥—ã –≤—ã–¥–∞–Ω—ã, –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        if order.cards_issued >= order.cards_required:
            order.status = "completed"
            order.completed_at = datetime.now()

        await session.commit()

        log_payment_event(
            event_type="payment_codes_issued",
            user_id=user_id,
            order_id=order_id,
            payment_data={
                "codes_issued": order.cards_issued,
                "order_status": order.status,
            },
        )

        if "premium" not in product.name.lower():
            # –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç—ã
            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üéÆ {product.name}\n"
                f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
                f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n\n"
                f"<b>–í–∞—à—ñ –∫–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:</b>\n"
                f"{codes_text}\n\n"
                "–û—Å—å –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥.\n\n"
                "https://youtu.be/6r9qPBOOzHk\n\n"
                "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –≥—Ä–∏ http://roblox.com/redeem\n"
                "2. –£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–æ–º—É –±–∞–∂–∞—î—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥.\n"
                "3. –£–≤–µ–¥—ñ—Ç—å –∫–æ–¥.\n"
                "4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ—é.\n"
                "5. –û–±–º—ñ–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ –ø–∞–∫–µ—Ç –†–æ–±—É–∫—Å—ñ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ‚ùóÔ∏è\n\n"
                "–©–æ–± –æ–±–º—ñ–Ω—è—Ç–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ –†–æ–±—É–∫—Å–∏ üí∞\n"
                '–ê–∫—Ç–∏–≤—É–π—Ç–µ –∫–æ–¥ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Get Robux"\n\n'
                "–ö–æ–¥ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç http://roblox.com/redeem ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è"
            )
        else:
            # –ü—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç—ã
            await message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üéÆ {product.name}\n"
                f"üí∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å Robux: {product.robux_amount}\n"
                f"üíµ –ù–æ–º—ñ–Ω–∞–ª: ${product.card_value} (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {product.card_count})\n\n"
                f"<b>–í–∞—à—ñ –∫–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:</b>\n"
                f"{codes_text}\n\n"
                "–ü–ï–†–ï–î –ê–ö–¢–ò–í–ê–¶–Ü–Ñ–Æ –£–í–ê–ñ–ù–û –ü–û–î–ò–í–Ü–¢–¨–°–Ø –Ü–ù–°–¢–†–£–ö–¶–Ü–Æ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n"
                "–û—Å—å –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥:\n\n"
                "https://youtu.be/BtiaZTegCSI\n\n"
                "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç –≥—Ä–∏ http://roblox.com/redeem\n"
                "2. –£–≤—ñ–π–¥—ñ—Ç—å –¥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–æ–º—É –±–∞–∂–∞—î—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–æ–¥ —Ç–∞ –ø—ñ–¥–ø–∏—Å–∫—É.\n"
                "3. –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n"
                "https://www.roblox.com/upgrades/redeem?ap=481&pm=redeemCard&selectedUpsellProductId=0\n"
                '4. –í—Å—Ç–∞–≤—Ç–µ –Ω–∞–¥–∞–Ω–∏–π –∫–æ–¥ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å **"Redeem"**\n'
                "5. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ **Subscribe!**\n"
                "6. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —Å—é–¥–∏: https://www.roblox.com/my/account#!/subscriptions\n"
                "7. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É\n"
                "8. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Cancel Renewal ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è"
            )
        await message.answer(
            "–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ë—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ, —è–∫—â–æ –≤–∏ –∑–∞–ª–∏—à–∏—Ç–µ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å.",
            reply_markup=ikb.get_review_keyboard(order.order_id),
        )
    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")
        log_payment_event(
            event_type="payment_success_processing_error",
            user_id=message.from_user.id,
            order_id=order_id if "order_id" in locals() else None,
            payment_data={"error": error_msg, "error_type": type(e).__name__},
        )
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—É.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑ –Ω–æ–º–µ—Ä–æ–º –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
        )


@router.message(Command("cancel_payment"))
async def cancel_payment(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_data = await state.get_data()
        order_id = state_data.get("order_id")

        if not order_id:
            await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        stmt = select(Order).where(Order.order_id == order_id)
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()

        if not order:
            await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        if order.status != "created":
            await message.answer(
                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∞—î —Å—Ç–∞—Ç—É—Å '{order.status}'."
            )
            return

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        order.status = "cancelled"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        stmt = select(Payment).where(Payment.order_id == order.order_id)
        result = await session.execute(stmt)
        payment = result.scalar_one_or_none()

        if payment:
            payment.status = "cancelled"

        await session.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞
        log_payment_event(
            event_type="payment_cancelled",
            user_id=message.from_user.id,
            order_id=order_id,
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        await message.answer(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")
        log_payment_event(
            event_type="payment_cancel_error",
            user_id=message.from_user.id,
            order_id=order_id if "order_id" in locals() else None,
            payment_data={"error": error_msg, "error_type": type(e).__name__},
        )
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")


# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ Monobank
async def create_monobank_payment(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Monobank"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    order_id = data.get("order_id")
    user_id = callback.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    log_payment_event(
        event_type="monobank_payment_started",
        user_id=user_id,
        order_id=order_id,
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    stmt = select(Order).where(Order.order_id == order_id)
    result = await session.execute(stmt)
    order = result.scalar_one_or_none()

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if order.status != "created":
        await callback.answer(
            "–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω.", show_alert=True
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    stmt = select(RobloxProduct).where(RobloxProduct.product_id == order.product_id)
    result = await session.execute(stmt)
    product = result.scalar_one_or_none()

    config = Config.load()
    bot_username = (await callback.bot.get_me()).username

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Monobank API
    monobank = MonobankPayment()

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    redirect_url = f"https://t.me/{bot_username}?start=order_{order.order_id}"

    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ Monobank (—Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    amount_kopecks = int(order.total_price * 100)
    description = f"–ü–æ–∫—É–ø–∫–∞ {product.name} ({product.robux_amount} Robux)"

    # URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    webhook_url = config.monobank.webhook_url if hasattr(config, "monobank") else None

    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    invoice_result = await monobank.create_invoice(
        amount=amount_kopecks,
        order_id=order.order_id,
        redirect_url=redirect_url,
        webhook_url=webhook_url,
        description=description,
    )

    if not invoice_result:
        log_payment_event(
            event_type="monobank_invoice_failed",
            user_id=user_id,
            order_id=order.order_id,
        )
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            reply_markup=ikb.get_back_to_products_keyboard(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    invoice_id = invoice_result.get("invoiceId")
    payment_url = invoice_result.get("pageUrl")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    stmt = select(Payment).where(Payment.order_id == order.order_id)
    result = await session.execute(stmt)
    payment = result.scalar_one_or_none()

    if payment:
        payment.portmone_order_id = (
            invoice_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –ø–æ–ª–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ
        )
        payment.payment_url = payment_url
        payment.payment_data = invoice_result
        await session.commit()

    log_payment_event(
        event_type="monobank_invoice_created",
        user_id=user_id,
        order_id=order.order_id,
        payment_data={"invoice_id": invoice_id, "payment_url": payment_url},
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")],
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await callback.message.edit_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Monobank</b>\n\n"
        f"–ó–∞–∫–∞–∑: #{order.order_id}\n"
        f"–°—É–º–º–∞: {order.total_price} –≥—Ä–Ω\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –∫–æ–¥.",
        reply_markup=keyboard,
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await state.set_state(BuyCardStates.waiting_payment)
