
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
import os
import sys
from pathlib import Path
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import reply as kb
from keyboards import inline as ikb
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import func

from sqlalchemy.orm import joinedload
from db.models import Order, Payment, CardCode, RobloxProduct
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
ROOT_DIR = Path(__file__).parent.parent.absolute()
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

from config.logger import logger

router = Router()


class PurchasesStates(StatesGroup):
    viewing = State()


@router.message(F.text == "üõç –ú–æ—ó –ø–æ–∫—É–ø–∫–∏")
async def my_purchases(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—ó –ø–æ–∫—É–ø–∫–∏'"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
    photo_path = "assets/images/–ú–æ—ó –ø–æ–∫—É–ø–∫–∏.png"
    
    user_id = message.from_user.id
    per_page = 5

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–ê–í–ï–†–®–ï–ù–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_orders = await session.scalar(
        select(func.count())
        .select_from(Order)
        .where(Order.user_id == user_id, Order.status == "completed")
    )

    if total_orders == 0:
        caption = (
            "üõç <b>–í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫.\n\n"
            "–©–æ–± –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ –≤–∏–±–µ—Ä—ñ—Ç—å '–ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É'."
        )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ
            if os.path.exists(photo_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç
                photo = FSInputFile(photo_path)
                await message.answer_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=kb.get_main_menu_keyboard(),
                )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
                await message.answer(
                    caption,
                    reply_markup=kb.get_main_menu_keyboard(),
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                caption,
                reply_markup=kb.get_main_menu_keyboard(),
            )
        return
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ç–æ
    await show_purchases_page(message, session, state, 0, with_photo=True)
    await state.set_state(PurchasesStates.viewing)

@router.callback_query(PurchasesStates.viewing, F.data.startswith("purchases_page_"))
async def process_purchases_page(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split("_")[-1])

    await show_purchases_page(callback.message, session, state, page, is_callback=True)
    await callback.answer()


async def show_purchases_page(
    message,
    session: AsyncSession,
    state: FSMContext,
    page: int,
    is_callback: bool = False,
    with_photo: bool = False,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.chat.id if is_callback else message.from_user.id
    per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–ê–í–ï–†–®–ï–ù–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_orders = await session.scalar(
        select(func.count())
        .select_from(Order)
        .where(Order.user_id == user_id, Order.status == "completed")
    )

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    max_page = (total_orders - 1) // per_page

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if page < 0:
        page = 0
    elif page > max_page:
        page = max_page

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_page=page)

    # –ü–æ–ª—É—á–∞–µ–º –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    stmt = (
        select(Order)
        .options(
            joinedload(Order.product),
            joinedload(Order.payment),
            joinedload(Order.card_codes),
        )
        .where(
            Order.user_id == user_id,
            Order.status == "completed",
        )
        .order_by(Order.created_at.desc())
        .limit(per_page)
        .offset(page * per_page)
    )

    result = await session.execute(stmt)
    orders = result.unique().scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
    purchases_text = (
        f"üõç <b>–í–∞—à—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –ø–æ–∫—É–ø–∫–∏</b> (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{max_page+1})\n\n"
    )

    for order in orders:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        date_str = order.created_at.strftime("%d.%m.%Y %H:%M")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        purchases_text += f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_id}</b>\n" f"üìÖ {date_str}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if order.product:
            purchases_text += (
                f"üéÆ {order.product.name}\n"
                f"üí∞ Robux: {order.product.robux_amount}\n"
                f"üíµ –¶—ñ–Ω–∞: {order.total_price}‚Ç¥\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥—ã –∫–∞—Ä—Ç (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å)
        if order.card_codes:
            purchases_text += f"üîë –ö–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:\n"
            for code in order.card_codes:
                purchases_text += f"<code>{code.code}</code>\n"

        purchases_text += "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"purchases_page_{page-1}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page < max_page:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"purchases_page_{page+1}"
            )
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append(
        [InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    )

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
    if with_photo and page == 0:
        photo_path = "assets/images/–ú–æ—ñÃà –ø–æ–∫—É–ø–∫–∏.png"
        
        try:
            if os.path.exists(photo_path):
                photo = FSInputFile(photo_path)
                await message.answer_photo(
                    photo=photo,
                    caption=purchases_text,
                    reply_markup=reply_markup,
                )
            else:
                logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
                await message.answer(purchases_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer(purchases_text, reply_markup=reply_markup)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ callback'–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        if is_callback:
            try:
                await message.edit_text(purchases_text, reply_markup=reply_markup)
            except Exception as e:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(purchases_text, reply_markup=reply_markup)
        else:
            await message.answer(purchases_text, reply_markup=reply_markup)

# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —É –≤–∞—Å –µ–≥–æ –µ—â–µ –Ω–µ—Ç
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=kb.get_main_menu_keyboard(),
    )
    await state.clear()
    await callback.answer()
