# from aiogram import Router, F
# from aiogram.types import Message
# from keyboards import reply as kb
# from sqlalchemy.ext.asyncio import AsyncSession
# from sqlalchemy.future import select
# from sqlalchemy.orm import joinedload
# from db.models import Order, Payment, CardCode, RobloxProduct

# router = Router()


# @router.message(F.text == "üõç –ú–æ—ó –ø–æ–∫—É–ø–∫–∏")
# async def my_purchases(message: Message, session: AsyncSession):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—ó –ø–æ–∫—É–ø–∫–∏'"""
#     user_id = message.from_user.id

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     stmt = (
#         select(Order)
#         .options(
#             joinedload(Order.product),
#             joinedload(Order.payment),
#             joinedload(Order.card_codes),
#         )
#         .where(Order.user_id == user_id)
#         .order_by(Order.created_at.desc())
#     )

#     result = await session.execute(stmt)
#     orders = result.unique().scalars().all()

#     if not orders:
#         await message.answer(
#             "üõç <b>–í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
#             "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ–∫—É–ø–æ–∫.\n\n"
#             "–©–æ–± –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ –≤–∏–±–µ—Ä—ñ—Ç—å '–ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É'.",
#             reply_markup=kb.get_main_menu_keyboard(),
#         )
#         return

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
#     purchases_text = "üõç <b>–í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏</b>\n\n"

#     for order in orders:
#         status_emoji = {
#             "created": "üïí",
#             "paid": "‚úÖ",
#             "completed": "‚úÖ",
#             "canceled": "‚ùå",
#         }.get(order.status, "‚ùì")

#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
#         date_str = order.created_at.strftime("%d.%m.%Y %H:%M")

#         # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
#         purchases_text += (
#             f"{status_emoji} <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_id}</b>\n" f"üìÖ {date_str}\n"
#         )

#         # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
#         if order.product:
#             purchases_text += (
#                 f"üéÆ {order.product.name}\n"
#                 f"üí∞ Robux: {order.product.robux_amount}\n"
#                 f"üíµ –¶—ñ–Ω–∞: {order.total_price}‚Ç¥\n"
#             )

#         # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
#         purchases_text += f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(order.status)}\n"

#         # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥—ã –∫–∞—Ä—Ç
#         if order.status in ["paid", "completed"] and order.card_codes:
#             purchases_text += f"üîë –ö–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:\n"
#             for code in order.card_codes:
#                 purchases_text += f"<code>{code.code}</code>\n"

#         purchases_text += "\n"

#     await message.answer(purchases_text, reply_markup=kb.get_main_menu_keyboard())


# def get_status_text(status: str) -> str:
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ"""
#     status_texts = {
#         "created": "–°—Ç–≤–æ—Ä–µ–Ω–æ",
#         "paid": "–û–ø–ª–∞—á–µ–Ω–æ",
#         "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
#         "canceled": "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
#     }
#     return status_texts.get(status, status)
# –í handlers/user_purchases.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import reply as kb
from keyboards import inline as ikb
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import func

from sqlalchemy.orm import joinedload
from db.models import Order, Payment, CardCode, RobloxProduct
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


class PurchasesStates(StatesGroup):
    viewing = State()


@router.message(F.text == "üõç –ú–æ—ó –ø–æ–∫—É–ø–∫–∏")
async def my_purchases(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—ó –ø–æ–∫—É–ø–∫–∏'"""
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await show_purchases_page(message, session, state, 0)
    await state.set_state(PurchasesStates.viewing)


@router.callback_query(PurchasesStates.viewing, F.data.startswith("purchases_page_"))
async def process_purchases_page(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split("_")[-1])

    await show_purchases_page(callback.message, session, state, page, is_callback=True)
    await callback.answer()


async def show_purchases_page(
    message,
    session: AsyncSession,
    state: FSMContext,
    page: int,
    is_callback: bool = False,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.chat.id if is_callback else message.from_user.id
    per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–ê–í–ï–†–®–ï–ù–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–ê–í–ï–†–®–ï–ù–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_orders = await session.scalar(
        select(func.count())
        .select_from(Order)
        .where(Order.user_id == user_id, Order.status == "completed")
    )

    if total_orders == 0:
        text = (
            "üõç <b>–í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫.\n\n"
            "–©–æ–± –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ –≤–∏–±–µ—Ä—ñ—Ç—å '–ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É'."
        )

        if is_callback:
            await message.edit_text(text, reply_markup=kb.get_main_menu_keyboard())
        else:
            await message.answer(text, reply_markup=kb.get_main_menu_keyboard())
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    max_page = (total_orders - 1) // per_page

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if page < 0:
        page = 0
    elif page > max_page:
        page = max_page

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_page=page)

    # –ü–æ–ª—É—á–∞–µ–º –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    stmt = (
        select(Order)
        .options(
            joinedload(Order.product),
            joinedload(Order.payment),
            joinedload(Order.card_codes),
        )
        .where(
            Order.user_id == user_id,
            Order.status == "completed",  # –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º
        )
        .order_by(Order.created_at.desc())
        .limit(per_page)
        .offset(page * per_page)
    )

    result = await session.execute(stmt)
    orders = result.unique().scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
    purchases_text = (
        f"üõç <b>–í–∞—à—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –ø–æ–∫—É–ø–∫–∏</b> (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{max_page+1})\n\n"
    )

    for order in orders:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        date_str = order.created_at.strftime("%d.%m.%Y %H:%M")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        purchases_text += f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_id}</b>\n" f"üìÖ {date_str}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if order.product:
            purchases_text += (
                f"üéÆ {order.product.name}\n"
                f"üí∞ Robux: {order.product.robux_amount}\n"
                f"üíµ –¶—ñ–Ω–∞: {order.total_price}‚Ç¥\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥—ã –∫–∞—Ä—Ç (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å)
        if order.card_codes:
            purchases_text += f"üîë –ö–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:\n"
            for code in order.card_codes:
                purchases_text += f"<code>{code.code}</code>\n"

        purchases_text += "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"purchases_page_{page-1}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page < max_page:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"purchases_page_{page+1}"
            )
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append(
        [InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    )

    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    if is_callback:
        try:
            await message.edit_text(
                purchases_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(
                purchases_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            )
    else:
        await message.answer(
            purchases_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —É –≤–∞—Å –µ–≥–æ –µ—â–µ –Ω–µ—Ç
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìã <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n" "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=kb.get_main_menu_keyboard(),
    )
    await state.clear()
    await callback.answer()
