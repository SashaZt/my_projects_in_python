from aiogram import Router, F
from aiogram.types import Message
from keyboards import reply as kb
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from db.models import Order, Payment, CardCode, RobloxProduct

router = Router()


@router.message(F.text == "üõç –ú–æ—ó –ø–æ–∫—É–ø–∫–∏")
async def my_purchases(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—ó –ø–æ–∫—É–ø–∫–∏'"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stmt = (
        select(Order)
        .options(
            joinedload(Order.product),
            joinedload(Order.payment),
            joinedload(Order.card_codes),
        )
        .where(Order.user_id == user_id)
        .order_by(Order.created_at.desc())
    )

    result = await session.execute(stmt)
    orders = result.scalars().all()

    if not orders:
        await message.answer(
            "üõç <b>–í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ–∫—É–ø–æ–∫.\n\n"
            "–©–æ–± –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ –≤–∏–±–µ—Ä—ñ—Ç—å '–ö—É–ø–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É'.",
            reply_markup=kb.get_main_menu_keyboard(),
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
    purchases_text = "üõç <b>–í–∞—à—ñ –ø–æ–∫—É–ø–∫–∏</b>\n\n"

    for order in orders:
        status_emoji = {
            "created": "üïí",
            "paid": "‚úÖ",
            "completed": "‚úÖ",
            "canceled": "‚ùå",
        }.get(order.status, "‚ùì")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        date_str = order.created_at.strftime("%d.%m.%Y %H:%M")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        purchases_text += (
            f"{status_emoji} <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_id}</b>\n" f"üìÖ {date_str}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if order.product:
            purchases_text += (
                f"üéÆ {order.product.name}\n"
                f"üí∞ Robux: {order.product.robux_amount}\n"
                f"üíµ –¶—ñ–Ω–∞: {order.total_price}‚Ç¥\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        purchases_text += f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(order.status)}\n"

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥—ã –∫–∞—Ä—Ç
        if order.status in ["paid", "completed"] and order.card_codes:
            purchases_text += f"üîë –ö–æ–¥–∏ –∫–∞—Ä—Ç–æ–∫:\n"
            for code in order.card_codes:
                purchases_text += f"<code>{code.code}</code>\n"

        purchases_text += "\n"

    await message.answer(purchases_text, reply_markup=kb.get_main_menu_keyboard())


def get_status_text(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ"""
    status_texts = {
        "created": "–°—Ç–≤–æ—Ä–µ–Ω–æ",
        "paid": "–û–ø–ª–∞—á–µ–Ω–æ",
        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        "canceled": "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
    }
    return status_texts.get(status, status)
