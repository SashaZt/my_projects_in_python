services:
  # PostgreSQL сервис
  postgres:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: postgres
    # container_name: ${PROJECT_NAME:-tiktok-analytics}-postgres
    restart: unless-stopped
    environment:
      # Основные параметры PostgreSQL
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
      # Параметры настройки производительности
      PG_MAX_CONNECTIONS: ${PG_MAX_CONNECTIONS}
      PG_EFFECTIVE_CACHE_SIZE: ${PG_EFFECTIVE_CACHE_SIZE}
      PG_MAINTENANCE_WORK_MEM: ${PG_MAINTENANCE_WORK_MEM}
      PG_CHECKPOINT_COMPLETION_TARGET: ${PG_CHECKPOINT_COMPLETION_TARGET}
      PG_WAL_BUFFERS: ${PG_WAL_BUFFERS}
      PG_DEFAULT_STATISTICS_TARGET: ${PG_DEFAULT_STATISTICS_TARGET}
      PG_RANDOM_PAGE_COST: ${PG_RANDOM_PAGE_COST}
      PG_EFFECTIVE_IO_CONCURRENCY: ${PG_EFFECTIVE_IO_CONCURRENCY}
      PG_WORK_MEM: ${PG_WORK_MEM}
      PG_MIN_WAL_SIZE: ${PG_MIN_WAL_SIZE}
      PG_MAX_WAL_SIZE: ${PG_MAX_WAL_SIZE}
    volumes:
      # Монтирование директории данных
      - ${POSTGRES_DATA_DIR:-./pgdata}:${PGDATA:-/var/lib/postgresql/data/pgdata}
    networks:
      - app_network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: bot
    # volumes:
    #   - ./assets:/bot/assets
    env_file:
      - ./.env
    environment:
      - TZ=${TIMEZONE:-Europe/Kiev}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - WORKING_HOURS=08:30-22:30
      - BOT_START_TIME=$(date +%Y-%m-%d_%H:%M:%S)
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy  
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/health\", timeout=5)' || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

networks:
  app_network:
    driver: bridge
    # Настройки сети для изоляции
    ipam:
      config:
        - subnet: 172.20.0.0/16