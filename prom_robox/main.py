import json
import os
import time

import pyautogui
import pyperclip
import requests
from logger import logger

LOG_FILE = "log.txt"


def is_order_processed(order_id):
    order_id_str = str(order_id)

    if not os.path.exists(LOG_FILE):
        logger.info(f"–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ó–∞–∫–∞–∑ {order_id_str} —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º.")
        return False

    with open(LOG_FILE, "r") as log:
        processed_orders = log.readlines()
        # logger.debug(
        #     f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ {order_id_str}. –í –ª–æ–≥–µ {len(processed_orders)} –∑–∞–ø–∏—Å–µ–π."
        # )

        for line in processed_orders:
            cleaned_line = line.strip()
            if cleaned_line == order_id_str:
                # logger.info(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ {order_id_str} –≤ –ª–æ–≥–µ.")
                return True

    logger.info(f"–ó–∞–∫–∞–∑ {order_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–µ.")
    return False


def log_message(order_id):
    with open(LOG_FILE, "a") as log:
        log.write(f"{order_id}\n")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Viber
def send_viber_message(phone, message, order_id):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Viber
    link = f"viber://chat?number={phone}"

    # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —á–∞—Ç
    os.startfile(link)
    time.sleep(5)  # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è Viber

    # –ö–ª—ñ–∫–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç—Ä–µ–±–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥ —Å–µ–±–µ)
    pyautogui.click(1058, 1372)  # –ó–∞–º—ñ–Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–ª—è —Å–≤–æ–≥–æ –µ–∫—Ä–∞–Ω—É
    time.sleep(0.5)

    # –ö–æ–ø—ñ—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä
    pyperclip.copy(message)

    # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
    pyautogui.hotkey("ctrl", "v")
    time.sleep(0.2)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    pyautogui.press("enter")
    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É {phone}!")

    # –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    log_message(order_id)
    pyautogui.click(2444, 11)  # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
    time.sleep(0.5)


def get_orders():
    url = "https://my.prom.ua/api/v1/orders/list"
    headers = {
        "accept": "application/json",
        "Authorization": "Bearer cb8b346a636ebcbd2a90283d5d2d8dfa0c1b14ab",
    }

    try:
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        orders_data = response.json()

        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(orders_data, f, ensure_ascii=False, indent=4)
        return orders_data

    except requests.exceptions.RequestException as e:
        logger.error(f"An error occurred: {e}")
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON: {e}")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")

    return {"orders": []}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


def scrap_orders():
    # –ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
    orders_data = get_orders()
    result = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
    for order in orders_data["orders"]:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è: status="pending", phone –∏ client_first_name
        if order["status"] == "pending":

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –≤ –∑–∞–∫–∞–∑–µ
            for product in order["products"]:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                product_data = {
                    "order_id": order["id"],
                    "client_first_name": order["client_first_name"],
                    "phone": order["phone"],
                    "product_id": product["id"],
                    "name": product["name_multilang"]["uk"],
                    "sku": product["sku"],
                    "price": product["price"],
                    "quantity": product["quantity"],
                }
                result.append(product_data)
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not result:
        logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    # else:
    #     logger.info(json.dumps(result, ensure_ascii=False, indent=4))

    return result


# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
def main():
    while True:
        try:
            orders_data = scrap_orders()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            if not orders_data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            else:
                for order in orders_data:
                    order_id = order.get("order_id")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
                    if is_order_processed(order_id):
                        logger.error(f"–ó–∞–∫–∞–∑ {order_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.–ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue

                    phone = order.get("phone")
                    name_product = order.get("name")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = f"""–í—ñ—Ç–∞—î–º–æ‚ú®
–¶–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω ‚ÄúXGames_Store‚Äù üéÆ
–í–∏ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ü—Ä–æ–º—ñ
{name_product}
–í—ñ—Ä–Ω–æ?"""

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Viber
                    send_viber_message(phone, message, order_id)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

        logger.info("–ß–µ–∫–∞—î–º–æ 10 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é...")
        time.sleep(300)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç


if __name__ == "__main__":
    main()
