import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from threading import local
from datetime import datetime, timedelta
from database import Database
from Parse import TelegramParse
import asyncio
USERS_PER_PAGE = 10
api_id = ''
api_hash = ''
bot = telebot.TeleBot("")

ADMIN_IDS = []
thread_local = local()

db = Database('users_db.sqlite')
db.initialize_db()

user_data = {}

products = [
    ("–ü—à–µ–Ω–∏—Ü—è (2,3,4–∫–ª)", "product_wheat234"),
    ("–°–æ–Ω—è—à–Ω–∏–∫", "product_sunflower"),
    ("–°–æ—è", "product_soy"),
    ("–†—ñ–ø–∞–∫", "product_rapeseed"),
    ("–ñ–∏—Ç–æ", "product_rye"),
    ("–¢—Ä–∏—Ç–∏–∫–∞–ª–µ", "product_triticale"),
    ("–ö—É–∫—É—Ä—É–¥–∑–∞", "product_corn"),
    ("–Ø—á–º—ñ–Ω—å", "product_barley"),
    ("–ì–æ—Ä–æ—Ö", "product_pea"),
    ("–û–≤–µ—Å", "product_oat"),
    ("–ì—Ä–µ—á–∫–∞", "product_buckwheat"),
    ("–ù—ñ—à–µ–≤—ñ", "product_niches")
]

regions = [
    ("–ö–∏—ó–≤—Å—å–∫–∞", "region_kyiv"),
    ("–õ—å–≤—ñ–≤—Å—å–∫–∞", "region_lviv"),
    ("–û–¥–µ—Å—å–∫–∞", "region_odesa"),
    ("–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "region_kharkiv"),
    ("–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", "region_dnipro"),
    ("–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", "region_zaporizhzhia"),
    ("–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "region_vinnytsia"),
    ("–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "region_poltava"),
    ("–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", "region_mykolaiv"),
    ("–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞", "region_chernihiv"),
    ("–°—É–º—Å—å–∫–∞", "region_sumy"),
    ("–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", "region_zhytomyr"),
    ("–ß–µ—Ä–∫–∞—Å—å–∫–∞", "region_cherkasy"),
    ("–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞", "region_rivne")
]


def start_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    link_keyboard = types.InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—èüëâ", url='') # MAIN GROUP
    check_keyboard = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É‚úÖ", callback_data="check")
    markup.add(link_keyboard, check_keyboard)
    return markup


def trial_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    register_button = types.InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –Ω–∞ 2 –¥–Ω—ñ üïí", callback_data="register")
    markup.add(register_button)
    return markup


def activity_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    farmer_button = types.InlineKeyboardButton(text="üåæ –Ø —Ñ–µ—Ä–º–µ—Ä, —Ö–æ—á—É –ø—Ä–æ–¥–∞–≤–∞—Ç–∏", callback_data="farmer")
    trader_button = types.InlineKeyboardButton(text="üìà –Ø —Ç—Ä–µ–π–¥–µ—Ä, —Ö–æ—á—É –∫—É–ø–∏—Ç–∏", callback_data="trader")
    markup.add(farmer_button, trader_button)
    return markup


def product_markup(selected_products):
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for product in products:
        text = product[0]
        if product[0] in selected_products:
            text = "‚úÖ " + text
        buttons.append(types.InlineKeyboardButton(text=text, callback_data=product[1]))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i:i + 2])

    select_all_text = "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ" if len(selected_products) == len(products) else "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data="select_all_products"))
    markup.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_product_selection"))

    return markup


def region_markup(selected_regions):
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for region in regions:
        text = region[0]
        if region[0] in selected_regions:
            text = "‚úÖ " + text
        buttons.append(types.InlineKeyboardButton(text=text, callback_data=region[1]))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i:i + 2])

    select_all_text = "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ" if len(selected_regions) == len(regions) else "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ"
    markup.add(types.InlineKeyboardButton(text=select_all_text, callback_data="select_all_regions"))
    markup.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_region_selection"))

    return markup


def admin_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
    markup.add(types.KeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"))
    markup.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"))
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id in ADMIN_IDS:
        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.", reply_markup=admin_markup())
    elif not is_subscribed(chat_id):
        bot.send_message(chat_id,
                         "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢üòâ. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!",
                         reply_markup=start_markup())
    elif not db.user_exists(user_id):
        bot.send_message(chat_id,
                         "üåü –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–∞ –¥–≤–∞ –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ! üåü",
                         reply_markup=trial_markup())
    else:
        signup_time = db.get_signup_time(user_id)
        trial_duration = db.get_trial_duration(user_id)
        current_time = datetime.now()

        if signup_time:
            signup_time = datetime.strptime(signup_time, '%Y-%m-%d %H:%M:%S')
            if current_time < signup_time + timedelta(seconds=trial_duration):
                trial_days = trial_duration // (24 * 60 * 60)
                bot.send_message(chat_id,
                                 f"–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ —ñ –≤–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –∞–∫—Ç–∏–≤–Ω–∏–π {trial_days} –¥–Ω—ñ–≤.\n –í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å:",
                                 reply_markup=activity_markup())
            else:
                bot.send_message(chat_id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å!")



@bot.callback_query_handler(func=lambda call: call.data == "register")
def callback_register(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    if not db.user_exists(user_id):
        nickname = call.from_user.username
        signup_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        db.add_user(user_id, nickname, signup_time)
        bot.answer_callback_query(call.id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å! üéâ")
        bot.send_message(chat_id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å! üéâ\n–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å:", reply_markup=activity_markup())
    else:
        bot.answer_callback_query(call.id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞! üåü.")


@bot.callback_query_handler(func=lambda call: call.data == "check")
def callback(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
    if is_subscribed(chat_id):
        bot.send_message(chat_id, "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª! üéâ –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—è –∑ –Ω–∞–º–∏! üöÄ")
        bot.send_message(chat_id, "üåü –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–∞ –¥–≤–∞ –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ! üåü",
                         reply_markup=trial_markup())
    else:
        bot.send_message(chat_id, "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                         reply_markup=start_markup())


@bot.callback_query_handler(func=lambda call: call.data in ["farmer", "trader"])
def activity_selection(call):
    chat_id = call.message.chat.id
    if call.data == "farmer":
        bot.send_message(chat_id, "–í–∏ –≤–∏–±—Ä–∞–ª–∏: üåæ –Ø —Ñ–µ—Ä–º–µ—Ä, —Ö–æ—á—É –ø—Ä–æ–¥–∞–≤–∞—Ç–∏")
        user_data[chat_id] = {"role": "farmer", "state": "product_selection"}
        ask_product(chat_id)
    elif call.data == "trader":
        bot.send_message(chat_id, "–í–∏ –≤–∏–±—Ä–∞–ª–∏: üìà –Ø —Ç—Ä–µ–π–¥–µ—Ä, —Ö–æ—á—É –∫—É–ø–∏—Ç–∏")
        user_data[chat_id] = {"role": "trader", "products": [], "regions": [], "state": "product_selection"}
        photo_path = 'img/crops.png'
        product_buttons = product_markup(user_data[chat_id]["products"])
        with open(photo_path, 'rb') as photo:
            bot.send_photo(chat_id, photo, reply_markup=product_buttons)

def ask_product(chat_id):
    msg = bot.send_message(chat_id, "–©–æ –ø—Ä–æ–¥–∞—î—Ç–µ? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—à–µ–Ω–∏—Ü—è, —è—á–º—ñ–Ω—å, –≥–æ—Ä–æ—Ö —ñ —Ç.–¥.) üåæ")
    bot.register_next_step_handler(msg, process_product)

def process_product(message):
    chat_id = message.chat.id
    product = message.text
    user_data[chat_id]["product"] = product
    ask_region(chat_id)

def ask_region(chat_id):
    msg = bot.send_message(chat_id, "–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Å–∫–ª–∞–¥? (–≤–∫–∞–∂—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω) üåç")
    bot.register_next_step_handler(msg, process_region)

def process_region(message):
    chat_id = message.chat.id
    region = message.text
    user_data[chat_id]["region"] = region
    ask_contact(chat_id)

def ask_contact(chat_id):
    msg = bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É üìû")
    bot.register_next_step_handler(msg, process_contact)

def process_contact(message):
    chat_id = message.chat.id
    contact = message.text
    user_data[chat_id]["contact"] = contact
    send_application_to_moderation(chat_id)

def send_application_to_moderation(chat_id):
    data = user_data[chat_id]
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    application_text = (
        f"–ù–û–í–ê –ó–ê–Ø–í–ö–ê ({date})\n\n"
        f"–°—ã—Ä—å–µ: {data['product']}\n"
        f"–†–µ–≥–∏–æ–Ω: {data['region']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}"
    )
    moderation_group_id = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    bot.send_message(moderation_group_id, application_text)
    bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–ª–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –î—è–∫—É—î–º–æ!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("product_") or call.data in ["select_all_products", "finish_product_selection"])
def product_selection(call):
    chat_id = call.message.chat.id
    if call.data == "select_all_products":
        if chat_id in user_data:
            if len(user_data[chat_id]["products"]) == len(products):
                user_data[chat_id]["products"] = []
            else:
                user_data[chat_id]["products"] = [product[0] for product in products]
    elif call.data == "finish_product_selection":
        if chat_id in user_data:
            user_data[chat_id]["state"] = "region_selection"

            bot.delete_message(chat_id=chat_id, message_id=call.message.id)

            photo_path = 'img/region.png'
            region_buttons = region_markup(user_data[chat_id]["regions"])
            with open(photo_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, reply_markup=region_buttons)
            #
            # bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω, –¥–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏:",
            #                  reply_markup=region_markup(user_data[chat_id]["regions"]))
        return
    else:
        product = call.data
        product_name = next((prod[0] for prod in products if prod[1] == product), None)
        if chat_id in user_data and product_name:
            if product_name in user_data[chat_id]["products"]:
                user_data[chat_id]["products"].remove(product_name)
            else:
                user_data[chat_id]["products"].append(product_name)
    selected_products = user_data[chat_id]["products"]
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id,
                                  reply_markup=product_markup(selected_products))


@bot.callback_query_handler(func=lambda call: call.data.startswith("region_") or call.data in ["select_all_regions", "finish_region_selection"])
def region_selection(call):
    chat_id = call.message.chat.id
    if call.data == "select_all_regions":
        if chat_id in user_data:
            if len(user_data[chat_id]["regions"]) == len(regions):
                user_data[chat_id]["regions"] = []
            else:
                user_data[chat_id]["regions"] = [region[0] for region in regions]
    elif call.data == "finish_region_selection":

        asyncio.run(send_selected_messages(chat_id, user_data[chat_id]["products"], user_data[chat_id]["regions"]))
        bot.delete_message(chat_id=chat_id, message_id=call.message.id)
        return
    else:
        region = call.data
        region_name = next((reg[0] for reg in regions if reg[1] == region), None)
        if chat_id in user_data and region_name:
            if region_name in user_data[chat_id]["regions"]:
                user_data[chat_id]["regions"].remove(region_name)
            else:
                user_data[chat_id]["regions"].append(region_name)
    selected_regions = user_data[chat_id]["regions"]
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id,
                                  reply_markup=region_markup(selected_regions))


@bot.message_handler(commands=['set_trial'])
def set_trial(message):
    user_id = message.from_user.id
    try:
        duration = int(message.text.split()[1])
        db.set_trial_duration(user_id, duration)
        bot.send_message(message.chat.id, f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_trial <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö>")


@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" and message.from_user.id in ADMIN_IDS)
def add_time_to_user(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 30):")
    bot.register_next_step_handler(msg, process_add_time)


def process_add_time(message):
    try:
        user_id, duration = map(int, message.text.split())
        if db.user_exists(user_id):
            db.set_trial_duration(user_id, duration)
            bot.send_message(message.chat.id, f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and message.from_user.id in ADMIN_IDS)
def list_users(message):
    show_users_page(message.chat.id, 0)


def show_users_page(chat_id, page):
    connection = db.create_connection()
    with connection:
        cursor = connection.cursor()
        users = cursor.execute("SELECT user_id, nickname, signup, trial_duration FROM users").fetchall()
        total_pages = (len(users) - 1) // USERS_PER_PAGE + 1
        start_index = page * USERS_PER_PAGE
        end_index = start_index + USERS_PER_PAGE
        users_on_page = users[start_index:end_index]

        response = f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n"
        for user in users_on_page:
            trial_days = user[3] // (24 * 60 * 60)
            response += f"\nID: {user[0]}, –ù–∏–∫–Ω–µ–π–º: {user[1]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[2]}, –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {trial_days} –¥–Ω–µ–π\n"

        keyboard = InlineKeyboardMarkup()
        if page > 0:
            keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page - 1}"))
        if page < total_pages - 1:
            keyboard.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_page_{page + 1}"))

        bot.send_message(chat_id, response, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("prev_page_") or call.data.startswith("next_page_"))
def handle_pagination(call):
    page = int(call.data.split("_")[-1])
    show_users_page(call.message.chat.id, page)


async def send_selected_messages(chat_id, products, regions):
    parser = TelegramParse(products, regions, chat_id, False, True)
    await parser.start()


def is_subscribed(chat_id):
    status = ['creator', 'administrator', 'member']
    for i in status:
        if i == bot.get_chat_member(chat_id="", user_id=chat_id).status: # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–∏
            return True
    return False


bot.polling(non_stop=True)
