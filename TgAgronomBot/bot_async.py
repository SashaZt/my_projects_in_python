from telebot.async_telebot import AsyncTeleBot
import telebot.apihelper as apihelper
import random

from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta, time as dtime
from database import Database
from configuration.config import (
    TOKEN,
    CHANNEL_USERNAME,
    ADMIN_IDS,
    MODERATION_GROUP_ID,
    NAME_CHANNEL,
    DB_CONFIG,
)

# from loguru import logger
from configuration.logger_setup import logger
import os
import asyncio
import aiomysql
import schedule


bot = AsyncTeleBot(TOKEN)  # –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞

db = Database()
db.initialize_db()
USERS_PER_PAGE = 10
user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
last_check_time = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
daily_message_count = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
sent_messages = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
products = [
    # ("–ü—à–µ–Ω–∏—Ü—è (2,3,4–∫–ª)", "product_wheat234"),
    ("–ü—à–µ–Ω–∏—Ü—è", "product_wheat"),
    ("–°–æ–Ω—è—à–Ω–∏–∫", "product_sunflower"),
    ("–°–æ—è", "product_soy"),
    ("–†—ñ–ø–∞–∫", "product_rapeseed"),
    ("–ñ–∏—Ç–æ", "product_rye"),
    ("–¢—Ä–∏—Ç–∏–∫–∞–ª–µ", "product_triticale"),
    ("–ö—É–∫—É—Ä—É–¥–∑–∞", "product_corn"),
    ("–Ø—á–º—ñ–Ω—å", "product_barley"),
    ("–ì–æ—Ä–æ—Ö", "product_pea"),
    ("–û–≤–µ—Å", "product_oat"),
    ("–ì—Ä–µ—á–∫–∞", "product_buckwheat"),
    ("–ù—ñ—à–µ–≤—ñ", "product_niches"),
]

# –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
regions = [
    ("–ö–∏—ó–≤—Å—å–∫–∞", "region_kyiv"),
    ("–õ—å–≤—ñ–≤—Å—å–∫–∞", "region_lviv"),
    ("–û–¥–µ—Å—å–∫–∞", "region_odesa"),
    ("–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "region_kharkiv"),
    ("–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", "region_dnipro"),
    ("–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", "region_zaporizhzhia"),
    ("–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "region_vinnytsia"),
    ("–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "region_poltava"),
    ("–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", "region_mykolaiv"),
    ("–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞", "region_chernihiv"),
    ("–°—É–º—Å—å–∫–∞", "region_sumy"),
    ("–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", "region_zhytomyr"),
    ("–ß–µ—Ä–∫–∞—Å—å–∫–∞", "region_cherkasy"),
    ("–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞", "region_rivne"),
]

user_messages = {}


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
def trial_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    register_button = types.InlineKeyboardButton(
        text="üöÄ–û—Ç—Ä–∏–º–∞—Ç–∏ 2 –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ üöÄ", callback_data="register"
    )
    markup.add(register_button)

    return markup


# –ü–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–≤—É—Ö –¥–Ω–µ–π
def tarif_markup_to_2days():
    markup = types.InlineKeyboardMarkup(row_width=3)
    basic_button = types.InlineKeyboardButton(
        text="–ë–∞–∑–æ–≤—ã–π", callback_data="tarif_basic"
    )
    standard_button = types.InlineKeyboardButton(
        text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="tarif_standard"
    )
    extra_button = types.InlineKeyboardButton(
        text="–≠–∫—Å—Ç—Ä–∞", callback_data="tarif_extra"
    )
    markup.add(basic_button, standard_button, extra_button)
    return markup


async def send_trial_end_message(user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    message = (
        "–í–∞—à–µ –ø—Ä–æ–±–Ω–µ –≤—Ä–µ–º—è –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å, –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É| /tarif |.\n"
        "üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù\n"
        "üåΩ–°–¢–ê–ù–î–ê–†–¢ (–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π)\n"
        "üå±–ï–ö–°–¢–†–ê\n"
        "–Ø–∫–∏–π –∑ —Ç–∞—Ä–∏—Ñ—ñ–≤ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–∏?\n"
        "üëáüëá–û–ë–ï–†–Ü–¢–¨üëáüëá"
    )
    try:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞—Ä–∏—Ñ–∏", callback_data="tarif"),
        )
        sent_message = await bot.send_message(user_id, message, reply_markup=markup)
        logger.info(f"Sent trial period ended message to user {user_id}")
        last_check_time[user_id] = datetime.now()
        daily_message_count[user_id] = daily_message_count.get(user_id, 0) + 1
        user_messages[user_id] = [sent_message.message_id]
    except apihelper.ApiException as e:
        logger.error(f"Failed to send message to user {user_id}: {e}")


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def create_connection():
    return await aiomysql.connect(
        host=DB_CONFIG["host"],
        port=3306,  # –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        user=DB_CONFIG["user"],
        password=DB_CONFIG["password"],
        db=DB_CONFIG["database"],
    )


async def get_new_messages(trader, check_time):
    user_id, role, signup, trial_duration, region, material = trader
    query = """
    SELECT
        id, Messages, data_time
    FROM
        messages_tg
    WHERE
        data_time > %s AND
        FIND_IN_SET(%s, Regions) > 0 AND
        FIND_IN_SET(%s, Raw_Materials) > 0 AND
        trade = 'sell';
    """
    try:
        conn = await create_connection()
        async with conn.cursor() as cursor:
            await cursor.execute(query, (check_time, region, material))
            messages = await cursor.fetchall()
        conn.close()
        if messages:
            logger.info(f"–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}")
        return messages
    except aiomysql.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}: {err}")
        return []


async def get_traders():
    query = """
    SELECT 
        u.user_id,
        u.role,
        u.signup,
        u.trial_duration,
        r.region_name,
        m.material_name
    FROM 
        users_tg_bot u
    JOIN 
        user_regions ur ON u.user_id = ur.user_id
    JOIN 
        regions r ON ur.region_id = r.region_id
    JOIN 
        user_raw_materials urm ON u.user_id = urm.user_id
    JOIN 
        raw_materials m ON urm.material_id = m.material_id
    WHERE
        u.role = 'trader';
    """
    try:
        conn = await create_connection()
        async with conn.cursor() as cursor:
            await cursor.execute(query)
            traders = await cursor.fetchall()
        return traders
    except aiomysql.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {err}")
        return []
    finally:
        conn.close()


async def get_traders_trial():
    query = """
    SELECT 
        user_id,
        role,
        signup,
        trial_duration,
        temporary_status
    FROM 
        users_tg_bot
    WHERE
        role = 'trader';
    """
    try:
        conn = await create_connection()
        async with conn.cursor() as cursor:
            await cursor.execute(query)
            traders = await cursor.fetchall()
        return traders
    except aiomysql.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {err}")
        return []
    finally:
        conn.close()


async def check_and_send_trial_end_messages():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    traders = await get_traders_trial()

    current_time = datetime.now()
    logger.info(f"–°–µ–π—á–∞—Å {current_time} ")

    for trader in traders:
        user_id, role, signup, trial_duration, temporary_status = trader
        if temporary_status != 1:
            continue

        signup_time = signup
        end_trial_time = signup_time + timedelta(seconds=trial_duration)
        remaining_time = end_trial_time - current_time

        logger.info(f"–û–∫–æ–Ω—á–∞–Ω–∏–µ {end_trial_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ {user_id} –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫
        if remaining_time <= timedelta(days=1) and remaining_time > timedelta(0):
            logger.info(
                f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            can_send = await can_send_message(user_id)
            if can_send:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä—É {user_id}")
                await send_trial_end_message(user_id)
            else:
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–π–¥–µ—Ä—É {user_id}. –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã."
                )
        else:
            logger.info(
                f"–£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time}"
            )


# #–†–∞–±–∞—á–∞—è, —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º
# async def can_send_message(user_id):
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
#     now = datetime.now()
#     if not (dtime(8, 0) <= now.time() <= dtime(20, 0)):
#         logger.info(
#             f"–°–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å 8:00 –¥–æ 20:00. –°–µ–π—á–∞—Å: {now.time()}"
#         )
#         return False

#     last_sent = last_check_time.get(user_id)
#     if last_sent:
#         logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {last_sent}")
#     else:
#         logger.info(
#             f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
#         )

#     if last_sent and now - last_sent < timedelta(minutes=1):
#         logger.info(
#             f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥."
#         )
#         return False

#     count = daily_message_count.get(user_id, 0)
#     logger.info(
#         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {count}"
#     )

#     if count >= 20:
#         logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
#         return False


#     return True
# async def can_send_message(user_id):
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
#     now = datetime.now()

#     # –£–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
#     # if not (dtime(8, 0) <= now.time() <= dtime(20, 0)):
#     #     logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å 8:00 –¥–æ 20:00. –°–µ–π—á–∞—Å: {now.time()}")
#     #     return False

#     last_sent = last_check_time.get(user_id)
#     if last_sent:
#         logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {last_sent}")
#     else:
#         logger.info(
#             f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
#         )

#     # –£–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
#     # if last_sent and now - last_sent < timedelta(minutes=1):
#     #     logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥.")
#     #     return False

#     count = daily_message_count.get(user_id, 0)
#     logger.info(
#         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {count}"
#     )

#     # –£–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
#     # if count >= 20:
#     #     logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
#     #     return False

#     return True  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


async def can_send_message(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    now = datetime.now()

    if not (dtime(8, 0) <= now.time() <= dtime(20, 0)):
        logger.info(
            f"–°–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å 8:00 –¥–æ 20:00. –°–µ–π—á–∞—Å: {now.time()}"
        )
        return False

    last_sent = last_check_time.get(user_id)
    if last_sent:
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {last_sent}")
    else:
        logger.info(
            f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
        )

    if last_sent and now - last_sent < timedelta(minutes=60):
        logger.info(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥."
        )
        return False

    count = daily_message_count.get(user_id, 0)
    logger.info(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {count}"
    )

    if count >= 3:
        logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

    return True


async def send_message(user_id, message_text):
    try:
        await bot.send_message(user_id, message_text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_messages_to_traders():
    traders = await get_traders()
    current_time = datetime.now()
    check_time_threshold = current_time - timedelta(seconds=30)

    for trader in traders:
        user_id, role, signup, trial_duration, region, material = trader
        signup_time = signup  # signup —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è datetime –æ–±—ä–µ–∫—Ç–æ–º
        end_trial_time = signup_time + timedelta(seconds=trial_duration)

        if current_time <= end_trial_time:
            check_time = last_check_time.get(user_id, signup_time)
            if check_time < check_time_threshold:
                check_time = check_time_threshold

            messages = await get_new_messages(trader, check_time)
            if messages:
                for message in messages:
                    message_id, message_text, message_time = message
                    if message_id not in sent_messages.get(user_id, set()):
                        await send_message(user_id, message_text)
                        if user_id not in sent_messages:
                            sent_messages[user_id] = set()
                        sent_messages[user_id].add(message_id)
                        last_check_time[user_id] = max(
                            last_check_time.get(user_id, signup_time), message_time
                        )
            last_check_time[user_id] = current_time


@bot.message_handler(commands=["tarif"])
async def send_tarif_message(message):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {message.text}")
    response_message = (
        "–í–∞—à –ø—Ä–æ–±–Ω–∏–π —á–∞—Å –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.\n"
        "üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 1 –∫—É–ª—å—Ç—É—Ä—É\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 1 —Ä–µ–≥—ñ–æ–Ω—É\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞780 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "üåΩ–°–¢–ê–ù–î–ê–†–¢ (–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π)\–Ω"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 5 –∫—É–ª—å—Ç—É—Ä\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 3 —Ä–µ–≥—ñ–æ–Ω—É\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞1985 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "üå±–ï–ö–°–¢–†–ê\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ª—å—Ç—É—Ä\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞3890 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "–Ø–∫–∏–π –∑ —Ç–∞—Ä–∏—Ñ—ñ–≤ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–∏?\–Ω"
        "üëáüëá–û–ë–ï–†–Ü–¢–¨üëáüëá"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π", callback_data="trial_tarif_basic"),
        types.InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="trial_tarif_standard"),
        types.InlineKeyboardButton("–≠–∫—Å—Ç—Ä–∞", callback_data="trial_tarif_extra"),
    )

    await bot.send_message(message.chat.id, response_message, reply_markup=markup)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏: {response_message}")


@bot.callback_query_handler(func=lambda call: call.data == "tarif")
async def all_tarif_callback_query(call):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {call.data}")
    current_directory = os.getcwd()
    message_all_tarif = (
        "–í–∞—à –ø—Ä–æ–±–Ω–∏–π —á–∞—Å –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è\\.\\ –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\\.\\\n"  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ .
        "*üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù* \n"  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        "1 –∫—É–ª—å—Ç—É—Ä–∞\\,\\ 1 —Ä–µ–≥—ñ–æ–Ω\\,\\ —â–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è \\-\\ 780 –≥—Ä–Ω\\.\\/–º—ñ—Å\\."  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ . - ,
        "*üåΩ–°–¢–ê–ù–î–ê–†–¢* \\(_–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π_\)\\ \n"  # –∫—É—Å–∏–≤–æ–º _–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π_
        "5 –∫—É–ª—å—Ç—É—Ä\\,\\ 3 —Ä–µ–≥—ñ–æ–Ω–∏\\,\\ —â–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è \\-\\ 1985 –≥—Ä–Ω\\.\\/–º—ñ—Å\\. \n"
        "*üå±–ï–ö–°–¢–†–ê* \n"
        "–ù–µ–æ–±–º–µ–∂–µ–Ω—ñ –∫—É–ª—å—Ç—É—Ä–∏ —Ç–∞ —Ä–µ–≥—ñ–æ–Ω–∏\\,\\ —â–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è \\-\\ 3890 –≥—Ä–Ω\\.\\/–º—ñ—Å\\."
        "–Ø–∫–∏–π –∑ —Ç–∞—Ä–∏—Ñ—ñ–≤ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–∏?üëáüëáüëáüëá\n"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π", callback_data="trial_tarif_basic"),
        types.InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="trial_tarif_standard"),
        types.InlineKeyboardButton("–≠–∫—Å—Ç—Ä–∞", callback_data="trial_tarif_extra"),
    )
    await bot.send_message(
        call.message.chat.id,
        message_all_tarif,
        reply_markup=markup,
        parse_mode="MarkdownV2",
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏: {message_all_tarif}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("trial_"))
async def trial_callback_query(call):
    current_directory = os.getcwd()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {call.data}")
    if call.data == "trial_tarif_basic":
        message_basic = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n\n"
            "*üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù* \n"
            "\\-\\ –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 1 –∫—É–ª—å—Ç—É—Ä—É \n"
            "\\-\\ –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 1 —Ä–µ–≥—ñ–æ–Ω—É \n"
            "\\-\\ –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è \n"
            "üí∞780 –≥—Ä–Ω\\.\\ –º—ñ—Å—è—Ü—å \n\n"
            "*–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:* \n\n"
            "*üí≥–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫* \n"
            "`5457 0822 5614 6379` \n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ \n\n"
            "*–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º:* @AgroHelper\\_\\supp"
        )
        photo_path_basic = os.path.join(current_directory, "img/tarif_basic.png")
        with open(photo_path_basic, "rb") as photo:
            await bot.send_photo(
                call.message.chat.id,
                photo,
                caption=message_basic,
                parse_mode="MarkdownV2",
            )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_basic}")
    elif call.data == "trial_tarif_standard":
        message_standard = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n\n"
            "*üåΩ–°–¢–ê–ù–î–ê–†–¢* \\(_–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π_\)\\ \n"
            "\\-\\ –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 5 –∫—É–ª—å—Ç—É—Ä \n"
            "\\-\\ –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 3 —Ä–µ–≥—ñ–æ–Ω—É \n"
            "\\-\\ –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è \n"
            "üí∞1985 –≥—Ä–Ω\\.\\ –º—ñ—Å—è—Ü—å \n\n"
            "*–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:* \n\n"
            "*üí≥–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫* \n"
            "`5457 0822 5614 6379` \n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ \n\n"
            "*–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º:* @AgroHelper\\_\\supp"
        )
        photo_path_standard = os.path.join(current_directory, "img/tarif_standard.png")
        with open(photo_path_standard, "rb") as photo:
            await bot.send_photo(
                call.message.chat.id,
                photo,
                caption=message_standard,
                parse_mode="MarkdownV2",
            )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_standard}")
    elif call.data == "trial_tarif_extra":
        message_extra = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n\n"
            "*üå±–ï–ö–°–¢–†–ê* \n"
            "\\-\\ –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ª—å—Ç—É—Ä \n"
            "\\-\\  –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ \n"
            "\\-\\ –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è \n"
            "üí∞3890 –≥—Ä–Ω\\.\\ –º—ñ—Å—è—Ü—å \n\n"
            "*–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:* \n\n"
            "*üí≥–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫* \n"
            "`5457 0822 5614 6379` \n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ \n\n"
            "*–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º:* @AgroHelper\\_\\supp"
        )
        photo_path_extra = os.path.join(current_directory, "img/tarif_extra.png")
        with open(photo_path_extra, "rb") as photo:
            await bot.send_photo(
                call.message.chat.id,
                photo,
                caption=message_extra,
                parse_mode="MarkdownV2",
            )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_extra}")


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def admin_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
    markup.add(types.KeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    # markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"))
    # markup.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"))
    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
def start_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    link_keyboard = types.InlineKeyboardButton(
        # text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—èüëâ", url=f"https://t.me/{CHANNEL_USERNAME}"
        text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—èüëâ",
        url=f"https://t.me/{NAME_CHANNEL}",
    )
    check_keyboard = types.InlineKeyboardButton(
        text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É‚úÖ", callback_data="check"
    )
    markup.add(link_keyboard, check_keyboard)
    return markup


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
        channel_chat_id = CHANNEL_USERNAME  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º ID –∫–∞–Ω–∞–ª–∞
        member = await bot.get_chat_member(channel_chat_id, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def activity_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    farmer_button = types.InlineKeyboardButton(
        text="üåæ –Ø —Ñ–µ—Ä–º–µ—Ä, —Ö–æ—á—É –ø—Ä–æ–¥–∞–≤–∞—Ç–∏", callback_data="farmer"
    )
    trader_button = types.InlineKeyboardButton(
        text="üìà –Ø —Ç—Ä–µ–π–¥–µ—Ä, —Ö–æ—á—É –∫—É–ø–∏—Ç–∏", callback_data="trader"
    )
    markup.add(farmer_button, trader_button)
    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
def region_markup(selected_regions):
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for region in regions:
        text = region[0]
        if region[0] in selected_regions:
            text = "‚úÖ " + text
        buttons.append(types.InlineKeyboardButton(text=text, callback_data=region[1]))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i : i + 2])

    select_all_text = (
        "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ" if len(selected_regions) == len(regions) else "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ"
    )
    markup.add(
        types.InlineKeyboardButton(
            text=select_all_text, callback_data="select_all_regions"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_region_selection"
        )
    )

    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
def product_markup(selected_products):
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for product in products:
        text = product[0]
        if product[0] in selected_products:
            text = "‚úÖ " + text
        buttons.append(types.InlineKeyboardButton(text=text, callback_data=product[1]))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i : i + 2])

    select_all_text = (
        "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ" if len(selected_products) == len(products) else "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ"
    )
    markup.add(
        types.InlineKeyboardButton(
            text=select_all_text, callback_data="select_all_products"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_product_selection"
        )
    )

    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
async def start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in ADMIN_IDS:
        await bot.send_message(
            chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.", reply_markup=admin_markup()
        )
    elif not db.user_exists(user_id):
        nickname = message.from_user.username
        signup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        trial_duration = 172800  # 48 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        user_data[chat_id] = {
            "nickname": nickname,
            "signup_time": signup_time,
            "trial_duration": trial_duration,
            "role": None,
            "products": [],
            "regions": [],
            "state": "initial",
        }
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        with open("video.mp4", "rb") as video:
            await bot.send_video(
                chat_id,
                video,
                caption="üöÄ<b>–û–¢–†–ò–ú–ê–ô–¢–ï 2 –î–ù–Ü –ë–ï–ó–ö–û–®–¢–û–í–ù–û–ì–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø</b>\n\n‚ÄºÔ∏è–î–∏–≤—ñ—Ç—å—Å—è –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é‚ÄºÔ∏è\n\nüåΩ–û—Ç—Ä–∏–º—É–π—Ç–µ –ø—Ä—è–º—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–¥–∞–∂ –∑–µ—Ä–Ω–æ–≤–∏—Ö —Ç–∞ —ñ–Ω—à–∏—Ö –∫—É–ª—å—Ç—É—Ä –±–µ–∑ –ø–æ—Å–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤. –©–æ–¥–Ω—è –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–≤—ñ–∂—ñ –∑–∞—è–≤–∫–∏ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤üåª",
                parse_mode="HTML",
                reply_markup=trial_markup(),
            )
    else:
        signup_time = db.get_signup_time(user_id)
        trial_duration = db.get_trial_duration(user_id)
        current_time = datetime.now()

        if signup_time:
            if isinstance(signup_time, str):
                signup_time = datetime.strptime(signup_time, "%Y-%m-%d %H:%M:%S")

            if trial_duration is None:
                trial_duration = 0

            trial_end_time = signup_time + timedelta(seconds=trial_duration)
            remaining_time = trial_end_time - current_time

            if remaining_time.total_seconds() > 0:
                trial_days = remaining_time.days
                trial_hours = remaining_time.seconds // 3600
                await bot.send_message(
                    chat_id,
                    f"–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ —ñ –≤–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ª–∏—à–∏–ª–æ—Å—å {trial_days} –¥–Ω—ñ–≤ —ñ {trial_hours} –≥–æ–¥–∏–Ω.",
                )
                return
            else:
                await bot.send_message(chat_id, "–í–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "register" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "register")
async def callback_register(call):
    chat_id = call.message.chat.id
    await bot.delete_message(chat_id=chat_id, message_id=call.message.id)
    await bot.send_message(
        chat_id,
        "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢üòâ. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!",
        reply_markup=start_markup(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "check" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == "check")
async def callback_check_subscription(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    nickname = call.from_user.username

    await bot.delete_message(chat_id=chat_id, message_id=call.message.id)

    if is_subscribed(user_id):
        if not db.user_exists(user_id):
            signup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            user_data[chat_id] = {
                "nickname": nickname,
                "signup_time": signup_time,
                "role": None,
                "products": [],
                "regions": [],
                "state": "initial",
            }
            await bot.answer_callback_query(call.id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å! üéâ")
            sent_message = await bot.send_message(
                chat_id,
                "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å! üéâ",
            )
            user_messages[chat_id] = [sent_message.message_id]
        else:
            await bot.answer_callback_query(
                call.id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞! üåü."
            )

        if chat_id in user_messages:
            for message_id in user_messages[chat_id]:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)

        sent_message_2 = await bot.send_message(
            chat_id,
            "–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å:",
            reply_markup=activity_markup(),
        )
        user_messages[chat_id] = sent_message_2.message_id
    else:
        sent_message = await bot.send_message(
            chat_id,
            "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=start_markup(),
        )
        user_messages[chat_id] = [sent_message.message_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ "farmer" –∏–ª–∏ "trader"
@bot.callback_query_handler(func=lambda call: call.data in ["farmer", "trader"])
async def activity_selection(call):
    chat_id = call.message.chat.id
    current_directory = os.getcwd()
    photo_path = os.path.join(current_directory, "img/crops.png")
    await bot.delete_message(chat_id=chat_id, message_id=call.message.id)
    role = "farmer" if call.data == "farmer" else "trader"
    user_data[chat_id]["role"] = role

    product_buttons = product_markup(user_data[chat_id]["products"])
    with open(photo_path, "rb") as photo:
        await bot.send_photo(
            chat_id,
            photo,
            caption="üåΩ–í–∏–±–µ—Ä—ñ—Ç—å –∑–µ—Ä–Ω–æ–≤—ñ, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –∫—É–ª—å—Ç—É—Ä —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä¬ª",
            reply_markup=product_buttons,
        )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("product_")
    or call.data in ["select_all_products", "finish_product_selection"]
)
async def product_selection(call):
    chat_id = call.message.chat.id
    if call.data == "select_all_products":
        if len(user_data[chat_id]["products"]) == len(products):
            user_data[chat_id]["products"] = []
        else:
            user_data[chat_id]["products"] = [product[0] for product in products]
    elif call.data == "finish_product_selection":
        user_data[chat_id]["state"] = "region_selection"
        await bot.delete_message(chat_id=chat_id, message_id=call.message.id)
        photo_path = "img/region.png"
        region_buttons = region_markup(user_data[chat_id]["regions"])
        with open(photo_path, "rb") as photo:
            await bot.send_photo(
                chat_id,
                photo,
                caption="üá∫üá¶–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä¬ª",
                reply_markup=region_buttons,
            )
        return
    else:
        product = call.data
        product_name = next((prod[0] for prod in products if prod[1] == product), None)
        if product_name:
            if product_name in user_data[chat_id]["products"]:
                user_data[chat_id]["products"].remove(product_name)
            else:
                user_data[chat_id]["products"].append(product_name)

    selected_products = user_data[chat_id]["products"]
    logger.info(f"Selected products for user {chat_id}: {selected_products}")
    await bot.edit_message_reply_markup(
        chat_id=chat_id,
        message_id=call.message.id,
        reply_markup=product_markup(selected_products),
    )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("region_")
    or call.data in ["select_all_regions", "finish_region_selection"]
)
async def region_selection(call):
    chat_id = call.message.chat.id
    if call.data == "select_all_regions":
        if len(user_data[chat_id]["regions"]) == len(regions):
            user_data[chat_id]["regions"] = []
        else:
            user_data[chat_id]["regions"] = [region[0] for region in regions]
    elif call.data == "finish_region_selection":
        await register_user(chat_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        await bot.delete_message(chat_id=chat_id, message_id=call.message.id)
        return
    else:
        region = call.data
        region_name = next((reg[0] for reg in regions if reg[1] == region), None)
        if region_name:
            if region_name in user_data[chat_id]["regions"]:
                user_data[chat_id]["regions"].remove(region_name)
            else:
                user_data[chat_id]["regions"].append(region_name)

    selected_regions = user_data[chat_id]["regions"]
    logger.info(f"Selected regions for user {chat_id}: {selected_regions}")
    await bot.edit_message_reply_markup(
        chat_id=chat_id,
        message_id=call.message.id,
        reply_markup=region_markup(selected_regions),
    )


async def register_user(chat_id):
    logger.info(f"Attempting to register user {chat_id}")

    user_info = user_data.get(chat_id, {})
    logger.info(f"user_data for {chat_id}: {user_info}")

    if not user_info:
        logger.error(f"No user data found for chat_id {chat_id}")
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    nickname = user_info.get("nickname", "")
    signup_time = user_info.get("signup_time", "")
    role = user_info.get("role", "")
    products = user_info.get("products", [])
    regions = user_info.get("regions", [])

    logger.info(
        f"Registering user {chat_id} with role: {role}, products: {products}, regions: {regions}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
    if not products:
        await bot.send_message(
            chat_id,
            "–í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=product_markup(user_data[chat_id]["products"]),
        )
        return

    if not regions:
        await bot.send_message(
            chat_id,
            "–í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–µ–≥—ñ–æ–Ω:",
            reply_markup=region_markup(user_data[chat_id]["regions"]),
        )
        return

    if role and products and regions:
        if not db.user_exists(chat_id):
            db.add_user(chat_id, nickname, signup_time, role)
            db.set_trial_duration(chat_id, user_info.get("trial_duration", 172800))
            logger.info(
                f"User {chat_id} added with signup_time {signup_time} and role {role}"
            )
        else:
            logger.info(f"User {chat_id} already exists")

        for product in products:
            product_id = db.get_product_id_by_name(product)
            if product_id is not None:
                db.add_user_raw_material(chat_id, product_id)
                logger.info(
                    f"Product {product} with ID {product_id} added for user {chat_id}"
                )
            else:
                logger.error(f"Product ID not found for product: {product}")

        for region in regions:
            region_id = db.get_region_id_by_name(region)
            if region_id is not None:
                db.add_user_region(chat_id, region_id)
                logger.info(
                    f"Region {region} with ID {region_id} added for user {chat_id}"
                )
            else:
                logger.error(f"Region ID not found for region: {region}")

        await bot.send_message(
            chat_id,
            "üéâ –í–∞—à—É –ø—Ä–æ–±–Ω—É –≤–µ—Ä—Å—ñ—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 2 –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.\n\n <b>–Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ —Ä–∏–Ω–∫—É, –≤–∏ –æ–¥—Ä–∞–∑—É —ó—Ö –æ—Ç—Ä–∏–º–∞—î—Ç–µ</b>üöÄ",
            parse_mode="HTML",
        )

    else:
        logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        await bot.send_message(
            chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —É—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        )


def schedule_messages():
    start_time = dtime(8, 0)
    end_time = dtime(20, 0)
    intervals = 3

    now = datetime.now()
    first_send = now.replace(hour=8, minute=0, second=0, microsecond=0)
    last_send = now.replace(hour=20, minute=0, second=0, microsecond=0)

    time_deltas = [
        (last_send - first_send) / intervals * i
        + timedelta(minutes=random.randint(0, 59))
        for i in range(1, intervals + 1)
    ]

    for delta in time_deltas:
        send_time = first_send + delta
        if send_time > now:
            schedule.every().day.at(send_time.strftime("%H:%M")).do(
                lambda: asyncio.create_task(check_and_send_trial_end_messages())
            )


async def run_scheduler():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)


async def main():
    asyncio.create_task(run_scheduler())  # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–∑ send_messages_asio.py
    schedule.every(30).seconds.do(
        lambda: asyncio.create_task(send_messages_to_traders())
    )
    schedule_messages()
    await bot.infinity_polling()


if __name__ == "__main__":
    asyncio.run(main())
