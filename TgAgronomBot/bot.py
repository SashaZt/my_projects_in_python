import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from database import Database
from config import TOKEN, CHANNEL_USERNAME, ADMIN_IDS, MODERATION_GROUP_ID, NAME_CHANNEL
from loguru import logger
import os
import asyncio

# from Parse import TelegramParse

bot = telebot.TeleBot(TOKEN)
db = Database()
db.initialize_db()
USERS_PER_PAGE = 10
user_data = {}
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
products = [
    # ("–ü—à–µ–Ω–∏—Ü—è (2,3,4–∫–ª)", "product_wheat234"),
    ("–ü—à–µ–Ω–∏—Ü—è", "product_wheat"),
    ("–°–æ–Ω—è—à–Ω–∏–∫", "product_sunflower"),
    ("–°–æ—è", "product_soy"),
    ("–†—ñ–ø–∞–∫", "product_rapeseed"),
    ("–ñ–∏—Ç–æ", "product_rye"),
    ("–¢—Ä–∏—Ç–∏–∫–∞–ª–µ", "product_triticale"),
    ("–ö—É–∫—É—Ä—É–¥–∑–∞", "product_corn"),
    ("–Ø—á–º—ñ–Ω—å", "product_barley"),
    ("–ì–æ—Ä–æ—Ö", "product_pea"),
    ("–û–≤–µ—Å", "product_oat"),
    ("–ì—Ä–µ—á–∫–∞", "product_buckwheat"),
    ("–ù—ñ—à–µ–≤—ñ", "product_niches"),
]

# –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
regions = [
    ("–ö–∏—ó–≤—Å—å–∫–∞", "region_kyiv"),
    ("–õ—å–≤—ñ–≤—Å—å–∫–∞", "region_lviv"),
    ("–û–¥–µ—Å—å–∫–∞", "region_odesa"),
    ("–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "region_kharkiv"),
    ("–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", "region_dnipro"),
    ("–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", "region_zaporizhzhia"),
    ("–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", "region_vinnytsia"),
    ("–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", "region_poltava"),
    ("–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", "region_mykolaiv"),
    ("–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞", "region_chernihiv"),
    ("–°—É–º—Å—å–∫–∞", "region_sumy"),
    ("–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", "region_zhytomyr"),
    ("–ß–µ—Ä–∫–∞—Å—å–∫–∞", "region_cherkasy"),
    ("–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞", "region_rivne"),
]

user_messages = {}


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
def start_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    link_keyboard = types.InlineKeyboardButton(
        # text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—èüëâ", url=f"https://t.me/{CHANNEL_USERNAME}"
        text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—èüëâ",
        url=f"https://t.me/{NAME_CHANNEL}",
    )
    check_keyboard = types.InlineKeyboardButton(
        text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É‚úÖ", callback_data="check"
    )
    markup.add(link_keyboard, check_keyboard)
    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
def trial_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    register_button = types.InlineKeyboardButton(
        text="üöÄ–û—Ç—Ä–∏–º–∞—Ç–∏ 2 –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ üöÄ", callback_data="register"
    )
    markup.add(register_button)

    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def activity_markup():
    markup = types.InlineKeyboardMarkup(row_width=True)
    farmer_button = types.InlineKeyboardButton(
        text="üåæ –Ø —Ñ–µ—Ä–º–µ—Ä, —Ö–æ—á—É –ø—Ä–æ–¥–∞–≤–∞—Ç–∏", callback_data="farmer"
    )
    trader_button = types.InlineKeyboardButton(
        text="üìà –Ø —Ç—Ä–µ–π–¥–µ—Ä, —Ö–æ—á—É –∫—É–ø–∏—Ç–∏", callback_data="trader"
    )
    markup.add(farmer_button, trader_button)
    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
def product_markup(selected_products):
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for product in products:
        text = product[0]
        if product[0] in selected_products:
            text = "‚úÖ " + text
        buttons.append(types.InlineKeyboardButton(text=text, callback_data=product[1]))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i : i + 2])

    select_all_text = (
        "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ" if len(selected_products) == len(products) else "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ"
    )
    markup.add(
        types.InlineKeyboardButton(
            text=select_all_text, callback_data="select_all_products"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_product_selection"
        )
    )

    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
def region_markup(selected_regions):
    markup = types.InlineKeyboardMarkup()
    buttons = []
    for region in regions:
        text = region[0]
        if region[0] in selected_regions:
            text = "‚úÖ " + text
        buttons.append(types.InlineKeyboardButton(text=text, callback_data=region[1]))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i : i + 2])

    select_all_text = (
        "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ" if len(selected_regions) == len(regions) else "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ"
    )
    markup.add(
        types.InlineKeyboardButton(
            text=select_all_text, callback_data="select_all_regions"
        )
    )
    markup.add(
        types.InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="finish_region_selection"
        )
    )

    return markup


# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def admin_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))
    markup.add(types.KeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    # markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"))
    # markup.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"))
    return markup


def technical_support():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üì®–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—éüì®"))
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in ADMIN_IDS:
        bot.send_message(
            chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.", reply_markup=admin_markup()
        )
    elif not db.user_exists(user_id):

        nickname = message.from_user.username
        signup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        trial_duration = 172800  # 48 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        user_data[chat_id] = {
            "nickname": nickname,
            "signup_time": signup_time,
            "trial_duration": trial_duration,
            "role": None,
            "products": [],
            "regions": [],
            "state": "initial",
        }
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        with open("video.mp4", "rb") as video:
            bot.send_video(
                chat_id,
                video,
                caption="üöÄ<b>–û–¢–†–ò–ú–ê–ô–¢–ï 2 –î–ù–Ü –ë–ï–ó–ö–û–®–¢–û–í–ù–û–ì–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø</b>\n\n‚ÄºÔ∏è–î–∏–≤—ñ—Ç—å—Å—è –≤—ñ–¥–µ–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é‚ÄºÔ∏è\n\nüåΩ–û—Ç—Ä–∏–º—É–π—Ç–µ –ø—Ä—è–º—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–¥–∞–∂ –∑–µ—Ä–Ω–æ–≤–∏—Ö —Ç–∞ —ñ–Ω—à–∏—Ö –∫—É–ª—å—Ç—É—Ä –±–µ–∑ –ø–æ—Å–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤. –©–æ–¥–Ω—è –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–≤—ñ–∂—ñ –∑–∞—è–≤–∫–∏ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤üåª",
                parse_mode="HTML",
                reply_markup=trial_markup(),
            )
    else:
        # bot.send_message(
        #     chat_id,
        #     "üì®–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—éüì®",
        #     reply_markup=technical_support(),
        # )
        signup_time = db.get_signup_time(user_id)
        trial_duration = db.get_trial_duration(user_id)
        current_time = datetime.now()

        if signup_time:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ signup_time —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime
            if isinstance(signup_time, str):
                signup_time = datetime.strptime(signup_time, "%Y-%m-%d %H:%M:%S")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏ –∑–∞–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if trial_duration is None:
                trial_duration = 0

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            trial_end_time = signup_time + timedelta(seconds=trial_duration)
            remaining_time = trial_end_time - current_time

            if remaining_time.total_seconds() > 0:
                trial_days = remaining_time.days
                trial_hours = remaining_time.seconds // 3600
                bot.send_message(
                    chat_id,
                    f"–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ —ñ –≤–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ª–∏—à–∏–ª–æ—Å—å {trial_days} –¥–Ω—ñ–≤ —ñ {trial_hours} –≥–æ–¥–∏–Ω.",
                )
                return  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            else:
                bot.send_message(chat_id, "–í–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "register" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "register")
def callback_register(call):

    chat_id = call.message.chat.id
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    bot.send_message(
        chat_id,
        "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢üòâ. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!",
        reply_markup=start_markup(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "check" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == "check")
def callback_check_subscription(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    nickname = call.from_user.username  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.delete_message(chat_id=chat_id, message_id=call.message.id)

    if is_subscribed(user_id):
        if not db.user_exists(user_id):
            signup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            user_data[chat_id] = {
                "nickname": nickname,
                "signup_time": signup_time,
                "role": None,
                "products": [],
                "regions": [],
                "state": "initial",
            }
            bot.answer_callback_query(call.id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å! üéâ")
            sent_message = bot.send_message(
                chat_id,
                "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å! üéâ",
            )
            user_messages[chat_id] = [sent_message.message_id]
        else:
            bot.answer_callback_query(call.id, "–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞! üåü.")

        if chat_id in user_messages:
            for message_id in user_messages[chat_id]:
                bot.delete_message(chat_id=chat_id, message_id=message_id)

        # sent_message_1 = bot.send_message(
        #     chat_id, "–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª! üéâ –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—è –∑ –Ω–∞–º–∏! üöÄ"
        # )
        sent_message_2 = bot.send_message(
            chat_id,
            "–í–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å:",
            reply_markup=activity_markup(),
        )

        user_messages[chat_id] = sent_message_2.message_id

    else:
        sent_message = bot.send_message(
            chat_id,
            "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=start_markup(),
        )
        user_messages[chat_id] = [sent_message.message_id]


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
        channel_chat_id = CHANNEL_USERNAME  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º ID –∫–∞–Ω–∞–ª–∞
        member = bot.get_chat_member(channel_chat_id, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ "farmer" –∏–ª–∏ "trader"
@bot.callback_query_handler(func=lambda call: call.data in ["farmer", "trader"])
def activity_selection(call):
    chat_id = call.message.chat.id
    current_directory = os.getcwd()
    photo_path = os.path.join(current_directory, "img/crops.png")
    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
    role = "farmer" if call.data == "farmer" else "trader"
    user_data[chat_id]["role"] = role

    product_buttons = product_markup(user_data[chat_id]["products"])
    with open(photo_path, "rb") as photo:
        bot.send_photo(
            chat_id,
            photo,
            caption="üåΩ–í–∏–±–µ—Ä—ñ—Ç—å –∑–µ—Ä–Ω–æ–≤—ñ, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –∫—É–ª—å—Ç—É—Ä —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä¬ª",
            reply_markup=product_buttons,
        )


# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
# last_check_time = {}
# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
# daily_message_count = {}


# def can_send_message(user_id):
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
#     now = datetime.now()
#     if not (dtime(8, 0) <= now.time() <= dtime(20, 0)):
#         return False

#     last_sent = last_check_time.get(user_id)
#     if last_sent and now - last_sent < timedelta(
#         minutes=5
#     ):  # –£–º–µ–Ω—å—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 5 –º–∏–Ω—É—Ç
#         return False

#     count = daily_message_count.get(user_id, 0)
#     if count >= 20:  # –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ 20 –≤ –¥–µ–Ω—å
#         return False

#     return True


# def send_trial_end_message(user_id):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
#     message = (
#         "–í–∞—à–µ –ø—Ä–æ–±–Ω–µ –≤—Ä–µ–º—è –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å, –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É."
#     )
#     try:
#         sent_message = bot.send_message(user_id, message, reply_markup=tarif_markup())
#         logger.info(f"Sent trial period ended message to user {user_id}")
#         last_check_time[user_id] = datetime.now()
#         daily_message_count[user_id] = daily_message_count.get(user_id, 0) + 1
#         user_messages[user_id] = [sent_message.message_id]
#     except telebot.apihelper.ApiException as e:
#         logger.error(f"Failed to send message to user {user_id}: {e}")


# async def check_and_send_trial_end_messages():
#     logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
#     traders = await get_traders()
#     current_time = datetime.now()

#     for trader in traders:
#         user_id, role, signup, trial_duration, region, material = trader
#         signup_time = signup  # signup —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è datetime –æ–±—ä–µ–∫—Ç–æ–º
#         end_trial_time = signup_time + timedelta(seconds=trial_duration)

#         logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ {user_id} –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

#         if (
#             current_time > end_trial_time - timedelta(days=1)
#             and current_time <= end_trial_time
#             and can_send_message(user_id)
#         ):
#             send_trial_end_message(user_id)


# def tarif_markup():
#     markup = types.InlineKeyboardMarkup(row_width=True)
#     basic_button = types.InlineKeyboardButton(
#         text="–ë–∞–∑–æ–≤—ã–π", callback_data="tarif_basic"
#     )
#     standard_button = types.InlineKeyboardButton(
#         text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="tarif_standard"
#     )
#     extra_button = types.InlineKeyboardButton(
#         text="–≠–∫—Å—Ç—Ä–∞", callback_data="tarif_extra"
#     )
#     markup.add(basic_button, standard_button, extra_button)
#     return markup


# @bot.message_handler(commands=["tarif"])
# def send_tarif_options(message):
#     chat_id = message.chat.id
#     if chat_id in user_messages:
#         for message_id in user_messages[chat_id]:
#             bot.delete_message(chat_id=chat_id, message_id=message_id)
#         del user_messages[chat_id]

#     tarif_message = bot.send_message(
#         chat_id,
#         "–í–∞—à–µ –ø—Ä–æ–±–Ω–µ –≤—Ä–µ–º—è –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å, –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É.",
#         reply_markup=tarif_markup(),
#     )
#     user_messages[chat_id] = [tarif_message.message_id]


# @bot.callback_query_handler(func=lambda call: call.data.startswith("tarif_"))
# def tarif_selection(call):
#     chat_id = call.message.chat.id
#     tarif_type = call.data.split("_")[1]

#     tarif_descriptions = {
#         "basic": "–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞",
#         "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞",
#         "extra": "–≠–∫—Å—Ç—Ä–∞ —Ç–∞—Ä–∏—Ñ: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞",
#     }

#     bot.send_message(
#         chat_id, tarif_descriptions.get(tarif_type, "–í—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
#     )


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# def ask_product(chat_id):
#     msg = bot.send_message(
#         chat_id, "–©–æ –ø—Ä–æ–¥–∞—î—Ç–µ? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—à–µ–Ω–∏—Ü—è, —è—á–º—ñ–Ω—å, –≥–æ—Ä–æ—Ö —ñ —Ç.–¥.) üåæ"
#     )
#     bot.register_next_step_handler(msg, process_product)


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
# def process_product(message):
#     chat_id = message.chat.id
#     product = message.text
#     user_data[chat_id]["product"] = product
#     ask_region(chat_id)


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# def ask_region(chat_id):
#     msg = bot.send_message(chat_id, "–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Å–∫–ª–∞–¥? (–≤–∫–∞–∂—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω) üåç")
#     bot.register_next_step_handler(msg, process_region)


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
# def process_region(message):
#     chat_id = message.chat.id
#     region = message.text
#     user_data[chat_id]["region"] = region
#     ask_contact(chat_id)


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# def ask_contact(chat_id):
#     msg = bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É üìû")
#     bot.register_next_step_handler(msg, process_contact)


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
# def process_contact(message):
#     chat_id = message.chat.id
#     contact = message.text
#     user_data[chat_id]["contact"] = contact
#     send_application_to_moderation(chat_id)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
def send_application_to_moderation(chat_id):
    data = user_data[chat_id]
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    application_text = (
        f"–ù–û–í–ê –ó–ê–Ø–í–ö–ê ({date})\n\n"
        f"–°—ã—Ä—å–µ: {data['product']}\n"
        f"–†–µ–≥–∏–æ–Ω: {data['region']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}"
    )
    moderation_group_id = MODERATION_GROUP_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try:
        bot.send_message(moderation_group_id, application_text)
        bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–ª–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –î—è–∫—É—î–º–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        bot.send_message(
            chat_id,
            "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


# # –†–∞–±–æ—á–∏–π –∫–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω –∏ / –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
# def register_user(chat_id):
#     logger.info(f"Attempting to register user {chat_id}")

#     user_info = user_data.get(chat_id, {})
#     logger.info(f"user_data for {chat_id}: {user_info}")

#     if not user_info:
#         logger.error(f"No user data found for chat_id {chat_id}")
#         bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         return

#     nickname = user_info.get("nickname", "")
#     signup_time = user_info.get("signup_time", "")
#     role = user_info.get("role", "")
#     products = user_info.get("products", [])
#     regions = user_info.get("regions", [])

#     logger.info(
#         f"Registering user {chat_id} with role: {role}, products: {products}, regions: {regions}"
#     )

#     if products and regions and role:
#         if not db.user_exists(chat_id):
#             db.add_user(chat_id, nickname, signup_time, role)
#             db.set_trial_duration(chat_id, user_info.get("trial_duration", 172800))
#             logger.info(
#                 f"User {chat_id} added with signup_time {signup_time} and role {role}"
#             )
#         else:
#             logger.info(f"User {chat_id} already exists")

#         for product in products:
#             product_id = db.get_product_id_by_name(product)
#             if product_id is not None:
#                 db.add_user_raw_material(chat_id, product_id)
#                 logger.info(
#                     f"Product {product} with ID {product_id} added for user {chat_id}"
#                 )
#             else:
#                 logger.error(f"Product ID not found for product: {product}")

#         for region in regions:
#             region_id = db.get_region_id_by_name(region)
#             if region_id is not None:
#                 db.add_user_region(chat_id, region_id)
#                 logger.info(
#                     f"Region {region} with ID {region_id} added for user {chat_id}"
#                 )
#             else:
#                 logger.error(f"Region ID not found for region: {region}")


#         bot.send_message(chat_id, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ")
#     else:
#         logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
#         bot.send_message(
#             chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
#         )
def register_user(chat_id):
    logger.info(f"Attempting to register user {chat_id}")

    user_info = user_data.get(chat_id, {})
    logger.info(f"user_data for {chat_id}: {user_info}")

    if not user_info:
        logger.error(f"No user data found for chat_id {chat_id}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    nickname = user_info.get("nickname", "")
    signup_time = user_info.get("signup_time", "")
    role = user_info.get("role", "")
    products = user_info.get("products", [])
    regions = user_info.get("regions", [])

    logger.info(
        f"Registering user {chat_id} with role: {role}, products: {products}, regions: {regions}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
    if not products:
        bot.send_message(
            chat_id,
            "–í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç:",
            reply_markup=product_markup(user_data[chat_id]["products"]),
        )
        return

    if not regions:
        bot.send_message(
            chat_id,
            "–í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–µ–≥—ñ–æ–Ω:",
            reply_markup=region_markup(user_data[chat_id]["regions"]),
        )
        return

    if role and products and regions:
        if not db.user_exists(chat_id):
            db.add_user(chat_id, nickname, signup_time, role)
            db.set_trial_duration(chat_id, user_info.get("trial_duration", 172800))
            logger.info(
                f"User {chat_id} added with signup_time {signup_time} and role {role}"
            )
        else:
            logger.info(f"User {chat_id} already exists")

        for product in products:
            product_id = db.get_product_id_by_name(product)
            if product_id is not None:
                db.add_user_raw_material(chat_id, product_id)
                logger.info(
                    f"Product {product} with ID {product_id} added for user {chat_id}"
                )
            else:
                logger.error(f"Product ID not found for product: {product}")

        for region in regions:
            region_id = db.get_region_id_by_name(region)
            if region_id is not None:
                db.add_user_region(chat_id, region_id)
                logger.info(
                    f"Region {region} with ID {region_id} added for user {chat_id}"
                )
            else:
                logger.error(f"Region ID not found for region: {region}")

        bot.send_message(
            chat_id,
            "üéâ –í–∞—à—É –ø—Ä–æ–±–Ω—É –≤–µ—Ä—Å—ñ—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 2 –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.\n\n <b>–Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ —Ä–∏–Ω–∫—É, –≤–∏ –æ–¥—Ä–∞–∑—É —ó—Ö –æ—Ç—Ä–∏–º–∞—î—Ç–µ</b>üöÄ",
            parse_mode="HTML",
        )

    else:
        logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        bot.send_message(
            chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —É—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("product_")
    or call.data in ["select_all_products", "finish_product_selection"]
)
def product_selection(call):
    chat_id = call.message.chat.id
    if call.data == "select_all_products":
        if len(user_data[chat_id]["products"]) == len(products):
            user_data[chat_id]["products"] = []
        else:
            user_data[chat_id]["products"] = [product[0] for product in products]
    elif call.data == "finish_product_selection":
        user_data[chat_id]["state"] = "region_selection"
        bot.delete_message(chat_id=chat_id, message_id=call.message.id)
        photo_path = "img/region.png"
        region_buttons = region_markup(user_data[chat_id]["regions"])
        with open(photo_path, "rb") as photo:
            bot.send_photo(
                chat_id,
                photo,
                caption="üá∫üá¶–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä¬ª",
                reply_markup=region_buttons,
            )
        return
    else:
        product = call.data
        product_name = next((prod[0] for prod in products if prod[1] == product), None)
        if product_name:
            if product_name in user_data[chat_id]["products"]:
                user_data[chat_id]["products"].remove(product_name)
            else:
                user_data[chat_id]["products"].append(product_name)

    selected_products = user_data[chat_id]["products"]
    logger.info(f"Selected products for user {chat_id}: {selected_products}")
    bot.edit_message_reply_markup(
        chat_id=chat_id,
        message_id=call.message.id,
        reply_markup=product_markup(selected_products),
    )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("region_")
    or call.data in ["select_all_regions", "finish_region_selection"]
)
def region_selection(call):
    chat_id = call.message.chat.id
    if call.data == "select_all_regions":
        if len(user_data[chat_id]["regions"]) == len(regions):
            user_data[chat_id]["regions"] = []
        else:
            user_data[chat_id]["regions"] = [region[0] for region in regions]
    elif call.data == "finish_region_selection":
        register_user(chat_id)
        bot.delete_message(chat_id=chat_id, message_id=call.message.id)
        return
    else:
        region = call.data
        region_name = next((reg[0] for reg in regions if reg[1] == region), None)
        if region_name:
            if region_name in user_data[chat_id]["regions"]:
                user_data[chat_id]["regions"].remove(region_name)
            else:
                user_data[chat_id]["regions"].append(region_name)

    selected_regions = user_data[chat_id]["regions"]
    logger.info(f"Selected regions for user {chat_id}: {selected_regions}")
    bot.edit_message_reply_markup(
        chat_id=chat_id,
        message_id=call.message.id,
        reply_markup=region_markup(selected_regions),
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@bot.message_handler(commands=["set_trial"])
def set_trial(message):
    user_id = message.from_user.id
    try:
        duration = int(message.text.split()[1])
        db.set_trial_duration(user_id, duration)
        bot.send_message(
            message.chat.id, f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥."
        )
    except (IndexError, ValueError):
        bot.send_message(
            message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_trial <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö>"
        )


# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@bot.message_handler(
    func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    and message.from_user.id in ADMIN_IDS
)
def add_time_to_user(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 30):",
    )
    bot.register_next_step_handler(msg, process_add_time)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def process_add_time(message):
    try:
        user_id, duration = map(int, message.text.split())
        if db.user_exists(user_id):
            db.set_trial_duration(user_id, duration)
            bot.send_message(
                message.chat.id,
                f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.",
            )
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
        )


# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(
    func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    and message.from_user.id in ADMIN_IDS
)
def list_users(message):
    show_users_page(message.chat.id, 0)


# –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def show_users_page(chat_id, page):
    try:
        connection = db.create_connection()
        with connection:
            cursor = connection.cursor()
            cursor.execute(
                "SELECT user_id, nickname, signup, trial_duration FROM users_tg_bot"
            )
            users = cursor.fetchall()
            total_pages = (len(users) - 1) // USERS_PER_PAGE + 1
            start_index = page * USERS_PER_PAGE
            end_index = start_index + USERS_PER_PAGE
            users_on_page = users[start_index:end_index]

            response = f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n"
            for user in users_on_page:
                trial_days = user[3] // (24 * 60 * 60)
                response += f"\nID: {user[0]}, –ù–∏–∫–Ω–µ–π–º: {user[1]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[2]}, –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—ñ–æ–¥: {trial_days} –¥–Ω—ñ–≤\n"

            keyboard = InlineKeyboardMarkup()
            if page > 0:
                keyboard.add(
                    InlineKeyboardButton(
                        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page - 1}"
                    )
                )
            if page < total_pages - 1:
                keyboard.add(
                    InlineKeyboardButton(
                        "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_page_{page + 1}"
                    )
                )

            bot.send_message(chat_id, response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        bot.send_message(
            chat_id,
            "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@bot.callback_query_handler(
    func=lambda call: call.data.startswith("prev_page_")
    or call.data.startswith("next_page_")
)
def handle_pagination(call):
    page = int(call.data.split("_")[-1])
    show_users_page(call.message.chat.id, page)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
# async def send_selected_messages(chat_id, products, regions):
#     parser = TelegramParse(products, regions, chat_id, False, True)
#     await parser.start()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
# def is_subscribed(user_id):
#     """
#     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
#     """
#     try:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
#         channel_chat_id = CHANNEL_USERNAME  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º ID –∫–∞–Ω–∞–ª–∞
#         member = bot.get_chat_member(channel_chat_id, user_id)
#         return member.status in ["member", "administrator", "creator"]
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
#         return False


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(non_stop=True)
