import telebot
import asyncio
from datetime import datetime, timedelta, time as dtime
import logging
import schedule
from config import TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
last_check_time = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
daily_message_count = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}


def can_send_message(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    now = datetime.now()
    if not (dtime(8, 0) <= now.time() <= dtime(20, 0)):
        return False

    last_sent = last_check_time.get(user_id)
    if last_sent and now - last_sent < timedelta(minutes=1):
        return False

    count = daily_message_count.get(user_id, 0)
    if count >= 20:
        return False

    return True


def tarif_markup():
    markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    basic_button = telebot.types.InlineKeyboardButton(
        text="–ë–∞–∑–æ–≤—ã–π", callback_data="tarif_basic"
    )
    standard_button = telebot.types.InlineKeyboardButton(
        text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="tarif_standard"
    )
    extra_button = telebot.types.InlineKeyboardButton(
        text="–≠–∫—Å—Ç—Ä–∞", callback_data="tarif_extra"
    )
    markup.add(basic_button, standard_button, extra_button)
    return markup


def send_trial_end_message(user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    message = (
        "–í–∞—à–µ –ø—Ä–æ–±–Ω–µ –≤—Ä–µ–º—è –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å, –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É.\n"
        "üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 1 –∫—É–ª—å—Ç—É—Ä—É\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 1 —Ä–µ–≥—ñ–æ–Ω—É\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞780 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "üåΩ–°–¢–ê–ù–î–ê–†–¢ (–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π)\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 5 –∫—É–ª—å—Ç—É—Ä\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 3 —Ä–µ–≥—ñ–æ–Ω—É\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞1985 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "üå±–ï–ö–°–¢–†–ê\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ª—å—Ç—É—Ä\n"
        "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤\n"
        "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "üí∞3890 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
        "–Ø–∫–∏–π –∑ —Ç–∞—Ä–∏—Ñ—ñ–≤ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–∏?\n"
        "üëáüëá–û–ë–ï–†–Ü–¢–¨üëáüëá"
    )
    try:
        sent_message = bot.send_message(user_id, message, reply_markup=tarif_markup())
        logger.info(f"Sent trial period ended message to user {user_id}")
        last_check_time[user_id] = datetime.now()
        daily_message_count[user_id] = daily_message_count.get(user_id, 0) + 1
        user_messages[user_id] = [sent_message.message_id]
    except telebot.apihelper.ApiException as e:
        logger.error(f"Failed to send message to user {user_id}: {e}")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "tarif_basic":
        message_basic = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n"
            "üåæ–ë–ê–ó–û–í–ò–ô –ü–õ–ê–ù\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 1 –∫—É–ª—å—Ç—É—Ä—É\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 1 —Ä–µ–≥—ñ–æ–Ω—É\n"
            "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
            "üí∞780 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:\n"
            "üí≥ –ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫\n"
            "5457 0822 5614 6379\n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º: @AgroHelper_supp"
        )
        bot.send_message(call.message.chat.id, message_basic)
    elif call.data == "tarif_standard":
        message_standard = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n"
            "üåΩ–°–¢–ê–ù–î–ê–†–¢ (–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π)\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ 5 –∫—É–ª—å—Ç—É—Ä\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ 3 —Ä–µ–≥—ñ–æ–Ω—É\n"
            "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
            "üí∞1985 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:\n"
            "üí≥ –ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫\n"
            "5457 0822 5614 6379\n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º: @AgroHelper_supp"
        )
        bot.send_message(call.message.chat.id, message_standard)
    elif call.data == "tarif_extra":
        message_extra = (
            "–í–∏ –æ–±—Ä–∞–ª–∏:\n"
            "üå±–ï–ö–°–¢–†–ê\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ª—å—Ç—É—Ä\n"
            "- –î–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤\n"
            "- –©–æ–¥–µ–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
            "üí∞3890 –≥—Ä–Ω. /–º—ñ—Å—è—Ü—å\n\n"
            "–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ—ñ–≤:\n"
            "üí≥ –ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫\n"
            "5457 0822 5614 6379\n"
            "–û–¥–µ—Ä–∂—É–≤–∞—á: –°—Ç–µ—Ü–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑ —á–µ–∫–æ–º: @AgroHelper_supp"
        )
        bot.send_message(call.message.chat.id, message_extra)


async def check_and_send_trial_end_messages():
    from send_messages_asio import get_traders

    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    traders = await get_traders()
    current_time = datetime.now()

    for trader in traders:
        user_id, role, signup, trial_duration, region, material = trader
        signup_time = signup
        end_trial_time = signup_time + timedelta(seconds=trial_duration)

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ {user_id} –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

        if (
            current_time > end_trial_time - timedelta(days=1)
            and current_time <= end_trial_time
            and can_send_message(user_id)
        ):
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä—É {user_id}")
            send_trial_end_message(user_id)


async def run_scheduler():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)


def main():
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º main")
    schedule.every(1).minute.do(
        lambda: asyncio.create_task(check_and_send_trial_end_messages())
    )

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(run_scheduler())
    loop.run_forever()


if __name__ == "__main__":
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º main")
    main()
    bot.polling()  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline-–∫–Ω–æ–ø–æ–∫
