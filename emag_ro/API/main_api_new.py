import base64
import json
import re
import sys
import time
from pathlib import Path

import requests
from loguru import logger
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

current_directory = Path.cwd()
log_directory = current_directory / "log"
data_directory = current_directory / "data"
data_directory.mkdir(parents=True, exist_ok=True)
log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def get_headers_session():
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    username = "resteqsp@gmail.com"
    password = "Q7Hd.ATGCc5$ym2"
    auth_string = f"{username}:{password}"
    base64_auth = base64.b64encode(auth_string.encode()).decode()

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        "Authorization": f"Basic {base64_auth}",
        "Content-Type": "application/json",
    }
    api_url = "https://marketplace-api.emag.ro/api-3"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    session = requests.Session()
    retry = Retry(total=3, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])
    adapter = HTTPAdapter(max_retries=retry)
    session.mount("http://", adapter)
    session.mount("https://", adapter)

    return api_url, headers, session


# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
api_url, headers, session = get_headers_session()


def validate_product_data(product):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞"""
    required_fields = [
        "id",
        "category_id",
        "name",
        "part_number",
        "brand",
        "description",
        "status",
        "sale_price",
        "vat_id",
        "stock",
        "handling_time",
    ]

    missing_fields = [field for field in required_fields if field not in product]
    if missing_fields:
        raise ValueError(f"Missing required fields: {', '.join(missing_fields)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    if "characteristics" in product:
        for char in product["characteristics"]:
            if not all(key in char for key in ["id", "value"]):
                raise ValueError("Invalid characteristic format")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ stock
    if not isinstance(product["stock"], list) or not product["stock"]:
        raise ValueError("Stock must be a non-empty list")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ handling_time
    if not isinstance(product["handling_time"], list) or not product["handling_time"]:
        raise ValueError("Handling time must be a non-empty list")


def get_vat_rates():
    response = session.post(f"{api_url}/vat/read", headers=headers)
    vat_rates = response.json()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º vat_rates –≤ —Ñ–∞–π–ª vat_rates.json
    vat_rates_file_path = current_directory / "vat_rates.json"
    with open(vat_rates_file_path, "w", encoding="utf-8") as vat_file:
        json.dump(vat_rates, vat_file, ensure_ascii=False, indent=4)


def clean_description(description):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ img —Ç–µ–≥–æ–≤ —Å base64
    pattern = (
        r'<img[^>]*?class="lazy"[^>]*?data-src="([^"]*)"[^>]*?src="data:image[^>]*?>'
    )

    # –ó–∞–º–µ–Ω–∞ –Ω–∞ —á–∏—Å—Ç—ã–π img —Ç–µ–≥
    cleaned = re.sub(pattern, r'<img src="\1" alt="Product Image"/>', description)

    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    cleaned = re.sub(r'\s+(?:height|width|style|align)=["\']\s*["\']', "", cleaned)

    return cleaned


def upload_product(product_data):
    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ data –∏ —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(product_data.get("data"), list):
            raise ValueError("Data should be a list of products")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–∫–µ
        for product in product_data["data"]:
            validate_product_data(product)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ–≤—ã–µ
        for product in product_data["data"]:
            product["id"] = int(product["id"])
            product["category_id"] = int(product["category_id"])
            product["status"] = int(product["status"])
            product["sale_price"] = float(product["sale_price"])
            product["min_sale_price"] = float(product["min_sale_price"])
            product["max_sale_price"] = float(product["max_sale_price"])
            product["vat_id"] = int(product["vat_id"])
            product["warranty"] = int(product["warranty"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = session.post(
            f"{api_url}/product_offer/save", headers=headers, json=product_data
        )
        # –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"Response status code: {response.status_code}")
        logger.debug(f"Response content: {response.text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        response.raise_for_status()
        try:
            result = response.json()
        except json.JSONDecodeError:
            logger.error(f"Failed to parse JSON response: {response.text}")
            raise Exception("Invalid JSON response")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ eMAG
        if result.get("isError"):
            error_messages = result.get("messages", [])
            raise Exception(f"eMAG API Error: {error_messages}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if "doc_errors" in result:
            logger.warning(f"Documentation errors: {result['doc_errors']}")

        return result

    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {str(e)}")
        # –í—ã–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        if hasattr(e, "response") and e.response:
            logger.error(f"Response status code: {e.response.status_code}")
            logger.error(f"Response content: {e.response.text}")
        raise


def check_category_access(category_id):
    # –í —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏–º is_mandatory": 1 - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è

    try:
        response = session.post(
            f"{api_url}/category/read", headers=headers, json={"id": category_id}
        )
        data = response.json()
        output_json_file = data_directory / f"category_{category_id}.json"
        with open(output_json_file, "w", encoding="utf-8") as json_file:
            json.dump(data, json_file, ensure_ascii=False, indent=4)
        logger.info(f"Category data saved to {output_json_file}")

        return data.get("is_allowed", 0) == 1
    except Exception as e:
        logger.error(f"Category access check failed: {str(e)}")
        return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def check_auth():
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        response = session.post(f"{api_url}/category/count", headers=headers)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Auth check failed: {str(e)}")
        return None


def main():
    # –í—ã–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
        with open("product.json", "r", encoding="utf-8") as file:
            product_data = json.load(file)
        # –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        product_data["data"][0]["description"] = clean_description(
            product_data["data"][0]["description"]
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        result = upload_product(product_data)
        logger.info("Product uploaded successfully!")
        logger.info(f"Response: {json.dumps(result, indent=2)}")

    except Exception as e:
        logger.error(f"Error uploading product: {str(e)}")
    # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    # product_data = {
    #     "data": [
    #         {
    #             "id": 1234567,
    #             "category_id": 1868,
    #             "name": "Banda de alergat electrica FitTronic D100",
    #             "brand": "FitTronic",
    #             "part_number": "XR500-2023",
    #             "description": "Cumpara Banda de alergat electrica FitTronic¬Æ D100, motor 2.5 CP, Bluetooth, Kinomap, Zwift, Newrunway, Self oil - ungere automata, sistem de amortizare in 6 puncte + arcuri, pliabila cu cilindru, intrare mp3 si USB pt muzica, cheie siguranta de la eMAG! Ai libertatea sa platesti in rate, beneficiezi de promotiile zilei, deschiderea coletului la livrare, easybox, retur gratuit in 30 de zile si Instant Money Back.",
    #             "ean": ["5948004020165"],
    #             "status": 1,
    #             "sale_price": 1999.99,
    #             "recommended_price": 2499.99,
    #             "min_sale_price": 1899.99,
    #             "max_sale_price": 2599.99,
    #             "vat_id": 1,
    #             "warranty": 24,
    #             # "family": {
    #             #     "id": 219,
    #             #     "name": "Culoare (visible)",
    #             #     "family_type_id": 219,
    #             # },
    #             "characteristics": [
    #                 {
    #                     "id": 7764,  # Maximum supported weight (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞)
    #                     "value": "140 kg",
    #                 },
    #                 {
    #                     "id": 8147,  # Number of programs (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞)
    #                     "value": "12",
    #                 },
    #                 {
    #                     "id": 9080,  # Leg length (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞)
    #                     "value": "Electric",
    #                 },
    #                 # {"id": 5401, "value": "Black"},  # Color
    #                 # {"id": 6779, "value": "130 cm"},  # Height
    #                 # {"id": 6780, "value": "85 cm"},  # Width
    #                 # {"id": 6862, "value": "180 cm"},  # Length
    #                 # {"id": 6878, "value": "120 kg"},  # Weight
    #                 # {"id": 7163, "value": "20 km/h"},  # Maximum speed
    #                 # {"id": 7442, "value": "2.50 W"},  # Power engine
    #                 # {"id": 9082, "value": "Running"},  # Sport
    #                 # {"id": 9083, "value": "Professional"},  # Ability level
    #                 # {"id": 9275, "value": "Electric"},  # Incline type
    #                 # {"id": 9277, "value": "15"},  # Incline percentage
    #                 # {"id": 9280, "value": "20"},  # Levels of speed
    #                 # {"id": 9281, "value": "10"},  # Levels of incline
    #                 # {"id": 9282, "value": "0.5 km/h"},  # Minimum speed
    #                 # {"id": 9283, "value": "Yes"},  # Training computer
    #                 # {"id": 9286, "value": "500 x 1400"},  # Running surface
    #                 # {
    #                 #     "id": 9139,  # Functions
    #                 #     "value": "Heart rate monitor, Bluetooth, LCD display, Speakers",
    #                 # },
    #                 # {
    #                 #     "id": 8382,  # Measured values
    #                 #     "value": "Heart rate, Distance, Calories, Speed, Time",
    #                 # },
    #             ],
    #             "images": [
    #                 {
    #                     "display_type": 1,  # 1 = –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    #                     "url": "https://static.efitness.ro/i/imagini-produse/banda-de-alergat-electrica-fittronic-d100-10.jpg",
    #                 },
    #                 {
    #                     "display_type": 2,  # 2 = –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    #                     "url": "https://static.efitness.ro/i/imagini-produse/banda-de-alergat-electrica-fittronic-d100-2.jpg",
    #                 },
    #                 {
    #                     "display_type": 0,  # 0 = –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    #                     "url": "https://static.efitness.ro/i/imagini-produse/banda-de-alergat-electrica-fittronic-d100-3.png",
    #                 },
    #             ],
    #             "stock": [{"warehouse_id": 1, "value": 10}],
    #             "handling_time": [{"warehouse_id": 1, "value": 2}],
    #             # "safety_information": "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—á—Ç–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ 14 –ª–µ—Ç.",
    #             # "manufacturer": [
    #             #     {
    #             #         "name": "FitnessExpert Manufacturing Ltd.",
    #             #         "address": "123 Industrial Park, Manufacturing City, Country",
    #             #         "email": "info@fitnessexpert-manufacturing.com",
    #             #     }
    #             # ],
    #         }
    #     ]
    # }


if __name__ == "__main__":
    main()
    # check_category_access(3698)
