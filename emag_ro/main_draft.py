import base64
import json
import sys
import time
from pathlib import Path

import requests
from loguru import logger
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

current_directory = Path.cwd()
log_directory = current_directory / "log"
log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def get_headers_session():

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    username = "resteqsp@gmail.com"
    password = "Q7Hd.ATGCc5$ym2"
    auth_string = f"{username}:{password}"
    base64_auth = base64.b64encode(auth_string.encode()).decode()

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        "Authorization": f"Basic {base64_auth}",
        "Content-Type": "application/json",
    }
    api_url = "https://marketplace-api.emag.ro/api-3"
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    session = requests.Session()
    retry = Retry(connect=3, backoff_factor=0.5)
    adapter = HTTPAdapter(max_retries=retry)
    session.mount("http://", adapter)
    session.mount("https://", adapter)

    return api_url, headers, session


api_url, headers, session = get_headers_session()


def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    response = session.get(f"{api_url}/category/read", headers=headers)
    if response.status_code == 200:
        return response.json()
    return None


def get_vat_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –ù–î–°"""
    response = session.get(f"{api_url}/vat/read", headers=headers)
    if response.status_code == 200:
        return response.json()
    return None


def get_handling_times():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞"""
    response = session.get(f"{api_url}/handling_time/read", headers=headers)
    if response.status_code == 200:
        return response.json()
    return None


def prepare_draft_data(product):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    draft_data = {
        "id": product["id"],
        "name": product["name"],
        "brand": product["brand"],
        "part_number": product["part_number"],
        "category_id": product["category_id"],
        "sale_price": product.get("sale_price", 0),
        "vat_id": product.get("vat_id", 4003),
        "stock": [{"warehouse_id": 1, "value": product.get("stock", 0)}],
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        "characteristics": [
            {"id": 9623, "value": "Maini"},  # Zona corporala
            {
                "id": 5704,  # Tip produs
                "value": "Pila electrica",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            },
        ],
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        "images": [
            {
                "display_type": 1,  # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                "url": product["main_image"],  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
            }
        ],
    }

    if "additional_images" in product:
        for img_url in product["additional_images"]:
            draft_data["images"].append({"display_type": 0, "url": img_url})

    # –î–æ–±–∞–≤–ª—è–µ–º EAN –µ—Å–ª–∏ –µ—Å—Ç—å
    if "ean" in product and product["ean"]:
        valid_eans = []
        for ean in product["ean"]:
            if validate_ean(ean):
                valid_eans.append(ean)
            else:
                logger.warning(f"Invalid EAN: {ean}")
        if valid_eans:
            draft_data["ean"] = valid_eans
        else:
            raise ValueError("No valid EAN codes provided")
    else:
        raise ValueError("EAN is mandatory")

    return draft_data


# def send_draft(product_draft):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
#     # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç API
#     data = {"data": [product_draft]}  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
#     response = session.post(f"{api_url}/product_offer/save", headers=headers, json=data)
#     return response.json()


# def get_allowed_brands():
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
#     try:
#         response = session.get(f"{api_url}/brands/read", headers=headers)
#         if response.status_code == 200:
#             return response.json()
#         logger.error(f"Failed to get brands. Status code: {response.status_code}")
#         logger.error(f"Response: {response.text}")
#     except Exception as e:
#         logger.error(f"Exception getting brands: {str(e)}")
#     return None


def validate_ean(ean):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ EAN –∫–æ–¥–∞"""
    if not ean.isdigit():
        return False
    if len(ean) not in [8, 13]:  # EAN-8 –∏–ª–∏ EAN-13
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    checksum = 0
    for i, digit in enumerate(reversed(ean[:-1])):
        checksum += int(digit) * (3 if i % 2 else 1)
    calculated_check = (10 - (checksum % 10)) % 10
    return calculated_check == int(ean[-1])


def process_products(products):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    results = []
    logger.info(f"Starting processing {len(products)} products")

    for product in products:
        try:
            logger.info(f"Processing product ID: {product['id']}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            validate_product_data(product)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
            result = process_draft(product)
            results.append(result)

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.4)

        except Exception as e:
            logger.error(f"Error processing product {product['id']}: {str(e)}")
            results.append(
                {
                    "id": product["id"],
                    "result": {"isError": True, "message": str(e)},
                    "type": "error",
                }
            )

    logger.info(f"Finished processing {len(products)} products")
    return results


def send_draft(product_draft):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
    draft_data = {
        "id": product_draft["id"],
        "name": product_draft["name"],
        "part_number": product_draft["part_number"],
        "brand": product_draft["brand"],
    }

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    optional_fields = ["ean", "category_id", "source_language"]
    for field in optional_fields:
        if field in product_draft:
            draft_data[field] = product_draft[field]

    response = session.post(f"{api_url}/api/v1/draft", headers=headers, json=draft_data)
    return response.json()


def get_draft(ext_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–æ ID"""
    response = session.get(f"{api_url}/api/v1/draft/{ext_id}", headers=headers)
    return response.json()


def update_draft(ext_id, product_data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    response = session.put(
        f"{api_url}/api/v1/draft/{ext_id}", headers=headers, json=product_data
    )
    return response.json()


def get_drafts_list(page=1, per_page=100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
    params = {"page": page, "per_page": per_page}
    response = session.get(f"{api_url}/api/v1/draft", headers=headers, params=params)
    return response.json()


def check_existing_product(ean):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ EAN –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ part_number_key"""
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –º–∞—Å—Å–∏–≤
    data = {"data": {"ean": [ean]}}  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å

    response = session.post(f"{api_url}/product_offer/read", headers=headers, json=data)
    data = response.json()
    if not data.get("isError") and data.get("results"):
        return data["results"][0].get("part_number_key")
    return None


def attach_offer_to_existing_product(product, part_number_key):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É"""
    offer_data = {
        "id": product["id"],
        "part_number_key": part_number_key,
        "name": product["name"],
        "status": 1,
        "sale_price": product.get("sale_price"),
        "vat_id": product.get("vat_id"),
        "stock": [{"warehouse_id": 1, "value": product.get("stock", 0)}],
        "handling_time": [{"warehouse_id": 1, "value": 1}],
    }

    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤
    data = {"data": [offer_data]}  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å

    response = session.post(f"{api_url}/product_offer/save", headers=headers, json=data)
    return response.json()


def get_category_details(category_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    response = session.post(
        f"{api_url}/category/read", headers=headers, json={"data": {"id": category_id}}
    )
    if response.status_code == 200:
        data = response.json()
        if not data.get("isError") and data.get("results"):
            return data["results"][0]
    return None


def validate_category_characteristics(product, category_details):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not category_details:
        return False

    required_characteristics = [
        char["id"]
        for char in category_details.get("characteristics", [])
        if char.get("is_mandatory")
    ]

    product_characteristics = [
        char["id"] for char in product.get("characteristics", [])
    ]

    missing = set(required_characteristics) - set(product_characteristics)
    if missing:
        raise ValueError(f"Missing mandatory characteristics: {missing}")

    return True


def validate_product_data(product):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if "main_image" not in product:
        raise ValueError("Main image is required")

    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–µ–Ω–¥–∞
    # allowed_brands = get_allowed_brands()
    # if allowed_brands and product["brand"] not in allowed_brands:
    #     raise ValueError(f"Invalid brand: {product['brand']}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    required_characteristics = {
        5704: ["Pila electrica"],  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Tip produs
        9623: ["Maini"],  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Zona corporala
    }

    for char in product.get("characteristics", []):
        char_id = char["id"]
        if char_id in required_characteristics:
            if char["value"] not in required_characteristics[char_id]:
                raise ValueError(
                    f"Invalid value for characteristic {char_id}: {char['value']}"
                )

    return True


def process_draft(product):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        draft_result = send_draft(
            {
                "id": product["id"],
                "name": product["name"],
                "part_number": product["part_number"],
                "brand": product["brand"],
                "category_id": product.get("category_id"),
                "ean": product.get("ean"),
                "source_language": product.get("source_language", "ro_RO"),
            }
        )

        if draft_result.get("id"):  # –ï—Å–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
            draft_id = draft_result["id"]
            logger.info(f"Draft created successfully with ID: {draft_id}")

            # 2. –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            update_data = {
                "id": product["id"],
                "characteristics": product.get("characteristics", []),
                "images": product.get("images", []),
            }

            update_result = update_draft(draft_id, update_data)
            return {
                "id": product["id"],
                "draft_id": draft_id,
                "result": update_result,
                "type": "draft",
            }
        else:
            logger.error(f"Failed to create draft for product {product['id']}")
            return {"id": product["id"], "result": draft_result, "type": "error"}

    except Exception as e:
        logger.error(f"Error processing draft for product {product['id']}: {str(e)}")
        return {
            "id": product["id"],
            "result": {"isError": True, "message": str(e)},
            "type": "error",
        }


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    # brands = get_allowed_brands()
    # if brands and not brands.get("isError"):
    #     logger.info("Brands loaded successfully")
    #     with open("brands.json", "w") as f:
    #         json.dump(brands, f)
    # else:
    #     logger.error("Error loading brands")
    #     sys.exit(1)
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    categories = get_categories()
    if categories and not categories.get("isError"):
        logger.info("Categories loaded successfully")
        with open("categories.json", "w") as f:
            json.dump(categories, f)
    else:
        logger.error("Error loading categories")
        sys.exit(1)  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    vat_rates = get_vat_rates()
    if vat_rates and not vat_rates.get("isError"):
        logger.info("VAT rates loaded successfully")
        with open("vat_rates.json", "w") as f:
            json.dump(vat_rates, f)
    else:
        logger.error("Error loading VAT rates")
        sys.exit(1)  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ù–î–°

    # 2. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_products = [
        {
            "id": 17006903216,
            "name": "3,5-calowa konsola D22 HD Large Screen",
            "brand": "Example Brand",  # –†–µ–∞–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
            "part_number": "A8-1106-A7085",
            "category_id": 2768,
            "ean": ["5901234123457"],
            "sale_price": 153.0,
            "vat_id": 4003,
            "stock": 10,
            "characteristics": [
                {"id": 9623, "value": "Maini"},
                {"id": 5704, "value": "Pila electrica"},  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            ],
            "main_image": "https://example.com/images/main.jpg",  # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            "additional_images": [  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                "https://example.com/images/1.jpg",
                "https://example.com/images/2.jpg",
            ],
        },
        {
            "id": 17006903217,
            "name": "Test Product Without EAN",
            "brand": "Test Brand",
            "part_number": "TEST-001",
            "category_id": 2768,
            "ean": ["4003994155486"],
            "sale_price": 99.99,
            "vat_id": 4003,
            "stock": 5,
            "characteristics": [
                {"id": 9623, "value": "Maini"},
                {"id": 5704, "value": "Freza electrica"},
            ],
        },
    ]

    # 3. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    validated_products = []
    for product in test_products:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_details = get_category_details(product["category_id"])
            if not category_details:
                logger.error(
                    f"Category {product['category_id']} not found for product {product['id']}"
                )
                continue

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            validate_category_characteristics(product, category_details)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            validate_product_data(product)

            validated_products.append(product)
            logger.info(f"Product {product['id']} validated successfully")

        except ValueError as e:
            logger.error(f"Validation error for product {product['id']}: {str(e)}")

    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if validated_products:
        try:
            results = process_products(validated_products)
            logger.info("\nProcessing results:")
            for result in results:
                logger.info(f"Product ID: {result['id']}")
                logger.info(
                    f"Status: {'Success' if not result['result'].get('isError') else 'Error'}"
                )
                logger.info(f"Response: {result['result']}")
                logger.info("-" * 50)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open("processing_results.json", "w") as f:
                json.dump(results, f, indent=2)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            drafts = len([r for r in results if r.get("type") == "draft"])
            attached = len([r for r in results if r.get("type") == "attached"])
            validation_errors = len(
                [r for r in results if r.get("type") == "validation_error"]
            )
            api_errors = len([r for r in results if r.get("type") == "error"])

            logger.info("\nProcessing statistics:")
            logger.info(f"Total products to process: {len(test_products)}")
            logger.info(f"Products passed validation: {len(validated_products)}")
            logger.info(f"New drafts created: {drafts}")
            logger.info(f"Attached to existing products: {attached}")
            logger.info(f"Validation errors: {validation_errors}")
            logger.info(f"API errors: {api_errors}")

        except Exception as e:
            logger.error(f"Error processing products: {str(e)}")
    else:
        logger.error("No products passed validation")
