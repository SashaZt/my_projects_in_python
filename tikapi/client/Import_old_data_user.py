import asyncio
import json
import sys
import time
from datetime import datetime, timezone
from pathlib import Path

from client_import_live import import_daily_analytics
from client_import_user import import_all_users, import_user_data
from config import (
    DATA_DIR,
    TEMP_DIR,
    USER_INFO_DIR,
    USER_JSON_FILE,
    USER_LIVE_ANALYTICS_DIR,
    USER_LIVE_LIST_DIR,
)
from loguru import logger
from main_sheets import sheets

from tikapi import ResponseException, TikAPI, ValidationException

current_directory = Path.cwd()
log_directory = current_directory / "log"
log_directory.mkdir(parents=True, exist_ok=True)

user_json_file = DATA_DIR / "users.json"

log_file_path = log_directory / "log_message.log"


api_key = TikAPI("ozUfhAazflu4zj1LyqvxYv4IaAs6OCX9cX0zI1fQxexQVxQU")

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def load_product_data(file_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_name, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞: {e}")
        return None


"""
–ù–∞—á–∞–ª—Å—è –±–ª–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""


def user_live_analytics():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    timestamp = get_current_day_timestamp()
    users = load_users_data()
    analytics_results = collect_users_analytics(users, timestamp)
    save_analytics_results(analytics_results, timestamp)
    process_analytics_results(analytics_results)


def get_current_day_timestamp():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Unix timestamp (–Ω–∞—á–∞–ª–æ –¥–Ω—è –ø–æ UTC)."""
    return int(
        datetime.now(timezone.utc)
        .replace(hour=0, minute=0, second=0, microsecond=0)
        .timestamp()
    )


def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    return load_product_data(USER_JSON_FILE)


def collect_users_analytics(users, timestamp, days=30):
    """–°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    result = []

    for user in users[:1]:
        logger.info(user)
        analytics_data = get_user_analytics(user, timestamp, days)
        if analytics_data:
            # analytics_data —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã
            if isinstance(analytics_data, list):
                result.extend(analytics_data)
            else:
                result.append(analytics_data)

    return result


def get_user_analytics(user, timestamp, days=30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    account_key = user["account_key"]
    tik_tok_id = user["tik_tok_id"]
    user_data_file = get_user_data_filename(timestamp, tik_tok_id)

    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    cached_data = load_cached_analytics(user_data_file, tik_tok_id)
    if cached_data:
        return cached_data

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ API
    return fetch_user_analytics_from_api(account_key, tik_tok_id, user_data_file, days)


def get_user_data_filename(timestamp, tik_tok_id):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return TEMP_DIR / f"user_live_analytics_{timestamp}_{tik_tok_id}.json"


def load_cached_analytics(user_data_file, tik_tok_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    if not user_data_file.exists():
        return None

    with open(user_data_file, "r", encoding="utf-8") as json_file:
        user_data = json.load(json_file)

    combined_data = parsing_json_user_live_analytics(user_data)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É
    results = []
    for entry in combined_data:
        result = {
            "tik_tok_id": tik_tok_id,
            "diamonds_now": entry["diamonds_now"],
            "live_duration_now": entry["live_duration_now"],
            "date": entry["date"],
        }
        results.append(result)

    return results


def fetch_user_analytics_from_api(account_key, tik_tok_id, user_data_file, days=30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    account_user = api_key.user(accountKey=account_key)

    response_json = retry_api_request(account_user, days)
    if not response_json:
        logger.warning(account_key)
        return None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –≤ —Ñ–∞–π–ª
    with open(user_data_file, "w", encoding="utf-8") as json_file:
        json.dump(response_json, json_file, ensure_ascii=False, indent=4)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    combined_data = parsing_json_user_live_analytics(response_json)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É
    results = []
    for entry in combined_data:
        result = {
            "tik_tok_id": tik_tok_id,
            "diamonds_now": entry["diamonds_now"],
            "live_duration_now": entry["live_duration_now"],
            "date": entry["date"],
        }
        results.append(result)

    return results


def retry_api_request(account_user, days, max_attempts=1):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    attempt = 0

    while attempt < max_attempts:
        try:
            response = account_user.live.analytics(days=days)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if hasattr(response, "status_code") and response.status_code == 200:
                return response.json()

            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            attempt += 1
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ {getattr(response, 'status_code', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
            )
            time.sleep(5)

        except ValidationException as e:
            log_validation_error(e, attempt, max_attempts)
            attempt += 1
            time.sleep(5)

        except ResponseException as e:
            log_response_error(e, attempt, max_attempts)
            attempt += 1
            time.sleep(5)

        except Exception as e:
            log_unexpected_error(e, attempt, max_attempts)
            attempt += 1
            time.sleep(5)

    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return None


def log_validation_error(error, attempt, max_attempts):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {error}")
    if hasattr(error, "field"):
        logger.error(f"–ü–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π: {error.field}")


def log_response_error(error, attempt, max_attempts):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–≤–µ—Ç–∞ API."""
    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {error}")
    if hasattr(error, "response") and hasattr(error.response, "status_code"):
        logger.error(f"–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {error.response.status_code}")


def log_unexpected_error(error, attempt, max_attempts):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {error}")


def save_analytics_results(result, timestamp):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª."""
    user_live_analytic_json_file = USER_LIVE_ANALYTICS_DIR / f"{timestamp}.json"

    with open(user_live_analytic_json_file, "w", encoding="utf-8") as json_file:
        json.dump(result, json_file, ensure_ascii=False, indent=4)

    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {result}")


def process_analytics_results(result):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
        asyncio.run(import_daily_analytics(result))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


def parsing_json_user_live_analytics(json_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞—Ö
    diamonds_values = []
    diamonds_dates = []

    if (
        "data" in json_data
        and "diamonds_detail" in json_data["data"]
        and "diamonds" in json_data["data"]["diamonds_detail"]
        and "Total" in json_data["data"]["diamonds_detail"]["diamonds"]
    ):
        diamonds_list = json_data["data"]["diamonds_detail"]["diamonds"]["Total"]
        for item in diamonds_list:
            diamonds_values.append(item["Value"])
            diamonds_dates.append(item["Date"])
    else:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞—Ö –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º JSON")
        diamonds_values = [0]
        diamonds_dates = [0]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
    live_duration_values = []
    live_duration_dates = []

    if (
        "data" in json_data
        and "live_duration_detail" in json_data["data"]
        and "live_duration" in json_data["data"]["live_duration_detail"]
    ):
        live_duration_list = json_data["data"]["live_duration_detail"]["live_duration"]
        for item in live_duration_list:
            live_duration_values.append(item["Value"])
            live_duration_dates.append(item["Date"])
    else:
        logger.warning(
            "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º JSON"
        )
        live_duration_values = [0]
        live_duration_dates = [0]

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –º–µ–∂–¥—É –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–±—â–∏–º–∏ –¥–∞—Ç–∞–º–∏
    combined_data = []

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    all_dates = set(diamonds_dates + live_duration_dates)

    for date_value in all_dates:
        entry = {"date": date_value}

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –¥–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if date_value in diamonds_dates:
            idx = diamonds_dates.index(date_value)
            entry["diamonds_now"] = diamonds_values[idx]
        else:
            entry["diamonds_now"] = 0

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –¥–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if date_value in live_duration_dates:
            idx = live_duration_dates.index(date_value)
            entry["live_duration_now"] = live_duration_values[idx]
        else:
            entry["live_duration_now"] = 0

        combined_data.append(entry)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —à–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏
    combined_data.sort(key=lambda x: x["date"])

    return combined_data


"""
–ó–∞–∫–æ–Ω—á–∏–ª—Å—è –±–ª–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""


if __name__ == "__main__":
    start_time = datetime.now()
    logger.info(f"–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {start_time}")

    try:

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π")
        user_live_analytics()
        logger.info("–°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)

    end_time = datetime.now()
    duration = end_time - start_time
    logger.info(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
