# client/main_check.py
import random
import time

from config import logger


def get_random_pause(min_seconds, max_seconds):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Returns:
        float: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã

    Examples:
        >>> pause = get_random_pause(2, 5)
        >>> print(f"–ü–∞—É–∑–∞: {pause:.2f} —Å–µ–∫—É–Ω–¥")

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å time.sleep
        >>> time.sleep(get_random_pause(1, 3))

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å asyncio.sleep
        >>> await asyncio.sleep(get_random_pause(0.5, 2.0))
    """
    if min_seconds > max_seconds:
        min_seconds, max_seconds = max_seconds, min_seconds
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–µ–Ω—è–ª –º–µ—Å—Ç–∞–º–∏ min –∏ max: {min_seconds} - {max_seconds}")

    if min_seconds < 0:
        min_seconds = 0
        logger.warning(
            "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 0"
        )

    pause_duration = random.uniform(min_seconds, max_seconds)
    # logger.debug(
    #     f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {pause_duration:.2f} —Å–µ–∫—É–Ω–¥ ({min_seconds}-{max_seconds})"
    # )

    return pause_duration


def random_pause(min_seconds, max_seconds):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Examples:
        >>> await async_random_pause(1, 3)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
        >>> await async_random_pause(2.5, 5.0)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 2.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    """
    pause_duration = get_random_pause(min_seconds, max_seconds)
    # logger.info(f"üò¥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ {pause_duration:.2f} —Å–µ–∫—É–Ω–¥...")
    time.sleep(pause_duration)


def find_company_by_number(all_cars, number):
    """
    –ò—â–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –Ω–æ–º–µ—Ä—É –≤ —Å–ø–∏—Å–∫–µ all_cars

    Args:
        all_cars (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö
        number (str): –ù–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞

    Returns:
        dict or None: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    for car in all_cars:
        if car.get("number_or_vin") == number:
            return {
                "company_name": car.get("company_name"),
                "edrpou_code": car.get("edrpou_code"),
            }
    return None


def enrich_transport_data(transport_data, all_cars, get_custom_func):
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏

    Args:
        transport_data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
        all_cars (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö –∏–∑ –ë–î
        get_custom_func (function): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É

    Returns:
        list: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    enriched_data = []

    for transport in transport_data:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        enriched_transport = transport.copy()

        plate_number = transport.get("plate_number")
        semi_trailer_number = transport.get("semi_trailer_number")

        company_info = None

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º plate_number –≤ all_cars
        if plate_number:
            company_info = find_company_by_number(all_cars, plate_number)
            if company_info:
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è {plate_number}: {company_info['company_name']}"
                )

        # –®–∞–≥ 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º semi_trailer_number
        if not company_info and semi_trailer_number:
            company_info = find_company_by_number(all_cars, semi_trailer_number)
            if company_info:
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è semi_trailer_number {semi_trailer_number}: {company_info['company_name']}"
                )

        # –®–∞–≥ 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º get_custom
        if not company_info and plate_number:
            try:
                custom_result = get_custom_func(plate_number)
                random_pause(1, 5)

                # –î–û–ë–ê–í–ò–¢–¨ –ü–†–û–í–ï–†–ö–£ —á—Ç–æ custom_result —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if (
                    custom_result
                    and isinstance(custom_result, dict)
                    and "company_name" in custom_result
                    and "edrpou_code" in custom_result
                ):
                    company_info = {  # <-- –≠–¢–ê –°–¢–†–û–ö–ê –ë–´–õ–ê –ü–†–û–ü–£–©–ï–ù–ê
                        "company_name": custom_result.get("company_name"),
                        "edrpou_code": custom_result.get("edrpou_code"),
                    }
                    logger.info(
                        f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è {plate_number}: {company_info['company_name']}"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_custom –¥–ª—è {plate_number}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏
        if company_info:
            enriched_transport.update(company_info)
        else:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {plate_number} / {semi_trailer_number}"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            enriched_transport.update({"company_name": None, "edrpou_code": None})

        enriched_data.append(enriched_transport)

    return enriched_data
