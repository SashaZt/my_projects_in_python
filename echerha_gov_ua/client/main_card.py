import random
import sqlite3
import time

import requests
from bs4 import BeautifulSoup

from config import Config, logger, paths

all_customs = paths.data / "all_customs.json"
db_path = paths.db / "carriers.db"
config = Config.load()
timeout = config.client.timeout
headers = {
    "accept": "application/json",
    "accept-language": "ru,en;q=0.9,uk;q=0.8",
    "content-type": "application/json",
    "dnt": "1",
    "origin": "https://echerha.gov.ua",
    "priority": "u=1, i",
    "referer": "https://echerha.gov.ua/",
    "sec-ch-ua": '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": '"macOS"',
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site",
    "sec-gpc": "1",
    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
    "x-client-locale": "uk",
    "x-user-agent": "UABorder/3.4.3 Web/1.1.0 User/guest",
}


def create_database():
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö
    """
    if not db_path.exists():
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS carriers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                number_or_vin TEXT,
                company_name TEXT,
                manager TEXT,
                email TEXT,
                edrpou_code TEXT,
                license_status TEXT,
                license_issued TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """
        )

        conn.commit()
        conn.close()


def get_random_pause(min_seconds, max_seconds):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Returns:
        float: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã

    Examples:
        >>> pause = get_random_pause(2, 5)
        >>> print(f"–ü–∞—É–∑–∞: {pause:.2f} —Å–µ–∫—É–Ω–¥")

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å time.sleep
        >>> time.sleep(get_random_pause(1, 3))

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å asyncio.sleep
        >>> await asyncio.sleep(get_random_pause(0.5, 2.0))
    """
    if min_seconds > max_seconds:
        min_seconds, max_seconds = max_seconds, min_seconds
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–µ–Ω—è–ª –º–µ—Å—Ç–∞–º–∏ min –∏ max: {min_seconds} - {max_seconds}")

    if min_seconds < 0:
        min_seconds = 0
        logger.warning(
            "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 0"
        )

    pause_duration = random.uniform(min_seconds, max_seconds)
    # logger.debug(
    #     f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {pause_duration:.2f} —Å–µ–∫—É–Ω–¥ ({min_seconds}-{max_seconds})"
    # )

    return pause_duration


def random_pause(min_seconds, max_seconds):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Examples:
        >>> await async_random_pause(1, 3)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
        >>> await async_random_pause(2.5, 5.0)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 2.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    """
    pause_duration = get_random_pause(min_seconds, max_seconds)
    # logger.info(f"üò¥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ {pause_duration:.2f} —Å–µ–∫—É–Ω–¥...")
    time.sleep(pause_duration)


def get_custom(v: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ"""
    try:
        url = "https://shlyah.dsbt.gov.ua/xtr"
        params = {
            "v": v,
            "by": "num",
        }

        response = requests.get(url, params=params, headers=headers, timeout=30)
        response.raise_for_status()

        data = response.text
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        result = scrap_html(data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_to_database(result)

        # –í–û–ó–í–†–ê–©–ê–ï–ú –°–õ–û–í–ê–†–¨, –∞ –Ω–µ bool
        return result

    except requests.RequestException as e:
        # logger.error(e)
        return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ False


def scrap_html(content):
    """
    –ü–∞—Ä—Å–∏—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ
    """
    soup = BeautifulSoup(content, "lxml")

    # –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
    table = soup.find("table")
    if not table:
        return {}

    # –ò–∑–≤–ª–µ—á—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    rows = table.find_all("tr")

    data = {}

    for row in rows:
        cells = row.find_all("td")
        if len(cells) == 2:
            # –û—á–∏—Å—Ç–∏—Ç—å –∫–ª—é—á –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
            key = cells[0].get_text(strip=True).replace("\xa0", " ")
            value = cells[1].get_text(strip=True)

            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
            if "‚Ññ –∞–±–æ VIN" in key:
                data["number_or_vin"] = value
            elif "–ù–∞–∑–≤–∞ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞" in key:
                data["company_name"] = value
            elif "–ö–µ—Ä—ñ–≤–Ω–∏–∫" in key:
                data["manager"] = value
            elif "e-mail" in key:
                data["email"] = value
            elif "–ö–æ–¥ –Ñ–î–†–ü–û–£" in key:
                data["edrpou_code"] = value
            elif "–°—Ç–∞—Ç—É—Å –ª—ñ—Ü–µ–Ω–∑—ñ—ó" in key:
                data["license_status"] = value
            elif "–õ—ñ—Ü–µ–Ω–∑—ñ—è –≤–∏–¥–∞–Ω–∞" in key:
                data["license_issued"] = value

    return data


def save_to_database(data_dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite

    Args:
        data_dict (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ

    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        insert_data = (
            data_dict.get("number_or_vin", ""),
            data_dict.get("company_name", ""),
            data_dict.get("manager", ""),
            data_dict.get("email", ""),
            data_dict.get("edrpou_code", ""),
            data_dict.get("license_status", ""),
            data_dict.get("license_issued", ""),
        )

        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—Ç–∞–≤–∫—É
        cursor.execute(
            """
            INSERT INTO carriers 
            (number_or_vin, company_name, manager, email, edrpou_code, license_status, license_issued)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """,
            insert_data,
        )

        conn.commit()
        conn.close()

        # logger.info(
        #     f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {data_dict.get('company_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')}"
        # )
        return True

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def get_all_carriers():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö
    """
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        cursor.execute(
            "SELECT number_or_vin, company_name, edrpou_code FROM carriers ORDER BY created_at DESC;"
        )
        results = cursor.fetchall()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
        carriers_list = []
        for row in results:
            carrier_dict = {
                "number_or_vin": row[0],
                "company_name": row[1],
                "edrpou_code": row[2],
            }
            carriers_list.append(carrier_dict)

        conn.close()
        return carriers_list

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
