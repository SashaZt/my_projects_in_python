import json
import random
import re
import time
from contextlib import contextmanager
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

import requests
from scrap import create_excel_from_customs_data

from config import Config, logger, paths

all_customs = paths.data / "all_customs.json"
config = Config.load()
timeout = config.client.timeout
headers = {
    "accept": "application/json",
    "accept-language": "ru,en;q=0.9,uk;q=0.8",
    "content-type": "application/json",
    "dnt": "1",
    "origin": "https://echerha.gov.ua",
    "priority": "u=1, i",
    "referer": "https://echerha.gov.ua/",
    "sec-ch-ua": '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": '"macOS"',
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site",
    "sec-gpc": "1",
    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
    "x-client-locale": "uk",
    "x-user-agent": "UABorder/3.4.3 Web/1.1.0 User/guest",
}


@contextmanager
def timer(name="–ö–æ–¥"):
    start_time = time.perf_counter()
    try:
        yield
    finally:
        end_time = time.perf_counter()
        logger.info(f"{name} –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∑–∞ {end_time - start_time:.4f} —Å–µ–∫—É–Ω–¥")


def get_random_pause(min_seconds, max_seconds):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Returns:
        float: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã

    Examples:
        >>> pause = get_random_pause(2, 5)
        >>> print(f"–ü–∞—É–∑–∞: {pause:.2f} —Å–µ–∫—É–Ω–¥")

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å time.sleep
        >>> time.sleep(get_random_pause(1, 3))

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å asyncio.sleep
        >>> await asyncio.sleep(get_random_pause(0.5, 2.0))
    """
    if min_seconds > max_seconds:
        min_seconds, max_seconds = max_seconds, min_seconds
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–µ–Ω—è–ª –º–µ—Å—Ç–∞–º–∏ min –∏ max: {min_seconds} - {max_seconds}")

    if min_seconds < 0:
        min_seconds = 0
        logger.warning(
            "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 0"
        )

    pause_duration = random.uniform(min_seconds, max_seconds)
    # logger.debug(
    #     f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {pause_duration:.2f} —Å–µ–∫—É–Ω–¥ ({min_seconds}-{max_seconds})"
    # )

    return pause_duration


def random_pause(min_seconds, max_seconds):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Examples:
        >>> await async_random_pause(1, 3)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
        >>> await async_random_pause(2.5, 5.0)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 2.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    """
    pause_duration = get_random_pause(min_seconds, max_seconds)
    # logger.info(f"üò¥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ {pause_duration:.2f} —Å–µ–∫—É–Ω–¥...")
    time.sleep(pause_duration)


def get_all_customs() -> bool:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª"""
    try:
        url = "https://back.echerha.gov.ua/api/v4/workload/1"
        response = requests.get(url, headers=headers, timeout=timeout)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏

        data = response.json()
        with open(all_customs, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª {all_customs}")
        return True
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–º–æ–∂–µ–Ω: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–º–æ–∂–µ–Ω: {e}")
        return False


def get_custom(id_checkpoint: int) -> bool:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ"""
    try:
        url = f"https://back.echerha.gov.ua/api/v4/workload/1/checkpoints/{id_checkpoint}/details/1/30"
        response = requests.get(url, headers=headers, timeout=timeout)
        response.raise_for_status()

        data = response.json()
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        keys_to_remove = ["links", "meta", "checkpoint", "title"]
        cleaned_data = remove_keys_from_dict(data, keys_to_remove)

        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        transformed_data = transform_customs_data(cleaned_data)

        file_name = paths.json / f"custom_{id_checkpoint}_01.json"
        with open(file_name, "w", encoding="utf-8") as f:
            json.dump(transformed_data, f, ensure_ascii=False, indent=4)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª {file_name}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        total_pages = count_pages(data)
        if total_pages and total_pages > 1:
            get_custom_pages(total_pages, id_checkpoint)

        return True
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–º–æ–∂–Ω–∏ {id_checkpoint}: {e}")
        return False
    except Exception as e:
        logger.error(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–º–æ–∂–Ω–∏ {id_checkpoint}: {e}"
        )
        return False


def get_current_year() -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≥–æ–¥

    Returns:
        int: –¢–µ–∫—É—â–∏–π –≥–æ–¥
    """
    return datetime.now().year


def parse_ukrainian_datetime(datetime_str: str, year: int = None) -> Tuple[str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç —É–∫—Ä–∞–∏–Ω—Å–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, —Ä–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

    Args:
        datetime_str: –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "27 —á–µ—Ä–≤–Ω—è 17:10"
        year: –ì–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –≥–æ–¥)

    Returns:
        Tuple[str, str]: (–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY, –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)
    """
    if not datetime_str or not isinstance(datetime_str, str):
        return "", ""

    # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    if year is None:
        year = get_current_year()

    # –°–ª–æ–≤–∞—Ä—å —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
    ukrainian_months = {
        "—Å—ñ—á–Ω—è": "01",
        "—Å—ñ—á–µ–Ω—å": "01",
        "–ª—é—Ç–æ–≥–æ": "02",
        "–ª—é—Ç–∏–π": "02",
        "–±–µ—Ä–µ–∑–Ω—è": "03",
        "–±–µ—Ä–µ–∑–µ–Ω—å": "03",
        "–∫–≤—ñ—Ç–Ω—è": "04",
        "–∫–≤—ñ—Ç–µ–Ω—å": "04",
        "—Ç—Ä–∞–≤–Ω—è": "05",
        "—Ç—Ä–∞–≤–µ–Ω—å": "05",
        "—á–µ—Ä–≤–Ω—è": "06",
        "—á–µ—Ä–≤–µ–Ω—å": "06",
        "–ª–∏–ø–Ω—è": "07",
        "–ª–∏–ø–µ–Ω—å": "07",
        "—Å–µ—Ä–ø–Ω—è": "08",
        "—Å–µ—Ä–ø–µ–Ω—å": "08",
        "–≤–µ—Ä–µ—Å–Ω—è": "09",
        "–≤–µ—Ä–µ—Å–µ–Ω—å": "09",
        "–∂–æ–≤—Ç–Ω—è": "10",
        "–∂–æ–≤—Ç–µ–Ω—å": "10",
        "–ª–∏—Å—Ç–æ–ø–∞–¥–∞": "11",
        "–ª–∏—Å—Ç–æ–ø–∞–¥": "11",
        "–≥—Ä—É–¥–Ω—è": "12",
        "–≥—Ä—É–¥–µ–Ω—å": "12",
    }

    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: —á–∏—Å–ª–æ + –º–µ—Å—è—Ü + –≤—Ä–µ–º—è
        pattern = r"(\d{1,2})\s+(\w+)\s+(\d{1,2}:\d{2})"
        match = re.search(pattern, datetime_str.strip())

        if not match:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            return "", ""

        day = match.group(1).zfill(2)  # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        month_name = match.group(2).lower()
        time_part = match.group(3)

        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
        month_num = ukrainian_months.get(month_name)
        if not month_num:
            # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            return "", ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        date_formatted = f"{day}.{month_num}.{year}"

        # –í—Ä–µ–º—è –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        time_formatted = format_time(time_part)

        return date_formatted, time_formatted

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        return "", ""


def format_time(time_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è—è –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    Args:
        time_str: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "H:MM" –∏–ª–∏ "HH:MM"

    Returns:
        –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM"
    """
    try:
        if ":" not in time_str:
            return ""

        parts = time_str.split(":")
        if len(parts) != 2:
            return ""

        hours = parts[0].zfill(2)
        minutes = parts[1].zfill(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if not (0 <= int(hours) <= 23 and 0 <= int(minutes) <= 59):
            return ""

        return f"{hours}:{minutes}"

    except (ValueError, IndexError):
        return ""


def transform_customs_data(data: dict) -> dict:
    """
    –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    Args:
        data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API

    Returns:
        dict: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    """
    if not isinstance(data, dict) or "data" not in data:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return data

    original_items = data.get("data", [])
    transformed_items = []

    for item in original_items:
        try:

            # –¢—è–≥–∞—á
            plate_number = item.get("plate_number", "")
            if plate_number is not None:
                plate_number = plate_number.replace(" ", "")
            # –ü—Ä–∏—á—ñ–ø
            semi_trailer_number = item.get("semi_trailer_number", "")
            if semi_trailer_number is not None:
                semi_trailer_number = semi_trailer_number.replace(" ", "")

            estimated_time = item.get("estimated_time", "")
            date, time_date = parse_ukrainian_datetime(estimated_time)
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            transformed_item = {
                "plate_number": plate_number,
                "semi_trailer_number": semi_trailer_number,
                "date": date,
                "time": time_date,
                "confirmed_at": item.get("confirmed_at", ""),
                "position_number": item.get("position_number", ""),
            }

            transformed_items.append(transformed_item)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {item}: {e}")
            continue

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–æ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π data
    result = data.copy()
    result["data"] = transformed_items

    # logger.info(
    #     f"–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(transformed_items)} –∏–∑ {len(original_items)} –∑–∞–ø–∏—Å–µ–π"
    # )
    return result


def remove_keys_from_dict(data, keys_to_remove):
    """
    –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    Args:
        data: –°–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        keys_to_remove: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    if isinstance(data, dict):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –±–µ–∑ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        return {
            k: remove_keys_from_dict(v, keys_to_remove)
            for k, v in data.items()
            if k not in keys_to_remove
        }
    elif isinstance(data, list):
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        return [remove_keys_from_dict(item, keys_to_remove) for item in data]
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
        return data


def get_custom_pages(total_pages: int, id_checkpoint: int) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–º–æ–∂–Ω–∏"""
    for page in range(2, total_pages + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            params = {"page": page}
            url = f"https://back.echerha.gov.ua/api/v4/workload/1/checkpoints/{id_checkpoint}/details/1/30"
            response = requests.get(
                url, params=params, headers=headers, timeout=timeout
            )
            response.raise_for_status()

            data = response.json()

            keys_to_remove = ["links", "meta", "checkpoint", "title"]
            cleaned_data = remove_keys_from_dict(data, keys_to_remove)

            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            transformed_data = transform_customs_data(cleaned_data)

            # –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
            file_name = paths.json / f"custom_{id_checkpoint}_{page:02d}.json"
            with open(file_name, "w", encoding="utf-8") as f:
                json.dump(transformed_data, f, ensure_ascii=False, indent=4)

            logger.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}/{total_pages}: {file_name}")
            random_pause(5, 10)

        except requests.RequestException as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –¥–ª—è —Ç–∞–º–æ–∂–Ω–∏ {id_checkpoint}: {e}"
            )
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")


def load_json_file(file_path) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ {file_path}: {e}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_path}: {e}")
        return None


def count_pages(data: Dict[str, Any]) -> Optional[int]:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    try:
        total = data.get("meta", {}).get("total", 0)
        per_page = data.get("meta", {}).get("per_page", 20)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30

        if total > per_page:
            pages = (total + per_page - 1) // per_page  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {total} –∑–∞–ø–∏—Å–µ–π, –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ {pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return pages
        else:
            logger.info(
                f"–ù–∞–π–¥–µ–Ω–æ {total} –∑–∞–ø–∏—Å–µ–π, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            )
            return 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        return None


def process_all_customs() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"""
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–º–æ–∂–µ–Ω
    if not get_all_customs():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–º–æ–∂–µ–Ω")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–º–æ–∂–µ–Ω
    customs_data = load_json_file(all_customs)
    if not customs_data or "data" not in customs_data:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–º–æ–∂–Ω—è—Ö")
        return

    customs = customs_data["data"]
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(customs)} —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–º–æ–∂–Ω—é
    for i, custom in enumerate(customs, 1):
        id_checkpoint = custom.get("id")
        if not id_checkpoint:
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–º–æ–∂–Ω—é –±–µ–∑ ID: {custom}")
            continue

        custom_name = custom.get("name", f"–¢–∞–º–æ–∂–Ω—è {id_checkpoint}")
        logger.info(
            f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(customs)}: {custom_name} (ID: {id_checkpoint})"
        )

        success = get_custom(id_checkpoint)
        if success:
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ç–∞–º–æ–∂–Ω—è {id_checkpoint}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–º–æ–∂–Ω–∏ {id_checkpoint}")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∞–º–æ–∂–µ–Ω
        if i < len(customs):  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            time.sleep(2)


if __name__ == "__main__":
    with timer("–ú–æ–π –±–ª–æ–∫ –∫–æ–¥–∞"):
        # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫
        process_all_customs()
        create_excel_from_customs_data()

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–º–æ–∂–Ω—é (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
