import asyncio
import datetime
import json
import random
import sys
import time
from datetime import datetime
from pathlib import Path

from loguru import logger
from rnet import Client, Impersonate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_directory = Path.cwd()

json_directory = current_directory / "json"
log_directory = current_directory / "log"

json_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"


logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)


# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)
headers = {
    "accept": "*/*",
    "accept-language": "ru,en;q=0.9,uk;q=0.8",
    "content-type": "application/json",
    "dnt": "1",
    "origin": "https://www.stubhub.com",
    "priority": "u=1, i",
    "referer": "https://www.stubhub.com",
    "sec-ch-ua": '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": '"macOS"',
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-origin",
    "sec-gpc": "1",
    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
}


def get_random_pause(min_seconds, max_seconds):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Returns:
        float: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã

    Examples:
        >>> pause = get_random_pause(2, 5)
        >>> print(f"–ü–∞—É–∑–∞: {pause:.2f} —Å–µ–∫—É–Ω–¥")

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å time.sleep
        >>> time.sleep(get_random_pause(1, 3))

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å asyncio.sleep
        >>> await asyncio.sleep(get_random_pause(0.5, 2.0))
    """
    if min_seconds > max_seconds:
        min_seconds, max_seconds = max_seconds, min_seconds
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–µ–Ω—è–ª –º–µ—Å—Ç–∞–º–∏ min –∏ max: {min_seconds} - {max_seconds}")

    if min_seconds < 0:
        min_seconds = 0
        logger.warning(
            "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 0"
        )

    pause_duration = random.uniform(min_seconds, max_seconds)
    logger.debug(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {pause_duration:.2f} —Å–µ–∫—É–Ω–¥")

    return pause_duration


async def async_random_pause(min_seconds, max_seconds):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Examples:
        >>> await async_random_pause(1, 3)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
        >>> await async_random_pause(2.5, 5.0)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 2.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    """
    pause_duration = get_random_pause(min_seconds, max_seconds)
    logger.info(f"üò¥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ {pause_duration:.2f} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(pause_duration)


def get_request_data(page=1):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    return {
        "ShowAllTickets": True,
        "HideDuplicateTicketsV2": False,
        "Quantity": 4,
        "IsInitialQuantityChange": False,
        "PageVisitId": "1D000C0A-9A16-4FD3-9CDB-612FAB2C79AE",
        "PageSize": 20,
        "CurrentPage": page,
        "SortBy": "CUSTOM_RANKING",
        "SortDirection": 1,
        "Sections": "",
        "Rows": "",
        "Seats": "",
        "SeatTypes": "",
        "TicketClasses": "",
        "ListingNotes": "",
        "PriceRange": "0,100",
        "InstantDelivery": False,
        "EstimatedFees": True,
        "BetterValueTickets": True,
        "PriceOption": "",
        "HasFlexiblePricing": False,
        "ExcludeSoldListings": False,
        "RemoveObstructedView": False,
        "NewListingsOnly": False,
        "PriceDropListingsOnly": False,
        "ConciergeTickets": False,
        "Favorites": False,
        "Method": "IndexSh",
    }


async def extract_items_data(json_data):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç id –∏ price –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö

    Args:
        json_data (dict): JSON –¥–∞–Ω–Ω—ã–µ —Å –∫–ª—é—á–æ–º "items"

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å id –∏ price
    """
    try:
        items = json_data.get("items", [])

        if not items:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ 'items' –∏–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return []

        extracted_data = []

        for item in items:
            item_data = {
                "id": item.get("id"),
                "price": item.get("price").replace("UAH", ""),
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            if item_data["id"] is not None and item_data["price"] is not None:
                extracted_data.append(item_data)
            else:
                logger.warning(
                    f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: id={item_data['id']}, price={item_data['price']}"
                )

        logger.success(
            f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ {len(items)} –æ–±—â–∏—Ö"
        )
        return extracted_data

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


async def fetch_page_data(client, url, page):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        json_data = get_request_data(page)
        response = await client.post(url, headers=headers, json=json_data)

        if response.ok:
            logger.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: Status Code {response.status_code}")
            json_content = await response.json()
            return json_content
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {response.status_code}")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
        return None


async def total_page(json_data):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    totalCount = int(json_data.get("totalCount", 0))
    pageSize = int(json_data.get("pageSize", 20))
    count_pages = (totalCount + pageSize - 1) // pageSize
    return count_pages


async def collect_all_data(url, file_name):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª

    Args:
        url (str): URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        file_name (str): –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    client = Client(impersonate=Impersonate.Chrome137)
    all_items = []

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        json_content = await fetch_page_data(client, url, 1)

        if not json_content:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_items = await extract_items_data(json_content)
        all_items.extend(page_items)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = await total_page(json_content)
        logger.info(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if total_pages > 1:
            for page in range(2, total_pages + 1):
                await async_random_pause(1, 5)

                logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}/{total_pages}")
                json_content = await fetch_page_data(client, url, page)

                if json_content:
                    page_items = await extract_items_data(json_content)
                    all_items.extend(page_items)
                    logger.info(f"üìà –°–æ–±—Ä–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_items)}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
        output_file = json_directory / f"{file_name}.json"

        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(all_items, f, ensure_ascii=False, indent=4)

        logger.success(
            f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª: {output_file}"
        )
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def response_methods(url, file_name):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª

    Args:
        url (str): URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        file_name (str): –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    success = await collect_all_data(url, file_name)

    if success:
        logger.success("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")


if __name__ == "__main__":
    try:
        urls = [
            "https://www.stubhub.com/soccer-world-cup-east-rutherford-tickets-7-19-2026/event/153020449/",
            "https://www.stubhub.com/super-bowl-santa-clara-tickets-2-8-2026/event/157245215/",
        ]
        for url in urls:
            name_event = url.split("/")[-4].replace("-", "_")
            event = url.split("/")[-2]
            file_name = f"{name_event}_{event}"
            asyncio.run(response_methods(url, file_name))

    except Exception as e:
        error_msg = str(e).lower()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
