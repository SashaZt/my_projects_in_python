import json
import sqlite3
import sys
from pathlib import Path

import requests
from loguru import logger
from main_token import get_token, load_product_data, save_json_data, validyty_token

current_directory = Path.cwd()
data_directory = current_directory / "data"
db_directory = current_directory / "db"
log_directory = current_directory / "log"
log_directory.mkdir(parents=True, exist_ok=True)
db_directory.mkdir(parents=True, exist_ok=True)
data_directory.mkdir(parents=True, exist_ok=True)

access_token_json_file = data_directory / "access_token.json"
orders_json_file = data_directory / "orders.json"
roblox_products_json_file = data_directory / "roblox_products.json"
output_xlsx_file = data_directory / "output.xlsx"
output_csv_file = data_directory / "output.csv"
output_xml_file = data_directory / "output.xml"
log_file_path = log_directory / "log_message.log"
config_json_file = data_directory / "config.json"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


DB_NAME = db_directory / "rozetka_orders.db"
ROBLOX_PRODUCTS_FILE = data_directory / "roblox_products.json"


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
def init_db():
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤, —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–ª—é—á–µ–π.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY,
        status INTEGER,
        item_name TEXT,
        user_phone TEXT,
        first_name TEXT,
        last_name TEXT,
        second_name TEXT,
        full_name TEXT,
        created TEXT,
        amount TEXT,
        key_id INTEGER DEFAULT NULL,
        key_sent_at TEXT DEFAULT NULL,
        message_sent BOOLEAN DEFAULT 0,
        FOREIGN KEY (key_id) REFERENCES product_keys (id)
    )
    """
    )

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE,
        active BOOLEAN DEFAULT 0
    )
    """
    )

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–ª—é—á–µ–π
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS product_keys (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER,
        key_value TEXT UNIQUE,
        is_used BOOLEAN DEFAULT 0,
        order_id INTEGER DEFAULT NULL,
        used_at TEXT DEFAULT NULL,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products (id),
        FOREIGN KEY (order_id) REFERENCES orders (id)
    )
    """
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if ROBLOX_PRODUCTS_FILE.exists():
        try:
            with open(ROBLOX_PRODUCTS_FILE, "r", encoding="utf-8") as file:
                products = json.load(file)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                for product in products:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è robux –∏ usd –∏–∑ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞
                    name = product["name"]
                    logger.info(name)
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute(
                        "INSERT OR IGNORE INTO products (name) VALUES (?)", (name,)
                    )

                logger.info(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {ROBLOX_PRODUCTS_FILE}"
                )
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {ROBLOX_PRODUCTS_FILE}")
    else:
        logger.error(f"–§–∞–π–ª {ROBLOX_PRODUCTS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_orders_status ON orders (status)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_orders_key_id ON orders (key_id)")
    cursor.execute(
        "CREATE INDEX IF NOT EXISTS idx_product_keys_product_id ON product_keys (product_id)"
    )
    cursor.execute(
        "CREATE INDEX IF NOT EXISTS idx_product_keys_is_used ON product_keys (is_used)"
    )
    cursor.execute(
        "CREATE INDEX IF NOT EXISTS idx_product_keys_order_id ON product_keys (order_id)"
    )

    conn.commit()

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute("SELECT COUNT(*) FROM products")
    products_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM product_keys")
    keys_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM orders")
    orders_count = cursor.fetchone()[0]

    logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_NAME} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:")
    logger.info(f"- –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
    logger.info(f"- –ö–ª—é—á–µ–π: {keys_count}")
    logger.info(f"- –ó–∞–∫–∞–∑–æ–≤: {orders_count}")

    conn.close()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_orders_to_db(orders):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    orders = orders["content"]["orders"]
    for order in orders:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        order_id = order["id"]
        status = order["status"]
        created = order["created"]
        amount = order["amount"]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        item_name = (
            order["items_photos"][0]["item_name"] if order["items_photos"] else ""
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_phone = order["user_phone"]
        user_info = order["user_title"]
        first_name = user_info.get("first_name", "")
        last_name = user_info.get("last_name", "")
        second_name = user_info.get("second_name", "")
        full_name = user_info.get("full_name", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑
        cursor.execute("SELECT id FROM orders WHERE id = ?", (order_id,))
        existing_order = cursor.fetchone()

        if existing_order:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            cursor.execute(
                """
            UPDATE orders SET 
                status = ?,
                item_name = ?,
                user_phone = ?,
                first_name = ?,
                last_name = ?,
                second_name = ?,
                full_name = ?,
                created = ?,
                amount = ?
            WHERE id = ?
            """,
                (
                    status,
                    item_name,
                    user_phone,
                    first_name,
                    last_name,
                    second_name,
                    full_name,
                    created,
                    amount,
                    order_id,
                ),
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            cursor.execute(
                """
            INSERT INTO orders (
                id, status, item_name, user_phone, first_name, 
                last_name, second_name, full_name, created, amount
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
                (
                    order_id,
                    status,
                    item_name,
                    user_phone,
                    first_name,
                    last_name,
                    second_name,
                    full_name,
                    created,
                    amount,
                ),
            )

    conn.commit()

    # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ
    cursor.execute("SELECT COUNT(*) FROM orders")
    count = cursor.fetchone()[0]
    logger.info(f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {count} –∑–∞–∫–∞–∑–æ–≤")

    conn.close()


def make_api_request(method, url, params=None, data=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤

    Args:
        method (str): HTTP –º–µ—Ç–æ–¥ (GET, POST –∏ —Ç.–¥.)
        url (str): URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        params (dict, optional): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        data (dict, optional): –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞

    Returns:
        dict or None: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (—Ñ—É–Ω–∫—Ü–∏—è get_token() –∏–∑ main_token.py –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
    token = get_token()
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç–µ validyty_token() –∏–∑ main_token.py")
        return None

    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {method} –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}")
        response = requests.request(
            method=method,
            url=url,
            headers=headers,
            params=params,
            json=data,
            timeout=30,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å HTTP
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        result = response.json()

        if not result.get("success"):
            error_msg = result.get("errors", {}).get("message", "")
            error_code = result.get("errors", {}).get("code", 0)
            logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg} (–∫–æ–¥ {error_code})")
            return None

        return result
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def get_orders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    url = "https://api-seller.rozetka.com.ua/orders/search"
    params = {
        # "status": "1",  # —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        # "date_from": "2023-01-01",  # –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        # "date_to": "2023-12-31",  # –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        "page": 1,  # —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        "per_page": 20,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    }

    result = make_api_request("GET", url, params)
    if result and result.get("success"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Ñ–∞–π–ª
        save_json_data(result, orders_json_file)
        return result["content"]["orders"]

    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    return []


def get_status_payment(order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞"""
    url = f"https://api-seller.rozetka.com.ua/orders/status-payment/{order_id}"

    result = make_api_request("GET", url)
    logger.info(result)

    if result and result.get("success"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ content –Ω–µ None –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
        if result.get("content") is not None:
            status_payment_id = result["content"].get("status_payment_id")
            if status_payment_id == 7:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                status_file = data_directory / f"status_payment_{order_id}.json"
                save_json_data(result, status_file)
                return result["content"]

    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    return None


def process_orders():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–±–æ—Ä–∫–∞ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    validyty_token()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
    orders_data = get_orders()
    if not orders_data:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return []

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    products_data = load_product_data(roblox_products_json_file)
    if not products_data:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö")
        return []

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    product_names = [product["name"] for product in products_data]

    result = []
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(orders_data)} –∑–∞–∫–∞–∑–æ–≤")

    for order in orders_data:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ)
            if not order.get("items_photos") or len(order["items_photos"]) == 0:
                logger.warning(
                    f"–ó–∞–∫–∞–∑ {order.get('id')} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö"
                )
                continue

            item_name = order["items_photos"][0]["item_name"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
            if item_name in product_names:
                order_id = order["id"]
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id} - {item_name}")

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment_status = get_status_payment(order_id)
                logger.info(payment_status)
                user_phone = None
                payment_status_title = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                if payment_status is not None:
                    logger.info(payment_status)
                    payment_status_title = payment_status.get("title", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")

                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–°—É–º–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞", —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                    if payment_status_title == "–°—É–º–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞":
                        user_phone = order["user_phone"]
                        logger.info(
                            f"–°—É–º–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_phone}"
                        )
                else:
                    logger.info("–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ")
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                all_data = {
                    "order_id": order_id,
                    "product": item_name,
                    "user_phone": user_phone,
                    "status": order["status"],
                    "status_payment": payment_status_title,
                    "created": order["created"],
                    "amount": order["amount"],
                    "user_info": {
                        "first_name": order["user_title"].get("first_name", ""),
                        "last_name": order["user_title"].get("last_name", ""),
                        "full_name": order["user_title"].get("full_name", ""),
                    },
                }
                result.append(all_data)
            else:
                logger.info(f"–¢–æ–≤–∞—Ä {item_name} –Ω–µ –Ω–∞—à")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order.get('id')}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    result_file = data_directory / "parsed_orders.json"
    save_json_data(result, result_file)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result)} –∑–∞–∫–∞–∑–æ–≤")

    return result


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    # get_auth_token()
    # token = load_product_data(access_token_json_file)
    # # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤

    # orders = get_orders(token)
    # if not orders:
    #     logger.error("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    #     return
    # orders = load_product_data(orders_json_file)
    # # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # save_orders_to_db(orders)
    # logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")


if __name__ == "__main__":
    # main()
    process_orders()
