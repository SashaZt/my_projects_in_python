# app/client/easyms/main.py
import argparse
import json
import os
import signal
import sys
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional

import requests
import urllib3
from loguru import logger

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö HTTPS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
def signal_handler(sig, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    # –£–¥–∞–ª–µ–Ω–∏–µ PID —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    try:
        pid_file = Path(__file__).parent / "run/easyms_process.pid"
        if pid_file.exists():
            pid_file.unlink()
            logger.info(f"PID —Ñ–∞–π–ª {pid_file} —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ PID —Ñ–∞–π–ª–∞: {e}")
    sys.exit(0)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
signal.signal(signal.SIGTERM, signal_handler)  # kill


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π EasyMS")
    parser.add_argument("--username", type=str, help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    parser.add_argument("--password", type=str, help="–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    parser.add_argument("--organization_id", type=int, help="ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    parser.add_argument(
        "--interval",
        type=int,
        default=300,
        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)",
    )

    return parser.parse_args()


# –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç)
script_directory = Path(__file__).parent.absolute()
config_directory = script_directory / "config"
log_directory = script_directory / "log"
data_directory = script_directory / "data"
run_directory = script_directory / "run"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
log_directory.mkdir(parents=True, exist_ok=True)
config_directory.mkdir(parents=True, exist_ok=True)
data_directory.mkdir(parents=True, exist_ok=True)
run_directory.mkdir(parents=True, exist_ok=True)

# –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
organization_id = 595

# –°–æ–∑–¥–∞–µ–º pid —Ñ–∞–π–ª
pid_file = run_directory / "easyms_process.pid"
with open(pid_file, "w") as f:
    f.write(str(os.getpid()))

ORDERS_JSON_FILE = data_directory / "orders.json"
log_file_path = log_directory / "log_message.log"
token_file = config_directory / f"access_token_{organization_id}.json"

BASE_URL = "https://185.233.116.213:5000"


logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
logger.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ {__file__}")
logger.info(f"PID: {os.getpid()}")
logger.info(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {sys.argv}")
logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {script_directory}")


def is_token_valid(token):
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        url = "https://my.easyms.co/api/some-endpoint-that-requires-auth"
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(url, headers=headers, timeout=5)
        return (
            response.status_code != 401
        )  # –ï—Å–ª–∏ –Ω–µ 401 (Unauthorized), –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    except:
        return False


def get_token(username=None, password=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    –ï—Å–ª–∏ username –∏ password –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    token = get_access_token_from_file(token_file)
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å –∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if token and is_token_valid(token):
        logger.info(
            f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_id}"
        )
        return token
    # URL –¥–ª—è API
    url = "https://my.easyms.co/api/integration/auth"

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "password": password or "3332220876",
        "username": username or "terranovahotel2012@gmail.com",
    }

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {"accept": "*/*", "Content-Type": "application/json"}

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.post(url, json=payload, headers=headers, timeout=30)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        json_data = response.json()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º access_token
        access_token = json_data.get("data", {}).get("access_token")
        if access_token:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –≤ JSON-—Ñ–∞–π–ª
            with open(token_file, "w", encoding="utf-8") as file:
                json.dump({"access_token": access_token}, file, indent=4)
            logger.info("Access token saved to access_token.json")
            return access_token
        else:
            logger.error("Access token not found in the response.")
    else:
        logger.error(
            f"Request failed with status code {response.status_code}: {response.text}"
        )
    return None


def get_access_token_from_file(file_path: str) -> str:
    """
    –ß–∏—Ç–∞–µ—Ç access_token –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            return data.get("access_token")
    except FileNotFoundError:
        print(f"File not found: {file_path}")
    except json.JSONDecodeError:
        print("Error decoding JSON from the file.")
    return None


def fetch_users(organization_id: int, token_file: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    access_token = get_access_token_from_file(token_file)
    if not access_token:
        print("Access token not found or invalid.")
        return

    # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f"https://my.easyms.co/api/integration/users?organizationId={organization_id}"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {"accept": "*/*", "Authorization": f"Bearer {access_token}"}

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, headers=headers, timeout=30)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        print("Users fetched successfully:")
        print(response.json())
    else:
        print(
            f"Request failed with status code {response.status_code}: {response.text}"
        )


def convert_to_unix_range(
    from_time_str: str, to_time_str: str, format_str: str = "%Y-%m-%d %H:%M:%S"
) -> tuple:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    Args:
        from_time_str: –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-03-21 12:00:00")
        to_time_str: –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
        format_str: —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "YYYY-MM-DD HH:MM:SS")

    Returns:
        tuple: –∫–æ—Ä—Ç–µ–∂ (arrivalFrom, arrivalTo) –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
        from_time = datetime.strptime(from_time_str, format_str)
        to_time = datetime.strptime(to_time_str, format_str)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        arrival_from = int(from_time.timestamp() * 1000)
        arrival_to = int(to_time.timestamp() * 1000)

        return arrival_from, arrival_to
    except ValueError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")


def fetch_orders(org_id=None):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    _organization_id = org_id or organization_id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    access_token = get_access_token_from_file(token_file)
    if not access_token:
        print("Access token not found or invalid.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now()

    # –í—ã—á–∏—Ç–∞–µ–º —Å—É—Ç–∫–∏ (24 —á–∞—Å–∞)
    time_minus_day = current_time - timedelta(days=1)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
    current_time_str = current_time.strftime("%Y-%m-%d %H:%M:%S")
    time_minus_day_str = time_minus_day.strftime("%Y-%m-%d %H:%M:%S")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - —Å–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è, –∑–∞—Ç–µ–º –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–µ
    arrivalFrom, arrivalTo = convert_to_unix_range(time_minus_day_str, current_time_str)

    params = {
        "arrivalFrom": arrivalFrom,
        "arrivalTo": arrivalTo,
        "status": "",
        "source": "",
        "responsible": "",
        "organizationId": _organization_id,
    }

    # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = "https://my.easyms.co/api/orders"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {"accept": "*/*", "Authorization": f"Bearer {access_token}"}

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, params=params, headers=headers, timeout=30)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        data = response.json()
        with open(ORDERS_JSON_FILE, "w", encoding="utf-8") as json_file:
            json.dump(data, json_file, ensure_ascii=False, indent=4)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –≤ {ORDERS_JSON_FILE}")
        return data
    else:
        logger.error(
            f"Request failed with status code {response.status_code}: {response.text}"
        )
        return None


def load_json_data(file_path: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def post_reservation(reservation_data: Dict[str, Any]) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ API."""
    headers = {"Content-Type": "application/json"}
    endpoint = "/easyms/reservations/"
    url = f"{BASE_URL}{endpoint}"

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Å—Ç—Ä–æ–∫—É
        json_data = json.dumps(reservation_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å (verify=False –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)
        response = requests.post(
            url, data=json_data, headers=headers, timeout=30, verify=False
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        response.raise_for_status()

        # # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # logger.info(
        #     f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {reservation_data['id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.status_code}"
        # )
        return True

    except requests.exceptions.RequestException as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_data.get('id', 'unknown')}: {e}"
        )
        return False


def post_bulk_reservations(reservations_data: List[Dict[str, Any]]) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ API –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ."""
    headers = {"Content-Type": "application/json"}
    endpoint = "/easyms/reservations/bulk"
    url = f"{BASE_URL}{endpoint}"

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Å—Ç—Ä–æ–∫—É
        json_data = json.dumps(reservations_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            url, data=json_data, headers=headers, timeout=60, verify=False
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        response.raise_for_status()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = response.json()
        logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞: {result.get('count', 0)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return True

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
        return False


def get_reservations(
    filters: Optional[Dict[str, Any]] = None,
) -> Optional[List[Dict[str, Any]]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
    endpoint = "/easyms/reservations/"
    url = f"{BASE_URL}{endpoint}"

    try:
        response = requests.get(url, params=filters, timeout=30, verify=False)
        response.raise_for_status()

        reservations = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(reservations)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return reservations

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
        return None


def get_reservation_by_id(reservation_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID."""
    endpoint = f"/easyms/reservations/{reservation_id}"
    url = f"{BASE_URL}{endpoint}"

    try:
        response = requests.get(url, timeout=30, verify=False)
        response.raise_for_status()

        reservation = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID {reservation_id}")
        return reservation

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id}: {e}")
        return None


def update_reservation_status(reservation_id: str, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    endpoint = f"/easyms/reservations/status/{reservation_id}"
    url = f"{BASE_URL}{endpoint}"

    try:
        params = {"status": status}
        response = requests.put(url, params=params, timeout=30, verify=False)
        response.raise_for_status()

        logger.info(f"–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}")
        return True

    except requests.exceptions.RequestException as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id}: {e}"
        )
        return False


def update_reservation(
    reservation_id: str, reservation_data: Dict[str, Any]
) -> Optional[Dict[str, Any]]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    headers = {"Content-Type": "application/json"}
    endpoint = f"/easyms/reservations/{reservation_id}"
    url = f"{BASE_URL}{endpoint}"

    try:
        json_data = json.dumps(reservation_data)
        response = requests.put(
            url, data=json_data, headers=headers, timeout=30, verify=False
        )
        response.raise_for_status()

        updated_reservation = response.json()
        logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {reservation_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        return updated_reservation

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id}: {e}")
        return None


def delete_reservation(reservation_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    endpoint = f"/easyms/reservations/{reservation_id}"
    url = f"{BASE_URL}{endpoint}"

    try:
        response = requests.delete(url, timeout=30, verify=False)
        response.raise_for_status()

        logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {reservation_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        return True

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id}: {e}")
        return False


def update_reservation_status_only(reservation_id: str, status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    endpoint = f"/easyms/reservations/status/{reservation_id}"
    url = f"{BASE_URL}{endpoint}"
    params = {"status": status}

    try:
        response = requests.put(url, params=params, timeout=30, verify=False)

        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        # logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.headers}")
        # logger.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        response.raise_for_status()

        logger.info(
            f"–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}"
        )
        return True

    except requests.exceptions.RequestException as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id}: {e}"
        )
        if hasattr(e, "response") and e.response is not None:
            logger.error(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {e.response.status_code}")
            logger.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
        return False


def write_orders_to_api(orders_data=None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
    –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –∏–∑ —Ñ–∞–π–ª–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    processed_ids_file = data_directory / f"processed_ids_{organization_id}.json"
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID
    processed_ids = []
    if processed_ids_file.exists():
        try:
            with open(processed_ids_file, "r") as f:
                processed_ids = json.load(f)
        except:
            pass

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
    orders = orders_data or load_json_data(ORDERS_JSON_FILE)

    if not orders:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ orders —Å–ø–∏—Å–∫–æ–º
    if not isinstance(orders, list):
        logger.error("–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞")
        return False

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    existing_reservations = get_reservations() or []
    existing_ids = [res["id"] for res in existing_reservations]
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(existing_ids)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

    # –†–∞–∑–¥–µ–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    new_orders = []
    update_orders = []
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    new_orders = [order for order in new_orders if order.get("id") not in processed_ids]

    for order in orders:
        order_id = order.get("id")
        if order_id in existing_ids:
            update_orders.append(order)
        else:
            new_orders.append(order)

    logger.info(
        f"–ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∏ {len(update_orders)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    new_success_count = 0
    for order in new_orders:
        if post_reservation(order):
            new_success_count += 1

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    update_success_count = 0
    for order in update_orders:
        order_id = order.get("id")
        status = order.get("status", "ok")
        if update_reservation_status_only(order_id, status):
            update_success_count += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    for order in new_orders:
        if order.get("id") not in processed_ids:
            processed_ids.append(order.get("id"))

    with open(processed_ids_file, "w") as f:
        json.dump(processed_ids, f)

    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {new_success_count} –∏–∑ {len(new_orders)} –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
    logger.info(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {update_success_count} –∏–∑ {len(update_orders)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
    )

    return (new_success_count == len(new_orders)) and (
        update_success_count == len(update_orders)
    )


def run_full_process(username=None, password=None, org_id=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    """
    global organization_id

    # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if org_id:
        organization_id = org_id
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {organization_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_token(username, password)
    if not token:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
    orders = fetch_orders(organization_id)
    if not orders:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤")
        return False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ API
    success = write_orders_to_api(orders)

    if success:
        logger.info("–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    else:
        logger.error("–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

    return success


if __name__ == "__main__":
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    args = parse_arguments()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç)
    interval = args.interval

    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        while True:
            start_time = datetime.now()
            logger.info(f"–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {start_time}")

            if args.username and args.password:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –Ω–∏–º–∏
                logger.info(
                    f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {args.username}"
                )
                run_full_process(args.username, args.password, args.organization_id)
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ
                logger.info(
                    "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
                )
                get_token()
                fetch_orders()
                success = write_orders_to_api()
                if success:
                    logger.info("–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                else:
                    logger.error("–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

            # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞
            elapsed = (datetime.now() - start_time).total_seconds()

            # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            sleep_time = max(0, interval - elapsed)

            logger.info(f"–¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
            logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {sleep_time:.2f} —Å–µ–∫—É–Ω–¥")

            # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            time.sleep(sleep_time)

    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            pid_file = Path(__file__).parent / "run/easyms_process.pid"
            if pid_file.exists():
                pid_file.unlink()
                logger.info(f"PID —Ñ–∞–π–ª {pid_file} —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ PID —Ñ–∞–π–ª–∞: {e}")
