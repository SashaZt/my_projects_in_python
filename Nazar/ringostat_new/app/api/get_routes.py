#app/api/get_routes.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from app.core.dependencies import get_db
from app.schemas.telegram import TelegramMessageSchema, UserSchema, MessageSchema
from app.models.telegram_message import TelegramMessage
from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse
from pydantic import BaseModel
import secrets
from typing import Optional
import uvicorn
from loguru import logger
from pathlib import Path
import sys
current_directory = Path.cwd()
log_directory = current_directory / "log"
log_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"

router = APIRouter()

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)

@router.get("/telegram/messages", response_model=list[TelegramMessageSchema])
async def get_all_telegram_messages(db: AsyncSession = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.

    :param db: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :return: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    try:
        query = select(TelegramMessage).options(
            joinedload(TelegramMessage.sender), joinedload(TelegramMessage.recipient)
        )
        result = await db.execute(query)
        messages = result.scalars().all()

        if not messages:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return []

        serialized_messages = [
            TelegramMessageSchema(
                sender=UserSchema(
                    name=message.sender.name,
                    username=message.sender.username,
                    telegram_id=message.sender.telegram_id,
                    phone=message.sender.phone,
                ),
                recipient=UserSchema(
                    name=message.recipient.name,
                    username=message.recipient.username,
                    telegram_id=message.recipient.telegram_id,
                    phone=message.recipient.phone,
                ),
                message=MessageSchema(
                    message_id=message.message_id,
                    text=message.message,  # –∏–∑–º–µ–Ω–µ–Ω–æ —Å text –Ω–∞ message —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥–µ–ª–∏
                    is_reply=message.is_reply,
                    reply_to=message.reply_to,
                    read=message.is_read,  # –∏–∑–º–µ–Ω–µ–Ω–æ —Å read –Ω–∞ is_read —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥–µ–ª–∏
                    direction=message.direction,
                ),
            )
            for message in messages
        ]

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(serialized_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return serialized_messages

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}"
        )

# OLX_CONFIG = {
#     "client_id": "202061",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à client_id
#     "client_secret": "I4MVWEcN5OPsrFcyP3x5wkWzZ8UY2yWjOmrQMoWucu8uVJpo",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à client_secret
#     "redirect_uri": "https://185.233.116.213:5000/auth/connect",
#     "authorize_url": "https://www.olx.ua/oauth/authorize/",
#     "token_url": "https://www.olx.ua/api/open/oauth/token"
# }

# # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è state (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
# states = set()

# class TokenResponse(BaseModel):
#     access_token: str
#     expires_in: int
#     token_type: str
#     scope: str
#     refresh_token: str

# @router.get("/")
# async def root():
#     return {"message": "OLX OAuth Integration"}

# @router.get("/login/olx")
# async def login_olx():
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
#     state = secrets.token_urlsafe(32)
#     states.add(state)
    
#     # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
#     auth_url = (
#         f"{OLX_CONFIG['authorize_url']}"
#         f"?client_id={OLX_CONFIG['client_id']}"
#         f"&response_type=code"
#         f"&state={state}"
#         f"&scope=read write v2"
#         f"&redirect_uri={OLX_CONFIG['redirect_uri']}"
#     )
    
#     return RedirectResponse(url=auth_url)

# @router.get("/auth/connect")
# async def auth_callback(code: Optional[str] = None, state: Optional[str] = None):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º state
#     if not state or state not in states:
#         return {"error": "Invalid state"}
    
#     # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π state
#     states.remove(state)
    
#     if not code:
#         return {"error": "No code provided"}
    
#     # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
#     async with httpx.AsyncClient() as client:
#         try:
#             response = await client.post(
#                 OLX_CONFIG["token_url"],
#                 json={
#                     "grant_type": "authorization_code",
#                     "client_id": OLX_CONFIG["client_id"],
#                     "client_secret": OLX_CONFIG["client_secret"],
#                     "code": code,
#                     "scope": "v2 read write",
#                     "redirect_uri": OLX_CONFIG["redirect_uri"]
#                 }
#             )
            
#             if response.status_code == 200:
#                 token_data = TokenResponse(**response.json())
#                 return {
#                     "message": "Successfully authenticated",
#                     "token_data": token_data
#                 }
#             else:
#                 return {
#                     "error": "Failed to get token",
#                     "details": response.json()
#                 }
                
#         except Exception as e:
#             return {"error": f"Error during token exchange: {str(e)}"}
