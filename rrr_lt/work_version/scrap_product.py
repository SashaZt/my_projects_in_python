import json
import sys
import time
import urllib.parse
from pathlib import Path

import pandas as pd
import requests
from bs4 import BeautifulSoup
from loguru import logger

from config import COOKIES, HEADERS
from main_th_queue import process_pages_with_threads_code

# from main_th import process_products_with_threads

current_directory = Path.cwd()
html_code_directory = current_directory / "html_code"
json_product_directory = current_directory / "json_product"
log_directory = current_directory / "log"
data_directory = current_directory / "data"
log_directory.mkdir(parents=True, exist_ok=True)
data_directory.mkdir(parents=True, exist_ok=True)
json_product_directory.mkdir(parents=True, exist_ok=True)
html_code_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"
xlsx_result = data_directory / "result.xlsx"
output_csv_file = data_directory / "output.csv"


API_KEY = "6c54502fd688c7ce737f1c650444884a"
# API_KEY = "b7141d2b54426945a9f0bf6ab4c7bc54"
# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
MAX_RETRIES = 10
RETRY_DELAY = 30  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def extract_data_product():
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_data = {}

    for json_file in json_product_directory.glob("*.json"):
        with open(json_file, "r", encoding="utf-8") as file:
            data = json.load(file)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {json_file}")

        parts = data.get("parts", [])
        if not parts:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –≤ JSON.")
            continue

        min_price_part = min(
            parts, key=lambda x: float(x.get("price", float("inf"))), default=None
        )
        sku = data.get("search_query", None)

        categories = data.get("categories", {})
        category_name = next(
            (
                category["name"]
                for category in categories.values()
                if category.get("part_count", 0) > 0
            ),
            None,
        )

        if min_price_part and category_name:
            manufacturer_code = min_price_part.get("manufacturer_code", None)
            if not manufacturer_code:
                continue
            delivery_price_str = min_price_part.get("delivery_price", None)
            if delivery_price_str:
                delivery_price_str = delivery_price_str.replace(" ‚Ç¨", "")
            else:
                delivery_price_str = "0"

            price_str = min_price_part.get("price", "0")
            if not price_str:
                price_str = "0"

            delivery_price = float(delivery_price_str)
            price = float(price_str)

            result = {
                "–ë—Ä–µ–Ω–¥": min_price_part.get("car", {}).get("manufacturer", None),
                "–ö–æ–¥": manufacturer_code,
                # "K–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": manufacturer_code,
                "–û–ø–∏—Å–∞–Ω–∏–µ": f"{category_name} | –û—Ä–∏–≥—ñ–Ω–∞–ª | –ì–∞—Ä–∞–Ω—Ç—ñ—è  –Ω–∞ –≤–µ—Å—å —Ç–æ–≤–∞—Ä | –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ —É –Ω–∞—Å –≤ –°–¢–û | –ó–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –∑ –Ñ–≤—Ä–æ-—Ä–æ–∑–±–æ—Ä—ñ–≤ | –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å | –¢–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ | –ú–∏—Ä–Ω–æ–≥–æ –¥–Ω—è.",
                "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏": delivery_price + price,
                "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞": price,
                "–¶–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–∫–∏": delivery_price,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –®–¢.": "1",
                "–ë/–£": "1",
                "–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞": None,
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if category_name not in category_data:
                category_data[category_name] = []
            category_data[category_name].append(result)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_name}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category_name, data in category_data.items():
        if data:
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –∑–∞–º–µ–Ω—è—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            safe_category_name = "".join(
                c for c in category_name if c.isalnum() or c in (" ", "-", "_")
            )

            file_name = data_directory / f"{safe_category_name}.xlsx"
            df = pd.DataFrame(data)
            df.to_excel(file_name, index=False)
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}': {file_name}")
