import json
import os
import platform
import random
import shutil
import time
from datetime import datetime
from pathlib import Path

import requests
from config.logger import logger


def get_random_pause(min_seconds, max_seconds):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Returns:
        float: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞—É–∑—ã

    Examples:
        >>> pause = get_random_pause(2, 5)
        >>> print(f"–ü–∞—É–∑–∞: {pause:.2f} —Å–µ–∫—É–Ω–¥")

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å time.sleep
        >>> time.sleep(get_random_pause(1, 3))

        >>> # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å asyncio.sleep
        >>> await asyncio.sleep(get_random_pause(0.5, 2.0))
    """
    if min_seconds > max_seconds:
        min_seconds, max_seconds = max_seconds, min_seconds
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–µ–Ω—è–ª –º–µ—Å—Ç–∞–º–∏ min –∏ max: {min_seconds} - {max_seconds}")

    if min_seconds < 0:
        min_seconds = 0
        logger.warning(
            "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 0"
        )

    pause_duration = random.uniform(min_seconds, max_seconds)
    logger.debug(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {pause_duration:.2f} —Å–µ–∫—É–Ω–¥")

    return pause_duration


def random_pause(min_seconds, max_seconds):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ

    Args:
        min_seconds (int/float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        max_seconds (int/float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

    Examples:
        >>> await async_random_pause(1, 3)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
        >>> await async_random_pause(2.5, 5.0)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –æ—Ç 2.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    """
    pause_duration = get_random_pause(min_seconds, max_seconds)
    logger.info(f"üò¥ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ {pause_duration:.2f} —Å–µ–∫—É–Ω–¥...")
    time.sleep(pause_duration)


def get_downloads_folder():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Windows, macOS –∏ Linux.

    Returns:
        Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    """
    system = platform.system()

    try:
        if system == "Windows":
            # Windows: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USERPROFILE
            userprofile = os.environ.get("USERPROFILE")
            if userprofile:
                downloads_path = Path(userprofile) / "Downloads"
                if downloads_path.exists():
                    return downloads_path

        elif system == "Darwin":  # macOS
            # macOS: –ø–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            home = Path.home()
            downloads_path = home / "Downloads"
            if downloads_path.exists():
                return downloads_path

        elif system == "Linux":
            # Linux: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º XDG_DOWNLOAD_DIR, –∑–∞—Ç–µ–º ~/Downloads
            xdg_download = os.environ.get("XDG_DOWNLOAD_DIR")
            if xdg_download:
                downloads_path = Path(xdg_download)
                if downloads_path.exists():
                    return downloads_path

            # –ï—Å–ª–∏ XDG –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É
            home = Path.home()
            downloads_path = home / "Downloads"
            if downloads_path.exists():
                return downloads_path

        # Fallback: –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É Downloads –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        fallback_path = Path.home() / "Downloads"
        if fallback_path.exists():
            return fallback_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")

    return None


def get_cookies_folder():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏"""
    current_directory = Path.cwd()
    cookies_dir = current_directory / "cookies"
    cookies_dir.mkdir(parents=True, exist_ok=True)
    return cookies_dir


def move_latest_cookie_to_cookies_folder(client_id):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∫—É–∫–∏ –≤ Downloads –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É cookies"""
    downloads = get_downloads_folder()
    if not downloads or not downloads.exists():
        logger.error("–ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    pattern = f"cookie_{client_id}_01.json"
    matching_files = list(downloads.glob(pattern))

    if not matching_files:
        # –ò—â–µ–º –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –∫—É–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö
        matching_files = list(downloads.glob("cookie_*.json"))
        if not matching_files:
            logger.error("–§–∞–π–ª—ã –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫")
            return None

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    latest_cookie_file = max(matching_files, key=lambda p: p.stat().st_mtime)

    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cookies_folder = get_cookies_folder()

    target_path = cookies_folder / pattern

    try:
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª (–Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –∑–∞–≥—Ä—É–∑–∫–∞—Ö)
        shutil.copy2(latest_cookie_file, target_path)
        logger.info(f"–§–∞–π–ª –∫—É–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ {latest_cookie_file} –≤ {target_path}")
        return target_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫—É–∫–∏: {str(e)}")
        return None


def get_latest_cookie_from_cookies_folder(client_id):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∫—É–∫–∏ –≤ –ø–∞–ø–∫–µ cookies"""
    cookies_folder = get_cookies_folder()
    pattern = f"cookie_{client_id}_*.json"
    matching_files = list(cookies_folder.glob(pattern))

    if not matching_files:
        logger.error(f"–§–∞–π–ª—ã –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ cookies –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        return None

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    latest_cookie_file = max(matching_files, key=lambda p: p.stat().st_mtime)
    logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫—É–∫–∏ –≤ –ø–∞–ø–∫–µ cookies: {latest_cookie_file}")
    return latest_cookie_file


def load_cookies_from_file(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É–∫–∏
    –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä—è
    """
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            cookie_data = json.load(f)

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –∫—É–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è cookies
        important_cookies = {}
        if "cookies" in cookie_data:
            cookies_dict = cookie_data["cookies"]
            # –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –∫—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å
            important_keys = [
                "_cmuid",
                "gdpr_permission_given",
                "QXLSESSID",
                "datadome",
            ]

            for key in important_keys:
                if key in cookies_dict:
                    important_cookies[key] = cookies_dict[key]

        # –ï—Å–ª–∏ –≤–∞–∂–Ω—ã–µ –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏ cookieString
        if not important_cookies and "cookieString" in cookie_data:
            cookie_str = cookie_data["cookieString"]
            cookie_parts = cookie_str.split("; ")

            for part in cookie_parts:
                if "=" in part:
                    name, value = part.strip().split("=", 1)
                    if name in [
                        "_cmuid",
                        "gdpr_permission_given",
                        "QXLSESSID",
                        "datadome",
                    ]:
                        important_cookies[name] = value

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Cookie
        cookie_string = "; ".join(
            [f"{name}={value}" for name, value in important_cookies.items()]
        )

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–∞–∂–Ω—ã–µ –∫—É–∫–∏: {', '.join(important_cookies.keys())}")

        return {"cookieString": cookie_string, "cookies": important_cookies}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return None


def create_ad_campaign(
    cookies_data,
    client_id,
    campaign_name,
    ad_group_name,
    daily_limit,
    max_cpc,
    offer_id,
    start_date,
    end_date,
):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ Allegro"""

    # URL API
    url = f"https://edge.salescenter.allegro.com/ads-panel/api/clients/{client_id}/campaigns"

    # –ü–æ–ª–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–∞–∫ –≤ curl-–∑–∞–ø—Ä–æ—Å–µ
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Accept-Language": "ru,en;q=0.9,uk;q=0.8",
        "Cache-Control": "no-cache",
        "DNT": "1",
        "DPR": "1",
        "Pragma": "no-cache",
        "Priority": "u=0, i",
        "Referer": "https://salescenter.allegro.com/ads/panel/campaigns?marketplace=allegro-pl",
        "Sec-CH-Device-Memory": "8",
        "Sec-CH-Prefers-Color-Scheme": "light",
        "Sec-CH-Prefers-Reduced-Motion": "reduce",
        "Sec-CH-UA": '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
        "Sec-CH-UA-Arch": '"x86"',
        "Sec-CH-UA-Full-Version-List": '"Google Chrome";v="135.0.7049.115", "Not-A.Brand";v="8.0.0.0", "Chromium";v="135.0.7049.115"',
        "Sec-CH-UA-Mobile": "?0",
        "Sec-CH-UA-Model": '""',
        "Sec-CH-UA-Platform": '"Windows"',
        "Sec-CH-Viewport-Height": "1031",
        "Sec-Fetch-Dest": "document",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-Site": "same-origin",
        "Sec-Fetch-User": "?1",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
        "Viewport-Width": "1193",
        "Cookie": cookies_data["cookieString"],
    }

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
    payload = {
        "campaign": {"name": campaign_name, "type": "GENERIC"},
        "adGroup": {
            "name": ad_group_name,
            "dailyLimit": daily_limit,
            "startDateTime": start_date,
            "endDateTime": end_date,
            "maxCpc": max_cpc,
            "placementIds": ["listing"],
            "model": {
                "type": "offers-placement-based-static",
                "offerIds": [offer_id],
                "phrases": {
                    "additionalKeywords": [],
                    "queryForbiddenPhrases": [],
                    "queryRequiredPhrases": [],
                },
            },
        },
    }

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {url}")
    # logger.info(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(payload, indent=4)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if "QXLSESSID" not in cookies_data["cookieString"]:
        logger.error("–í —Ñ–∞–π–ª–µ –∫—É–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç QXLSESSID!")
        # –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫—É–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.error(
            f"–°—Ç—Ä–æ–∫–∞ –∫—É–∫–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {cookies_data['cookieString'][:100]}"
        )
        return None

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code in [200, 201]:
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è: {campaign_name}")
            return response.json()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏: {response.status_code}")
            logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")

            return None
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return None


def main():
    current_directory = Path.cwd()
    ad_directory = current_directory / "ad"
    ad_directory.mkdir(parents=True, exist_ok=True)
    output_json_file = ad_directory / "test.json"

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        with open(output_json_file, "r", encoding="utf-8") as f:
            configs = json.load(f)
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {output_json_file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        return
    for config in configs:
        # ID –∫–ª–∏–µ–Ω—Ç–∞ (–∏–∑ URL)
        client_id = config.get("client_id", "MTMwNzU2NDgwAA")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏
        campaign_name = config.get("campaign_name", "test_24")
        ad_group_name = config.get("ad_group_name", "Grupa reklam - 14.05.2025")
        daily_limit = config.get("daily_limit", "140.00")
        max_cpc = config.get("max_cpc", "0.70")
        offer_id = config.get("offer_id", "17475780478")
        start_date = config.get("start_date", "2025-05-14T22:00:00.000Z")
        end_date = config.get("end_date", "2025-05-14T22:00:00.000Z")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –∫—É–∫–∏ –≤ –ø–∞–ø–∫–µ cookies
        cookie_file = get_latest_cookie_from_cookies_folder(client_id)

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ cookies –∏–ª–∏ –æ–Ω —Å—Ç–∞—Ä—ã–π, –∏—â–µ–º –≤ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ –∏ –∫–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        if (
            not cookie_file
            or (
                datetime.now() - datetime.fromtimestamp(cookie_file.stat().st_mtime)
            ).total_seconds()
            > 3600
        ):
            logger.info("–ü–æ–∏—Å–∫ —Å–≤–µ–∂–µ–≥–æ —Ñ–∞–π–ª–∞ –∫—É–∫–∏ –≤ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫...")
            new_cookie_file = move_latest_cookie_to_cookies_folder(client_id)
            if new_cookie_file:
                cookie_file = new_cookie_file
            else:
                logger.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –∫—É–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"
                )

        if not cookie_file:
            logger.error("–§–∞–π–ª –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        cookies_data = load_cookies_from_file(cookie_file)
        if not cookies_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∫—É–∫–∏")
            return
        # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
        result = create_ad_campaign(
            cookies_data=cookies_data,
            client_id=client_id,
            campaign_name=campaign_name,
            ad_group_name=ad_group_name,
            daily_limit=daily_limit,
            max_cpc=max_cpc,
            offer_id=offer_id,
            start_date=start_date,
            end_date=end_date,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if result:
            result_file = ad_directory / f"campaign_result_{offer_id}.json"
            with open(result_file, "w", encoding="utf-8") as f:
                json.dump(result, f, indent=4, ensure_ascii=False)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {result_file}")
            random_pause(1, 5)
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é.")


if __name__ == "__main__":
    main()
