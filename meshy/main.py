import json
import sys
import time
from pathlib import Path
from PIL import Image
from io import BytesIO
import pandas as pd
import requests
from loguru import logger
from concurrent.futures import ThreadPoolExecutor, as_completed
import wget


current_directory = Path.cwd()
json_original_directory = current_directory / "json_original"
json_product_directory = current_directory / "json_product"
log_directory = current_directory / "log"
img_directory = current_directory / "img"
thumbnailUrl_directory = current_directory / "thumbnailUrl"

img_directory.mkdir(parents=True, exist_ok=True)
json_original_directory.mkdir(parents=True, exist_ok=True)
json_original_directory.mkdir(parents=True, exist_ok=True)
thumbnailUrl_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"

BASE_URL = "https://static-cos.mureka.ai/"
FILE_NAME_JSON = "3d"



logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)
cookies = {
    'sajssdk_2015_cross_new_user': '1',
    'sensorsdata2015jssdkcross': '%7B%22distinct_id%22%3A%221953e188ce71aee-0850c4a727ae878-26011a51-2304000-1953e188ce81b82%22%2C%22first_id%22%3A%22%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%2C%22%24latest_referrer%22%3A%22%22%7D%2C%22identities%22%3A%22eyIkaWRlbnRpdHlfY29va2llX2lkIjoiMTk1M2UxODhjZTcxYWVlLTA4NTBjNGE3MjdhZTg3OC0yNjAxMWE1MS0yMzA0MDAwLTE5NTNlMTg4Y2U4MWI4MiJ9%22%2C%22history_login_id%22%3A%7B%22name%22%3A%22%22%2C%22value%22%3A%22%22%7D%7D',
    '__stripe_mid': 'f338a4a2-d0ce-4827-ab76-a73a4d4b950cb113e2',
    '__stripe_sid': '739b6d27-e30c-4f66-8d63-34d46d472839560169',
}

headers = {
    'accept': 'application/json, text/plain, */*',
    'accept-language': 'ru,en;q=0.9,uk;q=0.8',
    'dnt': '1',
    'priority': 'u=1, i',
    'referer': 'https://www.mureka.ai/genre-detail?id=6&name=afrobeat',
    'sec-ch-ua': '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36',
    'x-app-name': 'Mureka',
    'x-auth-timestamp': '1740505056227',
    'x-firebase-id': '',
    'x-source': 'IntcIiRsYXRlc3RfdHJhZmZpY19zb3VyY2VfdHlwZVwiOlwi55u05o6l5rWB6YePXCIsXCIkbGF0ZXN0X3NlYXJjaF9rZXl3b3JkXCI6XCLmnKrlj5bliLDlgLxf55u05o6l5omT5byAXCIsXCIkbGF0ZXN0X3JlZmVycmVyXCI6XCJcIn0i',
    'x-user-agent': 'en/1.0.1/web/android/web/1953e188ce71aee-0850c4a727ae878-26011a51-2304000-1953e188ce81b82/unknown//3x',
    # 'cookie': 'sajssdk_2015_cross_new_user=1; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%221953e188ce71aee-0850c4a727ae878-26011a51-2304000-1953e188ce81b82%22%2C%22first_id%22%3A%22%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%2C%22%24latest_referrer%22%3A%22%22%7D%2C%22identities%22%3A%22eyIkaWRlbnRpdHlfY29va2llX2lkIjoiMTk1M2UxODhjZTcxYWVlLTA4NTBjNGE3MjdhZTg3OC0yNjAxMWE1MS0yMzA0MDAwLTE5NTNlMTg4Y2U4MWI4MiJ9%22%2C%22history_login_id%22%3A%7B%22name%22%3A%22%22%2C%22value%22%3A%22%22%7D%7D; __stripe_mid=f338a4a2-d0ce-4827-ab76-a73a4d4b950cb113e2; __stripe_sid=739b6d27-e30c-4f66-8d63-34d46d472839560169',
}

# def get_json():
#     for page in range(1, 11):
#         if page == 1:
#             params = {
#             'param': FILE_NAME_JSON,
#         }
#             url = f'https://www.freepik.com/_next/data/dbTWBGYytMf6qZVClARjW/en/templates/{FILE_NAME_JSON}.json'
#         else:
#             params = {
#             'param': [
#                 FILE_NAME_JSON,
#                 page,
#             ],
#             }
#             url = f'https://www.freepik.com/_next/data/dbTWBGYytMf6qZVClARjW/en/templates/{FILE_NAME_JSON}/{page}.json'

#         output_file = json_original_directory / FILE_NAME_JSON / f"{FILE_NAME_JSON}_{page}.json"
#         output_file.parent.mkdir(parents=True, exist_ok=True)
#         if output_file.exists():
#             continue
#         response = requests.get(
#             url,
#             params=params,
#             cookies=cookies,
#             headers=headers,
#             timeout=30,
#         )

        
#         # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON, —Ç–æ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ:
#         try:
#             data = response.json()
#             with open(output_file, "w", encoding="utf-8") as f:
#                 json.dump(data, f, ensure_ascii=False, indent=4)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
#             logger.info(f"–°–æ—Ö—Ä–∞–Ω–∏–ª {output_file}")
#         except ValueError:
#             logger.error("–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON")

def get_meshy_showcases(start_page=1, end_page=51, page_size=20):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∏—Ç—Ä–∏–Ω—ã (showcases) —Å API Meshy.ai —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—É—é
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ JSON —Ñ–∞–π–ª—ã.
    
    Args:
        start_page (int): –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        end_page (int): –ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        page_size (int): –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–æ–≤
    output_dir = Path("meshy_showcases")
    output_dir.mkdir(exist_ok=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ curl
    headers = {
        'accept': 'application/json, text/plain, */*',
        'accept-language': 'ru,en;q=0.9,uk;q=0.8',
        'dnt': '1',
        'origin': 'https://www.meshy.ai',
        'referer': 'https://www.meshy.ai/',
        'sec-ch-ua': '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36'
    }
    
    # –ë–∞–∑–æ–≤—ã–π URL API
    base_url = 'https://api.meshy.ai/web/public/showcases'
    
    total_items = 0
    
    for page_num in range(start_page, end_page + 1):
        logger.info(page_num)
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'sortBy': '-created_at',
            'pageSize': page_size,
            'pageNum': page_num,
            'includeNSFW': 'false',
            'isFeatured': 'true',
            'search': '',
            'artStyle': ''
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.get(base_url, params=params, headers=headers,timeout=30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200:
                # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
                data = response.json()
                
                # # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
                # items_count = len(data.get('data', []))
                # total_items += items_count
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                file_name = json_original_directory / f"meshy_showcases_page_{page_num}.json"
                if file_name.exists():
                    continue
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–∞–π–ª
                with open(file_name, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                
                # logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {items_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {file_name}")
                
                # # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∑–Ω–∞—á–∏—Ç –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
                # if items_count == 0:
                #     logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                #     break
                    
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {response.status_code}")
                logger.error(response.text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
            time.sleep(1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
    

def process_data():
    all_data = []
    for json_file in json_original_directory.glob("*.json"):
        with open(json_file, "r", encoding="utf-8") as file:
            data = json.load(file)
        json_datas = data["result"]
        for json_data in json_datas:
            id_product = json_data.get("id", None)
            objectPrompt = json_data.get("objectPrompt", None)
            modelUrl = json_data.get("modelUrl", None)
            thumbnailUrl = json_data.get("thumbnailUrl", None)
            solidThumbnailUrl = json_data.get("solidThumbnailUrl", None)
            categories = ", ".join(json_data.get("categories", []))
            tags = ", ".join(json_data.get("tags", []))
            data_product = {
                "id_product":id_product,
                "objectPrompt":objectPrompt,
                "modelUrl":modelUrl,
                "thumbnailUrl":thumbnailUrl,
                "solidThumbnailUrl":solidThumbnailUrl,
                "categories":categories,
                "tags":tags,
            }
            all_data.append(data_product)
    # –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω JSON —Ñ–∞–π–ª
    output_file = json_product_directory / FILE_NAME_JSON / f"{FILE_NAME_JSON}.json"
    output_file.parent.mkdir(parents=True, exist_ok=True)
    with open(output_file, 'w', encoding='utf-8') as outfile:
        json.dump(all_data, outfile, ensure_ascii=False, indent=4)
    # –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª
    df = pd.DataFrame(all_data)
    output_excel_file = json_product_directory / FILE_NAME_JSON / f"{FILE_NAME_JSON}.xlsx"
    output_excel_file.parent.mkdir(parents=True, exist_ok=True)
    df.to_excel(output_excel_file, index=False)

def save_glbs(url, name):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    try:
        
        file_name = img_directory / FILE_NAME_JSON / f"{name}.glb"
        file_name.parent.mkdir(parents=True, exist_ok=True)

        if file_name.exists():
            logger.error(file_name)
            return
        response = requests.get(url, headers=headers, stream=True, timeout=60)
        if response.status_code == 200:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            with open(file_name, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192): 
                    f.write(chunk)
            logger.info(f"3D –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {file_name}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {response.status_code}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")

def get_glbs(num_threads=5):
    """–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç JSON –∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    output_directory = json_product_directory / FILE_NAME_JSON
    image_tasks = []

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    for json_file in output_directory.glob("*.json"):
        with open(json_file, "r", encoding="utf-8") as file:
            datas = json.load(file)

        for data in datas:
            id_product = data.get("id_product")
            modelUrl = data.get("modelUrl")
            if id_product and modelUrl:
                image_tasks.append((modelUrl, id_product))
            else:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ {json_file}")

    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        future_to_url = {executor.submit(save_glbs, url, slug): url for url, slug in image_tasks}

        for future in as_completed(future_to_url):
            try:
                future.result()  # –í—ã–∑—ã–≤–∞–µ–º result() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
def save_thumbnai(url, name):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç MP3 —Ñ–∞–π–ª."""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        save_dir = thumbnailUrl_directory / FILE_NAME_JSON
        save_dir.mkdir(parents=True, exist_ok=True)
        
        file_name = save_dir / f"{name}.jpg"
        
        if file_name.exists():
            logger.error(f"–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_name}")
            return
        
        response = requests.get(url, cookies=cookies, headers=headers, timeout=30)
        if response.status_code == 200:
            try:
                # –î–ª—è AVIF –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
                if '.avif' in url.lower():
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å –ø–æ–º–æ—â—å—é PIL
                    temp_path = str(file_name).replace('.jpg', '.temp')
                    with open(temp_path, 'wb') as f:
                        f.write(response.content)
                        
                    try:
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ PIL –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                        image = Image.open(temp_path)
                        image.save(file_name, "JPEG")
                        os.remove(temp_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    except Exception as img_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AVIF, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å: {img_error}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º
                        os.rename(temp_path, str(file_name))
                else:
                    # –û–±—ã—á–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                    image = Image.open(BytesIO(response.content))
                    image.save(file_name, "JPEG")
                
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {file_name}")
            except Exception as img_error:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å: {img_error}")
                with open(file_name, 'wb') as f:
                    f.write(response.content)
                logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file_name}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {response.status_code}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")

def get_thumbnais(num_threads=10):
    """–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç JSON –∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    output_directory = json_product_directory / FILE_NAME_JSON
    image_tasks = []

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    for json_file in output_directory.glob("*.json"):
        with open(json_file, "r", encoding="utf-8") as file:
            datas = json.load(file)

        for data in datas:
            id_product = data.get("id_product")
            thumbnailUrl = data.get("thumbnailUrl")
            if id_product and thumbnailUrl:
                image_tasks.append((thumbnailUrl, id_product))
            else:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ {json_file}")

    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        future_to_url = {executor.submit(save_thumbnai, url, slug): url for url, slug in image_tasks}

        for future in as_completed(future_to_url):
            try:
                future.result()  # –í—ã–∑—ã–≤–∞–µ–º result() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")

if __name__ == "__main__":
    # get_meshy_showcases()
    # get_json()
    # process_data()
    get_glbs(num_threads=10)  # –£–∫–∞–∂–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    get_thumbnais(num_threads=10)  # –£–∫–∞–∂–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤