import asyncio
import hashlib
import random
from typing import Any, Dict, List, Optional

import aiofiles
import pandas as pd
from curl_cffi.requests import AsyncSession

from config import Config, logger, paths

cookies = {
    "ddg_last_challenge": "1752176242472",
    "__ddg1_": "A2JFV3hF5LjbvBJl1Ex5",
    "astratop": "1",
    "_gid": "GA1.2.248813402.1752151718",
    "tmr_lvid": "723c8c9e1a26f0a74f39837f5c73a19b",
    "tmr_lvidTS": "1752151717741",
    "_ym_uid": "1752151718242263013",
    "_ym_d": "1752151718",
    "_ym_isad": "2",
    "domain_sid": "j3Lmf8Xx_Ff1QAZNS4YQH%3A1752151721282",
    "__ddgid_": "TdAS7e6lQZ60dN6H",
    "__ddgmark_": "0KuL2bOMMzKN8MLO",
    "_ga": "GA1.2.1128775481.1752151718",
    "tmr_detect": "0%7C1752169649475",
    "_ga_ZMW4L3KL6T": "GS2.1.s1752169646$o2$g0$t1752169649$j57$l0$h0",
    "__ddg9_": "98.98.200.168",
    "__ddg5_": "YeiY2TWESnCmj0Yh",
    "__ddg2_": "LpS0buKI5p8ombVo",
    "__ddg8_": "QY2ieBZF7U7gyBjO",
    "__ddg10_": "1752176244",
    "_gat": "1",
}

headers = {
    "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    "cache-control": "max-age=0",
    "priority": "u=0, i",
    "sec-ch-ua": '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": '"Windows"',
    "sec-fetch-dest": "document",
    "sec-fetch-mode": "navigate",
    "sec-fetch-site": "cross-site",
    "sec-fetch-user": "?1",
    "upgrade-insecure-requests": "1",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
}


class Downloader:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å TLS fingerprinting –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –≠–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Chrome, Firefox, Safari, Edge)
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    - –†–æ—Ç–∞—Ü–∏—è User-Agent'–æ–≤
    """

    def __init__(self, config: Config, proxy: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Config
            proxy: –ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "http://user:pass@host:port" –∏–ª–∏ None (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ—Ç—Å—è –∏–∑ config)
        """
        self.config = config.client

        # –ü—Ä–æ–∫—Å–∏: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –∏–Ω–∞—á–µ None
        if proxy is not None:
            self.proxy = proxy
        elif self.config.proxy:
            self.proxy = self.config.proxy
        else:
            self.proxy = None

        self.semaphore = asyncio.Semaphore(self.config.max_workers)
        self.session_stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "retry_attempts": 0,
        }

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.output_path = paths.html

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        self.logger = logger

    # def _get_random_user_agent(self) -> str:
    #     """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    #     return random.choice(self.config.user_agents)

    def _get_filename_from_url(self, url: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL"""
        url_hash = hashlib.md5(url.encode()).hexdigest()
        return f"{url_hash}.html"

    async def _make_request(self, url: str) -> Optional[str]:
        for attempt in range(self.config.retry_attempts):
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                if attempt > 0:
                    await asyncio.sleep(self.config.retry_delay * attempt)
                else:
                    await asyncio.sleep(
                        random.uniform(self.config.delay_min, self.config.delay_max)
                    )

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è curl_cffi
                proxy_config = None
                if self.proxy:
                    proxy_config = {"http": self.proxy, "https": self.proxy}
                async with AsyncSession() as session:

                    response = await session.get(
                        url,
                        cookies=cookies,
                        headers=headers,
                        proxies=proxy_config,
                        verify=False,
                        timeout=self.config.timeout,
                    )

                    self.session_stats["total_requests"] += 1

                    if response.status_code == 200:
                        content = response.text
                        self.session_stats["successful_requests"] += 1
                        self.logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {url}")
                        return content
                    else:
                        self.logger.warning(f"‚ùå HTTP {response.status_code} –¥–ª—è {url}")
                        if response.status_code in [403, 429]:
                            await asyncio.sleep(random.uniform(5, 10))
                        raise Exception(f"HTTP {response.status_code}")

            except Exception as e:
                self.session_stats["retry_attempts"] += 1
                self.logger.error(
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.retry_attempts} –¥–ª—è {url}: {e}"
                )

                if attempt == self.config.retry_attempts - 1:
                    self.session_stats["failed_requests"] += 1
                    self.logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url} –ø–æ—Å–ª–µ {self.config.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫"
                    )

        return None

    async def download_url(self, url: str, filename: Optional[str] = None) -> bool:
        """
        –°–∫–∞—á–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É

        Args:
            url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        async with self.semaphore:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                if filename is None:
                    filename = self._get_filename_from_url(url)

                file_path = self.output_path / filename

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if file_path.exists():
                    self.logger.info(f"‚è≠Ô∏è –§–∞–π–ª {file_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return True

                # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = await self._make_request(url)

                if content:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                    async with aiofiles.open(
                        file_path, "w", encoding="windows-1251"
                    ) as f:
                        await f.write(content)

                    self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                    return True
                else:
                    return False

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")
                return False

    async def download_urls(
        self, urls: List[str], custom_filenames: Optional[Dict[str, str]] = None
    ) -> Dict[str, bool]:
        """
        –°–∫–∞—á–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ URL'–æ–≤

        Args:
            urls: –°–ø–∏—Å–æ–∫ URL'–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            custom_filenames: –°–ª–æ–≤–∞—Ä—å {url: filename} –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å {url: success_status}
        """
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(urls)} URL'–æ–≤")
        self.logger.info(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {self.config.max_workers} –ø–æ—Ç–æ–∫–æ–≤, –ø—Ä–æ–∫—Å–∏: {'–î–∞' if self.proxy else '–ù–µ—Ç'}"
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = []
        for url in urls:
            filename = custom_filenames.get(url) if custom_filenames else None
            task = self.download_url(url, filename)
            tasks.append((url, task))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        results = {}
        completed_tasks = await asyncio.gather(
            *[task for _, task in tasks], return_exceptions=True
        )

        for (url, _), result in zip(tasks, completed_tasks):
            if isinstance(result, Exception):
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {url}: {result}")
                results[url] = False
            else:
                results[url] = result

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for success in results.values() if success)
        self.logger.info(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{len(urls)} —É—Å–ø–µ—à–Ω–æ")
        self.logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏: {self.session_stats}")

        return results

    async def download_from_csv(
        self, csv_file: str, url_column: str = "url"
    ) -> Dict[str, bool]:
        """
        –°–∫–∞—á–∞—Ç—å URL'—ã –∏–∑ CSV —Ñ–∞–π–ª–∞

        Args:
            csv_file: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
            url_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å URL'–∞–º–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å {url: success_status}
        """
        try:
            df = pd.read_csv(csv_file)
            urls = df[url_column].tolist()

            self.logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(urls)} URL'–æ–≤ –∏–∑ {csv_file}")
            return await self.download_urls(urls)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            return {}

    async def _make_post_request(
        self, url: str, data: Optional[Dict] = None, json_data: Optional[Dict] = None
    ) -> Optional[str]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å

        Args:
            url: URL –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            data: Form data (application/x-www-form-urlencoded)
            json_data: JSON data (application/json)

        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        for attempt in range(self.config.retry_attempts):
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                if attempt > 0:
                    await asyncio.sleep(self.config.retry_delay * attempt)
                else:
                    await asyncio.sleep(
                        random.uniform(self.config.delay_min, self.config.delay_max)
                    )

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è curl_cffi
                proxy_config = None
                if self.proxy:
                    proxy_config = {"http": self.proxy, "https": self.proxy}

                async with AsyncSession() as session:

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if json_data:
                        headers["Content-Type"] = "application/json"
                    elif data:
                        headers["Content-Type"] = "application/x-www-form-urlencoded"

                    response = await session.post(
                        url,
                        headers=headers,
                        data=data,
                        json=json_data,
                        proxies=proxy_config,
                        verify=False,
                        timeout=self.config.timeout,
                    )

                    self.session_stats["total_requests"] += 1

                    if response.status_code in [200, 201, 202]:
                        content = response.text
                        self.session_stats["successful_requests"] += 1
                        self.logger.debug(f"‚úÖ POST —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {url}")
                        return content
                    else:
                        self.logger.warning(
                            f"‚ùå POST HTTP {response.status_code} –¥–ª—è {url}"
                        )
                        if response.status_code in [403, 429]:
                            await asyncio.sleep(random.uniform(5, 10))
                        raise Exception(f"HTTP {response.status_code}")

            except Exception as e:
                self.session_stats["retry_attempts"] += 1
                self.logger.error(
                    f"üîÑ POST –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.retry_attempts} –¥–ª—è {url}: {e}"
                )

                if attempt == self.config.retry_attempts - 1:
                    self.session_stats["failed_requests"] += 1
                    self.logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å POST {url} –ø–æ—Å–ª–µ {self.config.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫"
                    )

        return None

    async def post_url(
        self,
        url: str,
        data: Optional[Dict] = None,
        json_data: Optional[Dict] = None,
        filename: Optional[str] = None,
    ) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç

        Args:
            url: URL –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
            data: Form data (–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è form-encoded)
            json_data: JSON data (—Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON)
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        async with self.semaphore:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
                if filename is None:
                    filename = self._get_filename_from_url(f"{url}_post")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if Path(filename).exists():
                    self.logger.info(f"‚è≠Ô∏è –§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return True

                # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
                content = await self._make_post_request(url, data, json_data)

                if content:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                    async with aiofiles.open(filename, "w", encoding="utf-8") as f:
                        await f.write(content)

                    self.logger.info(f"üíæ POST —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                    return True
                else:
                    return False

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ POST –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
                return False

    async def post_urls(self, requests_data: List[Dict]) -> Dict[str, bool]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ POST –∑–∞–ø—Ä–æ—Å–æ–≤

        Args:
            requests_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
                        –ö–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
                        - 'url': –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                        - 'data': –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (form data)
                        - 'json_data': –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (json data)
                        - 'filename': –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–∏–º—è —Ñ–∞–π–ª–∞)

        Returns:
            –°–ª–æ–≤–∞—Ä—å {url: success_status}
        """
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(requests_data)} POST –∑–∞–ø—Ä–æ—Å–æ–≤")
        self.logger.info(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {self.config.max_workers} –ø–æ—Ç–æ–∫–æ–≤, –ø—Ä–æ–∫—Å–∏: {'–î–∞' if self.proxy else '–ù–µ—Ç'}"
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = []
        for request_info in requests_data:
            url = request_info["url"]
            data = request_info.get("data")
            json_data = request_info.get("json_data")
            filename = request_info.get("filename")

            task = self.post_url(url, data, json_data, filename)
            tasks.append((url, task))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        results = {}
        completed_tasks = await asyncio.gather(
            *[task for _, task in tasks], return_exceptions=True
        )

        for (url, _), result in zip(tasks, completed_tasks):
            if isinstance(result, Exception):
                self.logger.error(f"‚ùå POST –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {url}: {result}")
                results[url] = False
            else:
                results[url] = result

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for success in results.values() if success)
        self.logger.info(
            f"üìä POST –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{len(requests_data)} —É—Å–ø–µ—à–Ω–æ"
        )
        self.logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏: {self.session_stats}")

        return results

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        return self.session_stats.copy()

    def reset_stats(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        self.session_stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "retry_attempts": 0,
        }

    @classmethod
    def create_from_config(
        cls, config_path: Optional[str] = None, proxy_override: Optional[str] = None
    ):
        """
        –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
            proxy_override: –ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä Downloader
        """
        config = Config.load()
        return cls(config, proxy_override)


config = Config.load()
downloader = Downloader(config)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def download_urls_simple(
    urls: List[str], max_workers: int = 10, proxy: Optional[str] = None
) -> Dict[str, bool]:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è URL'–æ–≤ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

    Args:
        urls: –°–ø–∏—Å–æ–∫ URL'–æ–≤
        max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        proxy: –ü—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    config = Config.load()
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º max_workers –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    config.client.max_workers = max_workers

    downloader = Downloader(config, proxy)
    return await downloader.download_urls(urls)


async def download_from_csv_simple(
    csv_file: str, max_workers: int = 10, proxy: Optional[str] = None
) -> Dict[str, bool]:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞

    Args:
        csv_file: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        proxy: –ü—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    config = Config.load()
    config.client.max_workers = max_workers

    downloader = Downloader(config, proxy)
    return await downloader.download_from_csv(csv_file)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ Downloader —Å –≤–∞—à–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º"""

    # –°–ø–∏—Å–æ–∫ URL'–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    start_xml_path = paths.data / "sitemap.xml"
    output_csv_file = paths.data / "output.csv"
    df = pd.read_csv(output_csv_file, encoding="utf-8")
    urls = df["url"].tolist()
    # –°–∫–∞—á–∏–≤–∞–µ–º
    results = await downloader.download_urls(urls)

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for url, success in results.items():
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
        logger.info(f"{status}: {url}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {downloader.get_stats()}")


if __name__ == "__main__":
    asyncio.run(main())
