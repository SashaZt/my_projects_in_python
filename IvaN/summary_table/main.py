import subprocess
import sys
from pathlib import Path

import pandas as pd
from loguru import logger
from sqlalchemy import Column, Integer, String, Text, create_engine, func, inspect, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import declarative_base, sessionmaker

current_directory = Path.cwd()
configuration_directory = current_directory / "configuration"
log_directory = current_directory / "log"
log_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


# –°–æ–∑–¥–∞–µ–º Base –≥–ª–æ–±–∞–ª—å–Ω–æ
Base = declarative_base()


def create_db_connection(
    user="python_mysql", password="python_mysql", host="localhost", db="kg"
):
    """Create database connection and return engine"""
    engine = create_engine(f"mysql+pymysql://{user}:{password}@{host}/{db}", echo=True)
    return engine


def define_models(Base):
    """Define all database models"""

    class LoadingKyrgyzstan(Base):
        __tablename__ = "loading_kyrgyzstan"
        __table_args__ = {'extend_existing': True}  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
        id = Column(Integer, primary_key=True, autoincrement=True)
        naimenovanie = Column(Text)
        dr_nazva = Column(Text)
        naimenovanie_polnoe = Column(Text)
        adres = Column(Text)
        rukovodstvo = Column(Text)
        rukovodstvo_dolzhnost = Column(Text)
        telefon = Column(Text)
        elektronnyi_adres = Column(Text)
        sait = Column(Text)
        data_registratsii = Column(Text)
        data_pervonachalnoi_registratsii = Column(Text)
        sovladeltcy = Column(Text)
        inn = Column(Text)
        # inn = Column(String(255), index=True)
        registratsionnyi_nomer = Column(Text)
        kod_statistiki = Column(Text)
        region_registratsii = Column(Text)
        vid_deyatelnosti_otrasl = Column(Text)
        organizatsionno_pravovaya_forma = Column(Text)
        srednespisochnaia_chislennost_rabotnikov = Column(Text)

    class OsooKg(Base):
        __tablename__ = "osoo_kg"
        __table_args__ = {'extend_existing': True}  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
        id = Column(Integer, primary_key=True, autoincrement=True)
        nazvanie = Column(Text)
        status = Column(Text)
        inn = Column(Text)
        # inn = Column(
        #     String(20), index=True
        # )  # –æ—Å—Ç–∞–≤–ª—è–µ–º String –¥–ª—è INN, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        vid_deyatelnosti = Column(Text)
        direktor = Column(Text)
        dop_info1 = Column(Text)
        dop_info2 = Column(Text)
        dop_info3 = Column(Text)
        dop_info4 = Column(Text)
        dop_info5 = Column(Text)
        poslednee_obnovlenie = Column(Text)
        forma = Column(Text)
        forma_sobstvennosti = Column(Text)
        kolichestvo_uchastnikov = Column(Text)
        registratsionnyi_nomer = Column(Text)
        okpo = Column(Text)
        adres = Column(Text)
        telefon = Column(Text)

    class OutputHtml(Base):
        __tablename__ = "output_html"
        __table_args__ = {'extend_existing': True}  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
        id = Column(Integer, primary_key=True, autoincrement=True)
        bik = Column(Text)
        bank = Column(Text)
        data_registratsii = Column(Text)
        dolzhnost = Column(Text)
        inn = Column(Text)
        # inn = Column(String(20), index=True)  # –æ—Å—Ç–∞–≤–ª—è–µ–º String –¥–ª—è INN
        naimenovanie_organizatsii = Column(Text)
        naselennyi_punkt = Column(Text)
        organizatsionno_pravovaya_forma = Column(Text)
        official_info = Column(Text)
        rschet = Column(Text)
        rabochii_telefon = Column(Text)
        rol = Column(Text)
        status = Column(Text)
        fio_polzovatelya = Column(Text)
        factual_address = Column(Text)
        elektronnaia_pochta = Column(Text)

    class Consolidated(Base):
        __tablename__ = "consolidated"
        __table_args__ = {'extend_existing': True}  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
        id = Column(Integer, primary_key=True, autoincrement=True)
        inn = Column(Text)  # –æ—Å—Ç–∞–≤–ª—è–µ–º String –¥–ª—è INN
        # inn = Column(String(20), unique=True)  # –æ—Å—Ç–∞–≤–ª—è–µ–º String –¥–ª—è INN

        # –ü–æ–ª—è –∏–∑ osoo_kg
        osoo_nazvanie = Column(Text)
        osoo_status = Column(Text)
        osoo_vid_deyatelnosti = Column(Text)
        osoo_direktor = Column(Text)
        dop_info1 = Column(Text)
        dop_info2 = Column(Text)
        dop_info3 = Column(Text)
        dop_info4 = Column(Text)
        dop_info5 = Column(Text)
        poslednee_obnovlenie = Column(Text)
        forma = Column(Text)
        forma_sobstvennosti = Column(Text)
        kolichestvo_uchastnikov = Column(Text)
        osoo_registratsionnyi_nomer = Column(Text)
        okpo = Column(Text)
        osoo_adres = Column(Text)
        osoo_telefon = Column(Text)

        # –ü–æ–ª—è –∏–∑ Loading Kyrgyzstan
        loading_naimenovanie = Column(Text)
        dr_nazva = Column(Text)
        naimenovanie_polnoe = Column(Text)
        loading_rukovodstvo = Column(Text)
        loading_rukovodstvo_dolzhnost = Column(Text)
        loading_elektronnyi_adres = Column(Text)
        loading_sait = Column(Text)
        loading_data_registratsii = Column(Text)
        data_pervonachalnoi_registratsii = Column(Text)
        sovladeltcy = Column(Text)
        kod_statistiki = Column(Text)
        region_registratsii = Column(Text)
        vid_deyatelnosti_otrasl = Column(Text)
        loading_org_pravovaya_forma = Column(Text)
        srednespisochnaia_chislennost_rabotnikov = Column(Text)

        # –ü–æ–ª—è –∏–∑ output_html
        bik = Column(Text)
        bank = Column(Text)
        html_data_registratsii = Column(Text)
        html_dolzhnost = Column(Text)
        naimenovanie_organizatsii = Column(Text)
        naselennyi_punkt = Column(Text)
        html_org_pravovaya_forma = Column(Text)
        official_info = Column(Text)
        rschet = Column(Text)
        rabochii_telefon = Column(Text)
        rol = Column(Text)
        html_status = Column(Text)
        fio_polzovatelya = Column(Text)
        factual_address = Column(Text)
        elektronnaia_pochta = Column(Text)

    return LoadingKyrgyzstan, OsooKg, OutputHtml, Consolidated


models = define_models(Base)
LoadingKyrgyzstan, OsooKg, OutputHtml, Consolidated = models


def create_tables_if_not_exist(engine, Base):
    """Create tables if they don't exist"""
    inspector = inspect(engine)
    existing_tables = inspector.get_table_names()

    if not all(
        table in existing_tables
        for table in ["loading_kyrgyzstan", "osoo_kg", "output_html", "consolidated"]
    ):
        Base.metadata.create_all(engine)
        print("Tables created successfully.")
    else:
        print("All tables already exist.")


def create_session(engine):
    """Create and return a new session"""
    Session = sessionmaker(bind=engine)
    return Session()


def normalize_value(value):
    if value is None or value == "":
        return None
    return "{:.2f}".format(float(value.replace(" ", "")))


def import_loading_kyrgyzstan_data(session, LoadingKyrgyzstan, csv_path):
    """Import data into LoadingKyrgyzstan table"""
    loading_df = pd.read_csv(csv_path, sep=";", dtype={"INN": str}, low_memory=False)
    # –ó–∞–º–µ–Ω—è–µ–º nan –Ω–∞ None
    loading_df = loading_df.replace({pd.NA: None, pd.NaT: None})
    loading_df = loading_df.where(pd.notna(loading_df), None)

    loading_records = []

    for _, row in loading_df.iterrows():
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        record_data = {
            "naimenovanie": row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"),
            "dr_nazva": row.get("–î–† +–ù–∞–∑–≤–∞"),
            "naimenovanie_polnoe": row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ"),
            "adres": row.get("–ê–¥—Ä–µ—Å"),
            "rukovodstvo": row.get("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"),
            "rukovodstvo_dolzhnost": row.get("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ - –¥–æ–ª–∂–Ω–æ—Å—Ç—å"),
            "telefon": row.get("–¢–µ–ª–µ—Ñ–æ–Ω"),
            "elektronnyi_adres": row.get("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"),
            "sait": row.get("–°–∞–π—Ç –≤ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç"),
            "data_registratsii": row.get("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
            "data_pervonachalnoi_registratsii": row.get("–î–∞—Ç–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
            "sovladeltcy": row.get("–°–æ–≤–ª–∞–¥–µ–ª—å—Ü—ã"),
            "inn": row.get("INN"),
            "registratsionnyi_nomer": row.get("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"),
            "kod_statistiki": row.get("–ö–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
            "region_registratsii": row.get("–†–µ–≥–∏–æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
            "vid_deyatelnosti_otrasl": row.get("–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏/–æ—Ç—Ä–∞—Å–ª—å"),
            "organizatsionno_pravovaya_forma": row.get("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞"),
            "srednespisochnaia_chislennost_rabotnikov": row.get(
                "–°—Ä–µ–¥–Ω–µ—Å–ø–∏—Å–æ—á–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"
            ),
        }

        # –ó–∞–º–µ–Ω—è–µ–º nan –Ω–∞ None
        record_data = {k: None if pd.isna(v) else v for k, v in record_data.items()}

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        record = LoadingKyrgyzstan(**record_data)
        loading_records.append(record)

    session.bulk_save_objects(loading_records)
    session.commit()
    print("LoadingKyrgyzstan data imported successfully")


def import_osoo_kg_data(session, OsooKg, csv_path):
    """Import data into OsooKg table"""
    osoo_df = pd.read_csv(csv_path, sep=";", dtype={"INN": str}, low_memory=False)

    # –ó–∞–º–µ–Ω—è–µ–º nan –Ω–∞ None
    osoo_df = osoo_df.replace({pd.NA: None, pd.NaT: None})
    osoo_df = osoo_df.where(pd.notna(osoo_df), None)

    osoo_records = []

    for _, row in osoo_df.iterrows():
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        record_data = {
            "nazvanie": row.get("–ù–∞–∑–≤–∞–Ω–∏–µ"),
            "status": row.get("–°—Ç–∞—Ç—É—Å"),
            "inn": row.get("INN"),
            "vid_deyatelnosti": row.get("–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
            "direktor": row.get("–î–∏—Ä–µ–∫—Ç–æ—Ä"),
            "dop_info1": row.get("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 1"),
            "dop_info2": row.get("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 2"),
            "dop_info3": row.get("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 3"),
            "dop_info4": row.get("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 4"),
            "dop_info5": row.get("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 5"),
            "poslednee_obnovlenie": row.get("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"),
            "forma": row.get("–§–æ—Ä–º–∞"),
            "forma_sobstvennosti": row.get("–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"),
            "kolichestvo_uchastnikov": row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
            "registratsionnyi_nomer": row.get("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"),
            "okpo": row.get("–û–ö–ü–û"),
            "adres": row.get("–ê–¥—Ä–µ—Å"),
            "telefon": row.get("–¢–µ–ª–µ—Ñ–æ–Ω"),
        }

        # –ó–∞–º–µ–Ω—è–µ–º nan –Ω–∞ None
        record_data = {k: None if pd.isna(v) else v for k, v in record_data.items()}

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        record = OsooKg(**record_data)
        osoo_records.append(record)

    session.bulk_save_objects(osoo_records)
    session.commit()
    print("OsooKg data imported successfully")


def import_output_html_data(session, OutputHtml, csv_path):
    """Import data into OutputHtml table"""
    output_df = pd.read_csv(csv_path, sep=";", dtype={"INN": str}, low_memory=False)
    # –ó–∞–º–µ–Ω—è–µ–º nan –Ω–∞ None
    output_df = output_df.replace({pd.NA: None, pd.NaT: None})
    output_df = output_df.where(pd.notna(output_df), None)

    output_records = []

    for _, row in output_df.iterrows():
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        record_data = {
            "bik": row.get("–ë–ò–ö"),
            "bank": row.get("–ë–∞–Ω–∫"),
            "data_registratsii": row.get("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
            "dolzhnost": row.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å"),
            "inn": row.get("INN"),
            "naimenovanie_organizatsii": row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
            "naselennyi_punkt": row.get("–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç"),
            "organizatsionno_pravovaya_forma": row.get("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞"),
            "official_info": row.get(
                "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É —Ä–µ–∫–≤–∏–∑–∏—Ç—É"
            ),
            "rschet": row.get("–†/—Å—á–µ—Ç"),
            "rabochii_telefon": row.get("–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω"),
            "rol": row.get("–†–æ–ª—å"),
            "status": row.get("–°—Ç–∞—Ç—É—Å"),
            "fio_polzovatelya": row.get("–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            "factual_address": row.get("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å"),
            "elektronnaia_pochta": row.get("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"),
        }

        # –ó–∞–º–µ–Ω—è–µ–º nan –Ω–∞ None
        record_data = {k: None if pd.isna(v) else v for k, v in record_data.items()}

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        record = OutputHtml(**record_data)
        output_records.append(record)

    session.bulk_save_objects(output_records)
    session.commit()
    print("OutputHtml data imported successfully")


# def create_consolidated_data(
#     session, OsooKg, LoadingKyrgyzstan, OutputHtml, Consolidated
# ):
#     """Create consolidated data from all tables"""
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ INN –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
#     osoo_inns = set(row[0] for row in session.query(OsooKg.inn).all())
#     loading_inns = set(row[0] for row in session.query(LoadingKyrgyzstan.inn).all())
#     output_inns = set(row[0] for row in session.query(OutputHtml.inn).all())

#     # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ INN
#     all_inns = osoo_inns.union(loading_inns).union(output_inns)
#     print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö INN: {len(all_inns)}")
#     print(f"INN –≤ OsooKg: {len(osoo_inns)}")
#     print(f"INN –≤ LoadingKyrgyzstan: {len(loading_inns)}")
#     print(f"INN –≤ OutputHtml: {len(output_inns)}")

#     for inn_val in all_inns:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
#         consolidated = session.query(Consolidated).filter(Consolidated.inn == inn_val).first()

#         # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
#         if not consolidated:
#             consolidated = Consolidated(inn=inn_val)
#             session.add(consolidated)

#         # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OsooKg
#         osoo = session.query(OsooKg).filter(OsooKg.inn == inn_val).first()
#         if osoo:
#             if consolidated.osoo_nazvanie is None:
#                 consolidated.osoo_nazvanie = osoo.nazvanie
#             if consolidated.osoo_status is None:
#                 consolidated.osoo_status = osoo.status
#             if consolidated.osoo_vid_deyatelnosti is None:
#                 consolidated.osoo_vid_deyatelnosti = osoo.vid_deyatelnosti
#             if consolidated.osoo_direktor is None:
#                 consolidated.osoo_direktor = osoo.direktor
#             if consolidated.dop_info1 is None:
#                 consolidated.dop_info1 = osoo.dop_info1
#             if consolidated.dop_info2 is None:
#                 consolidated.dop_info2 = osoo.dop_info2
#             if consolidated.dop_info3 is None:
#                 consolidated.dop_info3 = osoo.dop_info3
#             if consolidated.dop_info4 is None:
#                 consolidated.dop_info4 = osoo.dop_info4
#             if consolidated.dop_info5 is None:
#                 consolidated.dop_info5 = osoo.dop_info5
#             if consolidated.poslednee_obnovlenie is None:
#                 consolidated.poslednee_obnovlenie = osoo.poslednee_obnovlenie
#             if consolidated.forma is None:
#                 consolidated.forma = osoo.forma
#             if consolidated.forma_sobstvennosti is None:
#                 consolidated.forma_sobstvennosti = osoo.forma_sobstvennosti
#             if consolidated.kolichestvo_uchastnikov is None:
#                 consolidated.kolichestvo_uchastnikov = osoo.kolichestvo_uchastnikov
#             if consolidated.osoo_registratsionnyi_nomer is None:
#                 consolidated.osoo_registratsionnyi_nomer = osoo.registratsionnyi_nomer
#             if consolidated.okpo is None:
#                 consolidated.okpo = osoo.okpo
#             if consolidated.osoo_adres is None:
#                 consolidated.osoo_adres = osoo.adres
#             if consolidated.osoo_telefon is None:
#                 consolidated.osoo_telefon = osoo.telefon

#         # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ LoadingKyrgyzstan
#         loading = session.query(LoadingKyrgyzstan).filter(LoadingKyrgyzstan.inn == inn_val).first()
#         if loading:
#             if consolidated.loading_naimenovanie is None:
#                 consolidated.loading_naimenovanie = loading.naimenovanie
#             if consolidated.dr_nazva is None:
#                 consolidated.dr_nazva = loading.dr_nazva
#             if consolidated.naimenovanie_polnoe is None:
#                 consolidated.naimenovanie_polnoe = loading.naimenovanie_polnoe
#             if consolidated.loading_rukovodstvo is None:
#                 consolidated.loading_rukovodstvo = loading.rukovodstvo
#             if consolidated.loading_rukovodstvo_dolzhnost is None:
#                 consolidated.loading_rukovodstvo_dolzhnost = loading.rukovodstvo_dolzhnost
#             if consolidated.loading_elektronnyi_adres is None:
#                 consolidated.loading_elektronnyi_adres = loading.elektronnyi_adres
#             if consolidated.loading_sait is None:
#                 consolidated.loading_sait = loading.sait
#             if consolidated.loading_data_registratsii is None:
#                 consolidated.loading_data_registratsii = loading.data_registratsii
#             if consolidated.data_pervonachalnoi_registratsii is None:
#                 consolidated.data_pervonachalnoi_registratsii = loading.data_pervonachalnoi_registratsii
#             if consolidated.sovladeltcy is None:
#                 consolidated.sovladeltcy = loading.sovladeltcy
#             if consolidated.kod_statistiki is None:
#                 consolidated.kod_statistiki = loading.kod_statistiki
#             if consolidated.region_registratsii is None:
#                 consolidated.region_registratsii = loading.region_registratsii
#             if consolidated.vid_deyatelnosti_otrasl is None:
#                 consolidated.vid_deyatelnosti_otrasl = loading.vid_deyatelnosti_otrasl
#             if consolidated.loading_org_pravovaya_forma is None:
#                 consolidated.loading_org_pravovaya_forma = loading.organizatsionno_pravovaya_forma
#             if consolidated.srednespisochnaia_chislennost_rabotnikov is None:
#                 consolidated.srednespisochnaia_chislennost_rabotnikov = loading.srednespisochnaia_chislennost_rabotnikov

#         # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OutputHtml
#         output = session.query(OutputHtml).filter(OutputHtml.inn == inn_val).first()
#         if output:
#             if consolidated.bik is None:
#                 consolidated.bik = output.bik
#             if consolidated.bank is None:
#                 consolidated.bank = output.bank
#             if consolidated.html_data_registratsii is None:
#                 consolidated.html_data_registratsii = output.data_registratsii
#             if consolidated.html_dolzhnost is None:
#                 consolidated.html_dolzhnost = output.dolzhnost
#             if consolidated.naimenovanie_organizatsii is None:
#                 consolidated.naimenovanie_organizatsii = output.naimenovanie_organizatsii
#             if consolidated.naselennyi_punkt is None:
#                 consolidated.naselennyi_punkt = output.naselennyi_punkt
#             if consolidated.html_org_pravovaya_forma is None:
#                 consolidated.html_org_pravovaya_forma = output.organizatsionno_pravovaya_forma
#             if consolidated.official_info is None:
#                 consolidated.official_info = output.official_info
#             if consolidated.rschet is None:
#                 consolidated.rschet = output.rschet
#             if consolidated.rabochii_telefon is None:
#                 consolidated.rabochii_telefon = output.rabochii_telefon
#             if consolidated.rol is None:
#                 consolidated.rol = output.rol
#             if consolidated.html_status is None:
#                 consolidated.html_status = output.status
#             if consolidated.fio_polzovatelya is None:
#                 consolidated.fio_polzovatelya = output.fio_polzovatelya
#             if consolidated.factual_address is None:
#                 consolidated.factual_address = output.factual_address
#             if consolidated.elektronnaia_pochta is None:
#                 consolidated.elektronnaia_pochta = output.elektronnaia_pochta

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
#         if len(all_inns) % 1000 == 0:
#             session.commit()
#             print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_inns)} –∑–∞–ø–∏—Å–µ–π")

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
#     session.commit()

#     # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
#     # merge_duplicate_inns(session, Consolidated)

#     print("–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")

# def create_consolidated_data(session, OsooKg, LoadingKyrgyzstan, OutputHtml, Consolidated):
#     osoo_inns = set(row[0] for row in session.query(OsooKg.inn).all())
#     loading_inns = set(row[0] for row in session.query(LoadingKyrgyzstan.inn).all())
#     output_inns = set(row[0] for row in session.query(OutputHtml.inn).all())
    
#     all_inns = osoo_inns.union(loading_inns).union(output_inns)
#     batch_size = 1000
#     counter = 0
    
#     for inn_val in all_inns:
#         counter += 1
#         consolidated = session.query(Consolidated).filter(Consolidated.inn == inn_val).first()
        
#         if not consolidated:
#             consolidated = Consolidated(inn=inn_val)
#             session.add(consolidated)
            
#         if osoo := session.query(OsooKg).filter(OsooKg.inn == inn_val).first():
#             for field in OsooKg.__table__.columns:
#                 if field.name != 'id' and field.name != 'inn':
#                     setattr(consolidated, f'osoo_{field.name}', getattr(osoo, field.name))
                    
#         if loading := session.query(LoadingKyrgyzstan).filter(LoadingKyrgyzstan.inn == inn_val).first():
#             for field in LoadingKyrgyzstan.__table__.columns:
#                 if field.name != 'id' and field.name != 'inn':
#                     setattr(consolidated, f'loading_{field.name}', getattr(loading, field.name))
                    
#         if output := session.query(OutputHtml).filter(OutputHtml.inn == inn_val).first():
#             for field in OutputHtml.__table__.columns:
#                 if field.name != 'id' and field.name != 'inn':
#                     setattr(consolidated, f'html_{field.name}', getattr(output, field.name))

#         if counter % batch_size == 0:
#             session.commit()
#             print(f"Processed {counter} records")
            
#     session.commit()
def create_consolidated_data(session, OsooKg, LoadingKyrgyzstan, OutputHtml, Consolidated):
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ INN –∏–∑ consolidated
    existing_inns = set(row[0] for row in session.query(Consolidated.inn).all())
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ INN –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    osoo_inns = set(row[0] for row in session.query(OsooKg.inn).all()) - existing_inns
    loading_inns = set(row[0] for row in session.query(LoadingKyrgyzstan.inn).all()) - existing_inns 
    output_inns = set(row[0] for row in session.query(OutputHtml.inn).all()) - existing_inns

    all_inns = osoo_inns.union(loading_inns).union(output_inns)
    batch_size = 1000
    counter = 0
    
    for inn_val in all_inns:
        counter += 1
        consolidated = Consolidated(inn=inn_val)
        session.add(consolidated)
            
        if osoo := session.query(OsooKg).filter(OsooKg.inn == inn_val).first():
            for field in OsooKg.__table__.columns:
                if field.name != 'id' and field.name != 'inn':
                    setattr(consolidated, f'osoo_{field.name}', getattr(osoo, field.name))
                    
        if loading := session.query(LoadingKyrgyzstan).filter(LoadingKyrgyzstan.inn == inn_val).first():
            for field in LoadingKyrgyzstan.__table__.columns:
                if field.name != 'id' and field.name != 'inn':
                    setattr(consolidated, f'loading_{field.name}', getattr(loading, field.name))
                    
        if output := session.query(OutputHtml).filter(OutputHtml.inn == inn_val).first():
            for field in OutputHtml.__table__.columns:
                if field.name != 'id' and field.name != 'inn':
                    setattr(consolidated, f'html_{field.name}', getattr(output, field.name))

        if counter % batch_size == 0:
            session.commit()
            print(f"Processed {counter} records")
            
    session.commit()

# def merge_duplicate_inns(session, Consolidated):
#     """
#     –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ INN –≤ —Ç–∞–±–ª–∏—Ü–µ Consolidated
#     """
#     print("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è INN...")

#     # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ INN, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞
#     duplicate_inns = (
#         session.query(Consolidated.inn)
#         .group_by(Consolidated.inn)
#         .having(func.count(Consolidated.inn) > 1)
#         .all()
#     )

#     print(f"–ù–∞–π–¥–µ–Ω–æ {len(duplicate_inns)} INN —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –∑–∞–ø–∏—Å—è–º–∏")

#     for (inn,) in duplicate_inns:
#         # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ INN
#         records = session.query(Consolidated).filter(Consolidated.inn == inn).all()
#         if len(records) <= 1:
#             continue

#         # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
#         base_record = records[0]

#         # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
#         for record in records[1:]:
#             # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞—Ç—Ä–∏–±—É—Ç–∞–º –∑–∞–ø–∏—Å–∏
#             for attr in dir(record):
#                 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã
#                 if attr.startswith("_") or callable(getattr(record, attr)):
#                     continue

#                 # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞
#                 value = getattr(record, attr)

#                 # –ï—Å–ª–∏ –≤ –±–∞–∑–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∞ –≤ —Ç–µ–∫—É—â–µ–π –µ—Å—Ç—å - –∫–æ–ø–∏—Ä—É–µ–º
#                 if value is not None and getattr(base_record, attr) is None:
#                     setattr(base_record, attr, value)

#             # –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
#             session.delete(record)

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
#         session.commit()

#     print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def clear_table(session, table_class):
    """–û—á–∏—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
    try:
        session.query(table_class).delete()
        session.commit()
        print(f"–¢–∞–±–ª–∏—Ü–∞ {table_class.__tablename__} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_class.__tablename__}: {str(e)}")
        session.rollback()


def drop_tables(engine):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    Base.metadata.drop_all(engine)
    print("–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

def export_consolidated_to_excel(session, Consolidated, output_file="consolidated_data.xlsx"):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Consolidated –∏ —Ç–∞–±–ª–∏—Ü—ã summary –≤ Excel.
    
    –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã summary –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é SQL-–∑–∞–ø—Ä–æ—Å–∞. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ò–ù–ù.
    
    Args:
        session: SQLAlchemy —Å–µ—Å—Å–∏—è.
        Consolidated: –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã Consolidated.
        output_file: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É Excel.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Consolidated —á–µ—Ä–µ–∑ ORM
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Consolidated...")
        records = session.query(Consolidated).all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Consolidated –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        consolidated_data = []
        for record in records:
            consolidated_data.append({
                "–ò–ù–ù": record.inn,
                # –î–∞–Ω–Ω—ã–µ –∏–∑ OsooKg
                "–ù–∞–∑–≤–∞–Ω–∏–µ (osoo)": record.osoo_nazvanie,
                "–°—Ç–∞—Ç—É—Å (osoo)": record.osoo_status,
                "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (osoo)": record.osoo_vid_deyatelnosti,
                "–î–∏—Ä–µ–∫—Ç–æ—Ä": record.osoo_direktor,
                "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 1": record.dop_info1,
                "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 2": record.dop_info2,
                "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 3": record.dop_info3,
                "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 4": record.dop_info4,
                "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 5": record.dop_info5,
                "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": record.poslednee_obnovlenie,
                "–§–æ—Ä–º–∞": record.forma,
                "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏": record.forma_sobstvennosti,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": record.kolichestvo_uchastnikov,
                "–†–µ–≥. –Ω–æ–º–µ—Ä (osoo)": record.osoo_registratsionnyi_nomer,
                "–û–ö–ü–û": record.okpo,
                "–ê–¥—Ä–µ—Å (osoo)": record.osoo_adres,
                "–¢–µ–ª–µ—Ñ–æ–Ω (osoo)": record.osoo_telefon,
                # –î–∞–Ω–Ω—ã–µ –∏–∑ Loading Kyrgyzstan
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (loading)": record.loading_naimenovanie,
                "–î–† +–ù–∞–∑–≤–∞": record.dr_nazva,
                "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": record.naimenovanie_polnoe,
                "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ": record.loading_rukovodstvo,
                "–î–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞": record.loading_rukovodstvo_dolzhnost,
                "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å": record.loading_elektronnyi_adres,
                "–°–∞–π—Ç": record.loading_sait,
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (loading)": record.loading_data_registratsii,
                "–î–∞—Ç–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": record.data_pervonachalnoi_registratsii,
                "–°–æ–≤–ª–∞–¥–µ–ª—å—Ü—ã": record.sovladeltcy,
                "–ö–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏": record.kod_statistiki,
                "–†–µ–≥–∏–æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": record.region_registratsii,
                "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏/–æ—Ç—Ä–∞—Å–ª—å": record.vid_deyatelnosti_otrasl,
                "–û—Ä–≥.-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞ (loading)": record.loading_org_pravovaya_forma,
                "–°—Ä–µ–¥–Ω–µ—Å–ø–∏—Å–æ—á–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": record.srednespisochnaia_chislennost_rabotnikov,
                # –î–∞–Ω–Ω—ã–µ –∏–∑ OutputHtml
                "–ë–ò–ö": record.bik,
                "–ë–∞–Ω–∫": record.bank,
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (html)": record.html_data_registratsii,
                "–î–æ–ª–∂–Ω–æ—Å—Ç—å": record.html_dolzhnost,
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": record.naimenovanie_organizatsii,
                "–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç": record.naselennyi_punkt,
                "–û—Ä–≥.-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞ (html)": record.html_org_pravovaya_forma,
                "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã": record.official_info,
                "–†/—Å—á–µ—Ç": record.rschet,
                "–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω": record.rabochii_telefon,
                "–†–æ–ª—å": record.rol,
                "–°—Ç–∞—Ç—É—Å (html)": record.html_status,
                "–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": record.fio_polzovatelya,
                "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å": record.factual_address,
                "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞": record.elektronnaia_pochta,
            })
        
        df_consolidated = pd.DataFrame(consolidated_data)
        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ù–ù: —É–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        df_consolidated["norm_inn"] = df_consolidated["–ò–ù–ù"].apply(lambda x: str(x).lstrip("0") if pd.notnull(x) else x)
        
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ summary...")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã summary
        query = text("SELECT inn, year_2021, year_2022, year_2023, year_2024 FROM summary")
        summary_data = session.execute(query).fetchall()
        df_summary = pd.DataFrame(summary_data, columns=["–ò–ù–ù", "2021", "2022", "2023", "2024"])
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ò–ù–ù –≤ summary
        df_summary["norm_inn"] = df_summary["–ò–ù–ù"].apply(lambda x: str(x).lstrip("0") if pd.notnull(x) else x)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º DataFrame –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ò–ù–ù
        df_final = pd.merge(df_consolidated, df_summary, on="norm_inn", how="left", suffixes=("", "_summary"))
        # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        df_final.drop("norm_inn", axis=1, inplace=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        with pd.ExcelWriter(output_file, engine="openpyxl") as writer:
            df_final.to_excel(writer, index=False, sheet_name="–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            worksheet = writer.sheets["–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for idx, col in enumerate(df_final.columns):
                max_length = max(df_final[col].astype(str).apply(len).max(), len(col))
                worksheet.column_dimensions[worksheet.cell(row=1, column=idx+1).column_letter].width = max_length + 2
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_file}, –∑–∞–ø–∏—Å–µ–π: {len(df_final)}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# def export_consolidated_to_excel(
#     session, Consolidated, output_file="consolidated_data.xlsx"
# ):
#     """
#     –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã consolidated –≤ Excel —Ñ–∞–π–ª.

#     Args:
#         session: SQLAlchemy —Å–µ—Å—Å–∏—è.
#         Consolidated: –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã Consolidated.
#         output_file: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É Excel.
#     """

#     try:
#         print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...")
#         records = session.query(Consolidated).all()

#         # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
#         data = []
#         for record in records:
#             data.append(
#                 {
#                     "–ò–ù–ù": record.inn,
#                     # –î–∞–Ω–Ω—ã–µ –∏–∑ OsooKg
#                     "–ù–∞–∑–≤–∞–Ω–∏–µ (osoo)": record.osoo_nazvanie,
#                     "–°—Ç–∞—Ç—É—Å (osoo)": record.osoo_status,
#                     "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (osoo)": record.osoo_vid_deyatelnosti,
#                     "–î–∏—Ä–µ–∫—Ç–æ—Ä": record.osoo_direktor,
#                     "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 1": record.dop_info1,
#                     "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 2": record.dop_info2,
#                     "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 3": record.dop_info3,
#                     "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 4": record.dop_info4,
#                     "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 5": record.dop_info5,
#                     "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": record.poslednee_obnovlenie,
#                     "–§–æ—Ä–º–∞": record.forma,
#                     "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏": record.forma_sobstvennosti,
#                     "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": record.kolichestvo_uchastnikov,
#                     "–†–µ–≥. –Ω–æ–º–µ—Ä (osoo)": record.osoo_registratsionnyi_nomer,
#                     "–û–ö–ü–û": record.okpo,
#                     "–ê–¥—Ä–µ—Å (osoo)": record.osoo_adres,
#                     "–¢–µ–ª–µ—Ñ–æ–Ω (osoo)": record.osoo_telefon,
#                     # –î–∞–Ω–Ω—ã–µ –∏–∑ Loading Kyrgyzstan
#                     "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (loading)": record.loading_naimenovanie,
#                     "–î–† +–ù–∞–∑–≤–∞": record.dr_nazva,
#                     "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": record.naimenovanie_polnoe,
#                     "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ": record.loading_rukovodstvo,
#                     "–î–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞": record.loading_rukovodstvo_dolzhnost,
#                     "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å": record.loading_elektronnyi_adres,
#                     "–°–∞–π—Ç": record.loading_sait,
#                     "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (loading)": record.loading_data_registratsii,
#                     "–î–∞—Ç–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": record.data_pervonachalnoi_registratsii,
#                     "–°–æ–≤–ª–∞–¥–µ–ª—å—Ü—ã": record.sovladeltcy,
#                     "–ö–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏": record.kod_statistiki,
#                     "–†–µ–≥–∏–æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": record.region_registratsii,
#                     "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏/–æ—Ç—Ä–∞—Å–ª—å": record.vid_deyatelnosti_otrasl,
#                     "–û—Ä–≥.-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞ (loading)": record.loading_org_pravovaya_forma,
#                     "–°—Ä–µ–¥–Ω–µ—Å–ø–∏—Å–æ—á–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å": record.srednespisochnaia_chislennost_rabotnikov,
#                     # –î–∞–Ω–Ω—ã–µ –∏–∑ OutputHtml
#                     "–ë–ò–ö": record.bik,
#                     "–ë–∞–Ω–∫": record.bank,
#                     "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (html)": record.html_data_registratsii,
#                     "–î–æ–ª–∂–Ω–æ—Å—Ç—å": record.html_dolzhnost,
#                     "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": record.naimenovanie_organizatsii,
#                     "–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç": record.naselennyi_punkt,
#                     "–û—Ä–≥.-–ø—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞ (html)": record.html_org_pravovaya_forma,
#                     "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã": record.official_info,
#                     "–†/—Å—á–µ—Ç": record.rschet,
#                     "–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω": record.rabochii_telefon,
#                     "–†–æ–ª—å": record.rol,
#                     "–°—Ç–∞—Ç—É—Å (html)": record.html_status,
#                     "–§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": record.fio_polzovatelya,
#                     "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å": record.factual_address,
#                     "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞": record.elektronnaia_pochta,
#                     # –î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º)
#                     # –ì–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:
#                     # "2021": getattr(record, "2021"),
#                     # "2022": getattr(record, "2022"),
#                     # "2023": getattr(record, "2023"),
#                     # "2024": getattr(record, "2024"),
#                 }
#             )

#         logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")
#         df = pd.DataFrame(data)

#         # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º DataFrame –≤ Excel
#         with pd.ExcelWriter(output_file, engine="openpyxl") as writer:
#             df.to_excel(writer, index=False)
#             worksheet = writer.sheets["Sheet1"]
#             # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
#             for idx, col in enumerate(df.columns):
#                 max_length = max(df[col].astype(str).apply(len).max(), len(col))
#                 worksheet.column_dimensions[
#                     worksheet.cell(row=1, column=idx + 1).column_letter
#                 ].width = (max_length + 2)

#         logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
#         logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")

#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def consolidate_data(session, models):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü OsooKg, LoadingKyrgyzstan –∏ OutputHtml.
    –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ INN —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å
    –≤ —Ç–∞–±–ª–∏—Ü–µ Consolidated. –í –∫–∞—á–µ—Å—Ç–≤–µ –±–∞–∑—ã –±–µ—Ä—ë–º –∑–∞–ø–∏—Å–∏ –∏–∑ OsooKg, –Ω–æ –µ—Å–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç INN, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ OsooKg, –æ–Ω–∏ —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è.
    """
    LoadingKyrgyzstan, OsooKg, OutputHtml, Consolidated = models

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: –∫–ª—é—á ‚Äì –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π INN, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    merged = {}

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É OsooKg (–±–∞–∑–æ–≤–∞—è)
    for rec in session.query(OsooKg).all():
        norm_inn = normalize_inn(rec.inn)
        if not norm_inn:
            continue
        merged.setdefault(norm_inn, {})["osoo"] = rec

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É LoadingKyrgyzstan
    for rec in session.query(LoadingKyrgyzstan).all():
        norm_inn = normalize_inn(rec.inn)
        if not norm_inn:
            continue
        merged.setdefault(norm_inn, {})["loading"] = rec

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É OutputHtml
    for rec in session.query(OutputHtml).all():
        norm_inn = normalize_inn(rec.inn)
        if not norm_inn:
            continue
        merged.setdefault(norm_inn, {})["output"] = rec

    consolidated_records = []
    for norm_inn, data in merged.items():
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ OsooKg, –µ—Å–ª–∏ –µ—Å—Ç—å
        osoo = data.get("osoo")
        loading = data.get("loading")
        output = data.get("output")

        cons = Consolidated(
            inn=norm_inn,
            # –ò–∑ OsooKg:
            osoo_nazvanie=osoo.nazvanie if osoo else None,
            osoo_status=osoo.status if osoo else None,
            osoo_vid_deyatelnosti=osoo.vid_deyatelnosti if osoo else None,
            osoo_direktor=osoo.direktor if osoo else None,
            dop_info1=osoo.dop_info1 if osoo else None,
            dop_info2=osoo.dop_info2 if osoo else None,
            dop_info3=osoo.dop_info3 if osoo else None,
            dop_info4=osoo.dop_info4 if osoo else None,
            dop_info5=osoo.dop_info5 if osoo else None,
            poslednee_obnovlenie=osoo.poslednee_obnovlenie if osoo else None,
            forma=osoo.forma if osoo else None,
            forma_sobstvennosti=osoo.forma_sobstvennosti if osoo else None,
            kolichestvo_uchastnikov=osoo.kolichestvo_uchastnikov if osoo else None,
            osoo_registratsionnyi_nomer=osoo.registratsionnyi_nomer if osoo else None,
            okpo=osoo.okpo if osoo else None,
            osoo_adres=osoo.adres if osoo else None,
            osoo_telefon=osoo.telefon if osoo else None,
            # –ò–∑ LoadingKyrgyzstan:
            loading_naimenovanie=loading.naimenovanie if loading else None,
            dr_nazva=loading.dr_nazva if loading else None,
            naimenovanie_polnoe=loading.naimenovanie_polnoe if loading else None,
            loading_rukovodstvo=loading.rukovodstvo if loading else None,
            loading_rukovodstvo_dolzhnost=(
                loading.rukovodstvo_dolzhnost if loading else None
            ),
            loading_elektronnyi_adres=loading.elektronnyi_adres if loading else None,
            loading_sait=loading.sait if loading else None,
            loading_data_registratsii=loading.data_registratsii if loading else None,
            data_pervonachalnoi_registratsii=(
                loading.data_pervonachalnoi_registratsii if loading else None
            ),
            sovladeltcy=loading.sovladeltcy if loading else None,
            kod_statistiki=loading.kod_statistiki if loading else None,
            region_registratsii=loading.region_registratsii if loading else None,
            vid_deyatelnosti_otrasl=(
                loading.vid_deyatelnosti_otrasl if loading else None
            ),
            loading_org_pravovaya_forma=(
                loading.organizatsionno_pravovaya_forma if loading else None
            ),
            srednespisochnaia_chislennost_rabotnikov=(
                loading.srednespisochnaia_chislennost_rabotnikov if loading else None
            ),
            # –ò–∑ OutputHtml:
            bik=output.bik if output else None,
            bank=output.bank if output else None,
            html_data_registratsii=output.data_registratsii if output else None,
            html_dolzhnost=output.dolzhnost if output else None,
            naimenovanie_organizatsii=(
                output.naimenovanie_organizatsii if output else None
            ),
            naselennyi_punkt=output.naselennyi_punkt if output else None,
            html_org_pravovaya_forma=(
                output.organizatsionno_pravovaya_forma if output else None
            ),
            official_info=output.official_info if output else None,
            rschet=output.rschet if output else None,
            rabochii_telefon=output.rabochii_telefon if output else None,
            rol=output.rol if output else None,
            html_status=output.status if output else None,
            fio_polzovatelya=output.fio_polzovatelya if output else None,
            factual_address=output.factual_address if output else None,
            elektronnaia_pochta=output.elektronnaia_pochta if output else None,
        )
        consolidated_records.append(cons)

    session.bulk_save_objects(consolidated_records)
    session.commit()
    print("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å", len(consolidated_records), "–∑–∞–ø–∏—Å—è–º–∏.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ INN (—É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏)
def normalize_inn(inn):
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ INN –∫ —Å—Ç—Ä–æ–∫–µ –∏ —É–±–∏—Ä–∞–µ—Ç –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏.
    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    if inn is None:
        return None
    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ.
    if not isinstance(inn, str):
        inn = str(inn)
    norm = inn.lstrip("0")
    return norm if norm else "0"


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        engine = create_db_connection()
        session = create_session(engine)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑
        # create_summary_table(engine)
        # import_summary_data(session, csv_path="filtered_data.csv")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü

        # # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        # drop_tables(engine)

        # # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
        # Base.metadata.create_all(engine)
        # print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        # add_summary_columns(engine)

        # # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # should_clear = input("–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º? (–¥–∞/–Ω–µ—Ç): ").lower()
        # if should_clear == '–¥–∞':
        #     clear_table(session, LoadingKyrgyzstan)
        #     clear_table(session, OsooKg)
        #     clear_table(session, OutputHtml)
        #     clear_table(session, Consolidated)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        # print("\n–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        # import_loading_kyrgyzstan_data(session, LoadingKyrgyzstan, "Loading Kyrgyzstan.csv")
        # import_osoo_kg_data(session, OsooKg, "osoo_kg.csv")
        # import_output_html_data(session, OutputHtml, "output_html.csv")

        # # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # print("\n–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        # create_consolidated_data(session, OsooKg, LoadingKyrgyzstan, OutputHtml, Consolidated)

        # # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏
        # LoadingKyrgyzstan, OsooKg, OutputHtml, Consolidated = models
        export_consolidated_to_excel(session, Consolidated, "consolidated_data.xlsx")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    # finally:
    #     if 'session' in locals():
    #         session.close()


def create_summary_table(engine):
    with engine.connect() as conn:
        conn.execute(
            text(
                """
           CREATE TABLE IF NOT EXISTS summary (
               id INT AUTO_INCREMENT PRIMARY KEY,
               inn VARCHAR(20) UNIQUE,
               year_2021 DECIMAL(15,2),
               year_2022 DECIMAL(15,2), 
               year_2023 DECIMAL(15,2),
               year_2024 DECIMAL(15,2)
           )
       """
            )
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 4 —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É consolidated
def add_summary_columns(engine):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É consolidated 4 –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞: 2021, 2022, 2023, 2024.
    –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äì –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–º–æ–∂–Ω–æ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å).
    """
    with engine.connect() as conn:
        for col in ["2021", "2022", "2023", "2024"]:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º ALTER TABLE —Å –∏–º–µ–Ω–µ–º —Å—Ç–æ–ª–±—Ü–∞ –≤ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
                conn.execute(text(f"ALTER TABLE consolidated ADD COLUMN `{col}` TEXT"))
                logger.info(f"Column {col} added.")
            except Exception as e:
                # –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.error(
                    f"Column {col} may already exist or cannot be added. Error: {e}"
                )
def safe_float(value):
    """ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ float, —É–±–∏—Ä–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è—è –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏. """
    try:
        return float(str(value).replace(" ", "").replace(",", ".")) if pd.notna(value) else None
    except ValueError:
        return None  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å

# –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ summary-–¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∫–æ–º–º–∏—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞)
def import_summary_data(session, csv_path="result.csv", batch_size=1000):
    df = pd.read_csv(csv_path, sep=";", dtype={"INN": str})
    records = []

    for _, row in df.iterrows():
        record = {
            "inn": row["INN"].strip(),  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
            "y2021": safe_float(row["2021"]),
            "y2022": safe_float(row["2022"]),
            "y2023": safe_float(row["2023"]),
            "y2024": safe_float(row["2024"])
        }
        records.append(record)

        if len(records) >= batch_size:
            try:
                session.execute(
                    text("""
                        INSERT INTO summary (inn, year_2021, year_2022, year_2023, year_2024)
                        VALUES (:inn, :y2021, :y2022, :y2023, :y2024)
                        ON DUPLICATE KEY UPDATE 
                            year_2021 = VALUES(year_2021),
                            year_2022 = VALUES(year_2022),
                            year_2023 = VALUES(year_2023),
                            year_2024 = VALUES(year_2024)
                    """),
                    records
                )
                session.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
                session.rollback()
            finally:
                records = []

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
    if records:
        try:
            session.execute(
                text("""
                    INSERT INTO summary (inn, year_2021, year_2022, year_2023, year_2024)
                    VALUES (:inn, :y2021, :y2022, :y2023, :y2024)
                    ON DUPLICATE KEY UPDATE 
                        year_2021 = VALUES(year_2021),
                        year_2022 = VALUES(year_2022),
                        year_2023 = VALUES(year_2023),
                        year_2024 = VALUES(year_2024)
                """),
                records
            )
            session.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            session.rollback()


def backup_database(
    user="python_mysql",
    password="python_mysql",
    host="localhost",
    db="kg",
    backup_file="backup.sql",
):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ backup_file.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      user (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
      password (str): –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
      host (str): –•–æ—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç MySQL.
      db (str): –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–±–µ–∫–∞–ø–∏—Ç—å.
      backup_file (str): –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
      backup_database(backup_file="kg_backup.sql")
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É mysqldump.
    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º.
    cmd = ["mysqldump", f"-u{user}", f"-p{password}", f"-h{host}", db]

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        with open(backup_file, "w", encoding="utf-8") as f:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É mysqldump, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
            subprocess.run(cmd, stdout=f, stderr=subprocess.PIPE, check=True)
        print(f"Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {backup_file}")
    except subprocess.CalledProcessError as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:")
        print(e.stderr.decode("utf-8"))

def get_csv():

    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å `;`
    df = pd.read_csv("result.csv", sep=";", dtype=str)

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ 4 –≥–æ–¥–∞ (2021-2024) —Ä–∞–≤–Ω—ã "0.00"
    df = df[~((df["2021"] == "0.00") & (df["2022"] == "0.00") & (df["2023"] == "0.00") & (df["2024"] == "0.00"))]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ CSV
    df.to_csv("filtered_data.csv", sep=";", index=False)

    print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ filtered_data.csv")

if __name__ == "__main__":
    # backup_database()
    main()
    # get_csv()