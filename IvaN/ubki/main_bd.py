import pandas as pd
from sqlalchemy import create_engine, Column, Integer, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pathlib import Path
from loguru import logger
import sys


current_directory = Path.cwd()
configuration_directory = current_directory / "configuration"
log_directory = current_directory / "log"
log_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)

def create_db_connection(user="python_mysql", password="python_mysql", host="localhost", db="ubki"):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç engine.
    """
    engine = create_engine(f"mysql+pymysql://{user}:{password}@{host}/{db}", echo=True)
    return engine

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã UBKI
class UBKI(Base):
    __tablename__ = 'ubki'
    id = Column(Integer, primary_key=True, autoincrement=True)
    # –û–±—â–∏–µ –ø–æ–ª—è (–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±–æ–∏—Ö CSV)
    title = Column(Text)
    registration = Column(Text)
    data_registr = Column(Text)
    record_number = Column(Text)
    tax_debt_date = Column(Text)
    tax_debt_status = Column(Text)
    arrears_date = Column(Text)
    arrears_status = Column(Text)
    main_code = Column(Text)
    additional_codes = Column(Text)
    edrpo = Column(Text)
    address = Column(Text)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –≤ legal.csv)
    title_mini = Column(Text)
    registration_date = Column(Text)
    authorized_person = Column(Text)
    founder = Column(Text)
    statutory_fund = Column(Text)
    bankruptcy_info = Column(Text)
    year = Column(Text)
    assets = Column(Text)
    liabilities = Column(Text)
    employees = Column(Text)
    profit = Column(Text)
    income = Column(Text)
    inn = Column(Text)

# –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–º—ë–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ (–±–µ–∑ id)
UBKI_COLUMNS = {
    "title", "registration", "data_registr", "record_number", "tax_debt_date",
    "tax_debt_status", "arrears_date", "arrears_status", "main_code", "additional_codes",
    "edrpo", "address", "title_mini", "registration_date", "authorized_person", "founder",
    "statutory_fund", "bankruptcy_info", "year", "assets", "liabilities", "employees",
    "profit", "income", "inn"
}

def load_csv_to_db(session, csv_path: Path, model, union_columns: set):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV-—Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—É, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –º–æ–¥–µ–ª—å—é model.
    –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ union_columns –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ None.
    """
    # –ß–∏—Ç–∞–µ–º CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ';', –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    df = pd.read_csv(csv_path, sep=';', dtype=str)
    # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ None –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î
    df = df.where(pd.notnull(df), None)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (–æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å ‚Äî –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)
    records = df.to_dict(orient='records')
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º None
    for record in records:
        for col in union_columns:
            if col not in record:
                record[col] = None

    # –ú–∞—Å—Å–∏–≤–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
    session.bulk_insert_mappings(model, records)
    session.commit()
# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ prozorro.csv
class Prozorro(Base):
    __tablename__ = 'prozorro'
    id = Column(Integer, primary_key=True, autoincrement=True)
    edrpo = Column(Text)
    quantity = Column(Text)
    sum = Column(Text)
    seller_tel = Column(Text)
    seller_email = Column(Text)
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Prozorro
PROZORRO_COLUMNS = {"edrpo", "quantity", "sum", "seller_tel", "seller_email"}
def export_to_excel(engine, output_file):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü 'ubki' –∏ 'prozorro' –≤ –æ–¥–∏–Ω Excel-—Ñ–∞–π–ª,
    –æ–±—ä–µ–¥–∏–Ω—è—è –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–æ–ª–±—Ü—É 'edrpo'.
    
    –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ubki, –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ prozorro —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ edrpo,
    –¥–∞–Ω–Ω—ã–µ –∏–∑ prozorro –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      engine: SQLAlchemy engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
      output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É Excel-—Ñ–∞–π–ª—É.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ubki
    df_ubki = pd.read_sql_table("ubki", con=engine)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prozorro
    df_prozorro = pd.read_sql_table("prozorro", con=engine)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º DataFrame –ø–æ —Å—Ç–æ–ª–±—Ü—É edrpo (left join: –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ df_ubki,
    # –∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ df_prozorro –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö edrpo)
    df_merged = pd.merge(df_ubki, df_prozorro, on="edrpo", how="left")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel-—Ñ–∞–π–ª
    df_merged.to_excel(output_file, index=False)
    print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")

def main():
    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
    engine = create_db_connection()
    Base.metadata.create_all(engine)
    
    Session = sessionmaker(bind=engine)
    session = Session()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ CSV-—Ñ–∞–π–ª–∞–º —Å –ø–æ–º–æ—â—å—é pathlib
    base_path = Path('.')  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    fop_csv = base_path / 'fop.csv'
    legal_csv = base_path / 'legal.csv'
    prozorro_csv = base_path / 'prozorro.csv'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–æ–∏—Ö CSV –≤ –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É UBKI
    load_csv_to_db(session, fop_csv, UBKI, UBKI_COLUMNS)
    load_csv_to_db(session, legal_csv, UBKI, UBKI_COLUMNS)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ prozorro.csv –≤ —Ç–∞–±–ª–∏—Ü—É Prozorro
    load_csv_to_db(session, prozorro_csv, Prozorro, PROZORRO_COLUMNS)
    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è Excel-—Ñ–∞–π–ª–∞
    output_file = Path("merged_data.xlsx")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_to_excel(engine, output_file)

if __name__ == '__main__':
    main()