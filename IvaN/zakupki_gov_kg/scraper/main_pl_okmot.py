import asyncio
import json
import math
from pathlib import Path

from config.logger import logger
from playwright.async_api import async_playwright

current_directory = Path.cwd()
temp_directory = current_directory / "temp"
html_directory = temp_directory / "html"
temp_directory.mkdir(parents=True, exist_ok=True)
html_directory.mkdir(parents=True, exist_ok=True)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏
def load_json():
    with open("okmot_companies.json", "r", encoding="utf-8") as file:
        data = json.load(file)
        contract_numbers = [item["–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"] for item in data]
        return contract_numbers


async def search_and_save_contract(page, contract_number):
    """
    –ò—â–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    """
    try:
        logger.info(f"üîç –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_number}")

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        input_selector = 'input[name="j_idt31"]'
        await page.wait_for_selector(input_selector, timeout=10000)

        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º registration_number
        await page.fill(input_selector, "")
        await page.fill(input_selector, contract_number)

        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏"
        search_button = 'input[id="j_idt44"]'
        await page.click(search_button)

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        await page.wait_for_selector("table.display-table.public-table", timeout=15000)
        await asyncio.sleep(1)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
        table_rows = await page.locator("#table_data tr").count()
        if table_rows == 0:
            logger.error(f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –ò–ù–ù –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        # –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º contract_number
        inn_cell = page.locator(
            f'#table_data tr td:first-child:has-text("{contract_number}")'
        )

        if await inn_cell.count() == 0:
            logger.error(f"‚ùå –°—Ç—Ä–æ–∫–∞ —Å –ò–ù–ù {contract_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ (–≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ)
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–æ–∫—É –∏ –∏—â–µ–º –≤ –Ω–µ–π —Å—Å—ã–ª–∫—É
        row_with_inn = inn_cell.locator("..").first  # —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π tr —ç–ª–µ–º–µ–Ω—Ç
        contract_link = row_with_inn.locator("td:nth-child(2) a")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Å—ã–ª–∫–∞
        if await contract_link.count() == 0:
            logger.error(
                f"‚ùå –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ"
            )
            return False

        # –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        await contract_link.click()

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        await page.wait_for_load_state("networkidle", timeout=30000)

        # –ü–æ–ª—É—á–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        html_content = await page.content()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        file_path = html_directory / f"{contract_number}.html"
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        logger.info(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract_number}: {e}")
        return False


# async def process_contract_list(url, contract_numbers):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
#     """
#     proxy = None
#     proxy_config = None

#     successful_contracts = []
#     failed_contracts = []

#     try:
#         async with async_playwright() as p:
#             browser = (
#                 await p.chromium.launch(proxy=proxy_config, headless=False)
#                 if proxy
#                 else await p.chromium.launch(headless=False)
#             )
#             context = await browser.new_context(accept_downloads=True)
#             page = await context.new_page()

#             # –û—Ç–∫–ª—é—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
#             await page.route(
#                 "**/*",
#                 lambda route: (
#                     route.abort()
#                     if route.request.resource_type in ["image", "media"]
#                     else route.continue_()
#                 ),
#             )

#             # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
#             await page.goto(url, timeout=60000, wait_until="networkidle")
#             # await asyncio.sleep(1)

#             # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
#             for i, contract_number in enumerate(contract_numbers, 1):
#                 file_path = html_directory / f"{contract_number}.html"
#                 if file_path.exists():
#                     logger.info(f"üìÅ –§–∞–π–ª {file_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
#                     successful_contracts.append(contract_number)
#                     continue

#                 # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
#                 if i > 1:
#                     await page.goto(url, timeout=60000, wait_until="networkidle")
#                     # await asyncio.sleep(1)

#                 # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
#                 success = await search_and_save_contract(page, contract_number)

#                 if success:
#                     successful_contracts.append(contract_number)
#                 else:
#                     failed_contracts.append(contract_number)


#             await browser.close()

#     except Exception as e:
#         logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

#     if successful_contracts:
#         logger.info(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:")


#     return successful_contracts, failed_contracts


# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# async def main():
#     """
#     –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
#     """
#     # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
#     url = "http://zakupki.gov.kg/popp/view/order/centralized_procurement.xhtml"

#     # –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
#     contract_numbers = load_json()

#     await process_contract_list(url, contract_numbers)

# # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
# if __name__ == "__main__":
#     asyncio.run(main())


def check_existing_files(contract_numbers):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
    """
    missing_contracts = []
    existing_contracts = []

    for contract_number in contract_numbers:
        file_path = html_directory / f"{contract_number}.html"
        if file_path.exists():
            existing_contracts.append(contract_number)
            logger.info(f"üìÅ –§–∞–π–ª {file_path}.html —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            missing_contracts.append(contract_number)

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(existing_contracts)}")
    logger.info(f"üîç –ù—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {len(missing_contracts)}")

    return missing_contracts, existing_contracts


def split_list_into_chunks(lst, num_chunks):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
    """
    if not lst:
        return []

    chunk_size = math.ceil(len(lst) / num_chunks)
    chunks = []

    for i in range(0, len(lst), chunk_size):
        chunk = lst[i : i + chunk_size]
        if chunk:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
            chunks.append(chunk)

    return chunks


async def process_contract_thread(thread_id, url, contract_numbers):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    logger.info(
        f"üöÄ –ü–æ—Ç–æ–∫ {thread_id}: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(contract_numbers)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
    )

    successful_contracts = []
    failed_contracts = []

    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=False)
            context = await browser.new_context(accept_downloads=True)
            page = await context.new_page()

            # –û—Ç–∫–ª—é—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            await page.route(
                "**/*",
                lambda route: (
                    route.abort()
                    if route.request.resource_type in ["image", "media"]
                    else route.continue_()
                ),
            )

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(url, timeout=60000, wait_until="networkidle")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ
            for i, contract_number in enumerate(contract_numbers, 1):
                logger.info(
                    f"üßµ –ü–æ—Ç–æ–∫ {thread_id}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(contract_numbers)} - {contract_number}"
                )

                # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if i > 1:
                    await page.goto(url, timeout=60000, wait_until="networkidle")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                success = await search_and_save_contract(page, contract_number)

                if success:
                    successful_contracts.append(contract_number)
                else:
                    failed_contracts.append(contract_number)

            await browser.close()

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {thread_id}: {e}")

    logger.info(
        f"‚úÖ –ü–æ—Ç–æ–∫ {thread_id} –∑–∞–≤–µ—Ä—à–µ–Ω: —É—Å–ø–µ—à–Ω–æ {len(successful_contracts)}, –æ—à–∏–±–æ–∫ {len(failed_contracts)}"
    )
    return successful_contracts, failed_contracts


async def process_contract_list_multithread(url, contract_numbers, num_threads=3):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    missing_contracts, existing_contracts = check_existing_files(contract_numbers)

    if not missing_contracts:
        logger.info("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç! –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return existing_contracts, []

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ –ø–æ—Ç–æ–∫–∏
    contract_chunks = split_list_into_chunks(missing_contracts, num_threads)
    actual_threads = len(contract_chunks)  # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤

    logger.info(f"üîÄ –†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {actual_threads} –ø–æ—Ç–æ–∫–æ–≤:")
    for i, chunk in enumerate(contract_chunks):
        logger.info(f"   –ü–æ—Ç–æ–∫ {i+1}: {len(chunk)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = []
    for thread_id, chunk in enumerate(contract_chunks, 1):
        task = asyncio.create_task(process_contract_thread(thread_id, url, chunk))
        tasks.append(task)

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    results = await asyncio.gather(*tasks, return_exceptions=True)

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_successful = list(existing_contracts)  # –ù–∞—á–∏–Ω–∞–µ–º —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    all_failed = []

    for i, result in enumerate(results):
        if isinstance(result, Exception):
            logger.error(f"‚ùå –ü–æ—Ç–æ–∫ {i+1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result}")
            continue

        successful, failed = result
        all_successful.extend(successful)
        all_failed.extend(failed)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info(f"\n{'='*60}")
    logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    logger.info(f"{'='*60}")
    logger.info(f"üìÅ –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {len(existing_contracts)}")
    logger.info(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_successful) - len(existing_contracts)}"
    )
    logger.info(f"‚ùå –û—à–∏–±–æ–∫: {len(all_failed)}")
    logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_successful)}/{len(contract_numbers)}")

    return all_successful, all_failed


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main(num_threads=5):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    """
    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    url = (
        "https://zakupki.okmot.kg/popp/view/services/registry/procurementEntities.xhtml"
    )

    # –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    contract_numbers = load_json()

    logger.info(f"üöÄ –ó–ê–ü–£–°–ö –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    logger.info(f"üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {num_threads}")
    logger.info(f"üìã –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(contract_numbers)}")

    await process_contract_list_multithread(url, contract_numbers, num_threads)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    NUM_THREADS = 3  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ

    asyncio.run(main(NUM_THREADS))
