import asyncio
import json
import os.path
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List

import aiosqlite
import gspread
import requests
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from loguru import logger
from oauth2client.service_account import ServiceAccountCredentials

SALESDRIVE_API = "dyzcupX2GKd8zUCrHPUlUIGbB2LuAQ-p_tREmYcCJ8juFvarMV8m40wgVzW4BununZtQq0XPzH5E3Wc6-pHQ6Ph05rgilWJvL0zW"
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "orders_database.db"

# –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É JSON —Ñ–∞–π–ª—É —Å –∫–ª—é—á–∞–º–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google
GOOGLE_CREDENTIALS_PATH = "credentials.json"
# ID Google —Ç–∞–±–ª–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –≤—ã–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
SPREADSHEET_ID = "1C_f68yiRyBuDD3ObaSxmDZSZWmsK28ln7MOP8TcUPVA"
# –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
SHEET_NAME = "Orders"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–∞–º –∏ —Ñ–∞–π–ª—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
current_directory = Path.cwd()
data_directory = current_directory / "data"
log_directory = current_directory / "log"
configuration_directory = current_directory / "configuration"
call_recording_directory = current_directory / "call_recording"
data_directory.mkdir(parents=True, exist_ok=True)
log_directory.mkdir(parents=True, exist_ok=True)

call_recording_directory.mkdir(parents=True, exist_ok=True)
temp_data_output_file = data_directory / "temp_data.json"
recordings_output_file = data_directory / "recording.json"
result_output_file = data_directory / "result.json"
invalid_json = data_directory / "invalid.json"
PROCESSED_FILES_CACHE = data_directory / "processed_files.json"
service_account_file = configuration_directory / "service_account.json"
log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)


def get_salesdrive_orders(date_from=None, date_to=None):
    try:
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        if not date_from or not date_to:
            date_to = datetime.now()
            date_from = date_to - timedelta(days=1)
            date_to = date_to.replace(hour=23, minute=59, second=59)
            date_from = date_from.replace(hour=0, minute=0, second=0)
        # date_from = datetime(2024, 7, 1, 0, 0, 0)  # 01.07.2024 00:00:00
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        date_from_str = date_from.strftime("%Y-%m-%d %H:%M:%S")
        date_to_str = date_to.strftime("%Y-%m-%d %H:%M:%S")

        url = "https://leia.salesdrive.me/api/order/list/"
        headers = {"Form-Api-Key": SALESDRIVE_API}
        # page = 14
        params = {
            "filter[orderTime][from]": date_from_str,
            "filter[orderTime][to]": date_to_str,
            "page": 1,
            "limit": 100,
        }

        #    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")

        response = requests.get(
            url,
            headers=headers,
            params=params,
            timeout=(10, 30),  # (connect timeout, read timeout)
        )

        #    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status_code}")

        if response.status_code == 200:
            data = response.json()

            write_recordings_to_json(recordings_output_file, data)
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(process_order(recordings_output_file))
            loop.close()
        else:
            raise Exception(
                f"API request failed with status code: {response.status_code}"
            )

    except requests.exceptions.Timeout:
        logger.error("Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def write_recordings_to_json(data_output_file, data):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª result.json
    with open(data_output_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


async def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –∏–∑ JSON"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY,
            formId INTEGER,
            version INTEGER,
            organizationId INTEGER,
            shipping_method INTEGER,
            payment_method INTEGER,
            shipping_address TEXT,
            comment TEXT,
            timeEntryOrder TEXT,
            holderTime TEXT,
            document_ord_check TEXT,
            discountAmount REAL,
            orderTime TEXT,
            updateAt TEXT,
            statusId INTEGER,
            paymentDate TEXT,
            rejectionReason TEXT,
            userId INTEGER,
            paymentAmount REAL,
            commissionAmount REAL,
            costPriceAmount REAL,
            shipping_costs REAL,
            expensesAmount REAL,
            profitAmount REAL,
            typeId INTEGER,
            payedAmount REAL,
            restPay REAL,
            call TEXT,
            sajt INTEGER,
            externalId TEXT,
            utmPage TEXT,
            utmMedium TEXT,
            campaignId INTEGER,
            utmSourceFull TEXT,
            utmSource TEXT,
            utmCampaign TEXT,
            utmContent TEXT,
            utmTerm TEXT,
            uploaded_to_sheets BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS delivery_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            senderId INTEGER,
            backDelivery INTEGER,
            cityName TEXT,
            provider TEXT,
            payForDelivery TEXT,
            type TEXT,
            trackingNumber TEXT,
            statusCode INTEGER,
            deliveryDateAndTime TEXT,
            idEntity INTEGER,
            branchNumber INTEGER,
            address TEXT,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS primary_contacts (
            id INTEGER PRIMARY KEY,
            order_id INTEGER,
            formId INTEGER,
            version INTEGER,
            active INTEGER,
            con_uGC TEXT,
            con_bloger TEXT,
            lName TEXT,
            fName TEXT,
            mName TEXT,
            telegram TEXT,
            instagramNick TEXT,
            counterpartyId INTEGER,
            comment TEXT,
            userId INTEGER,
            createTime TEXT,
            leadsCount INTEGER,
            leadsSalesCount INTEGER,
            leadsSalesAmount REAL,
            company TEXT,
            con_povnaOplata TEXT,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS contact_phones (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact_id INTEGER,
            phone TEXT,
            FOREIGN KEY (contact_id) REFERENCES primary_contacts (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è email –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS contact_emails (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact_id INTEGER,
            email TEXT,
            FOREIGN KEY (contact_id) REFERENCES primary_contacts (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ primary_contacts)
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY,
            order_id INTEGER,
            formId INTEGER,
            version INTEGER,
            active INTEGER,
            con_uGC TEXT,
            con_bloger TEXT,
            lName TEXT,
            fName TEXT,
            mName TEXT,
            telegram TEXT,
            instagramNick TEXT,
            counterpartyId INTEGER,
            comment TEXT,
            userId INTEGER,
            createTime TEXT,
            leadsCount INTEGER,
            leadsSalesCount INTEGER,
            leadsSalesAmount REAL,
            company TEXT,
            con_povnaOplata TEXT,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS other_contact_phones (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact_id INTEGER,
            phone TEXT,
            FOREIGN KEY (contact_id) REFERENCES contacts (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è email –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS other_contact_emails (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact_id INTEGER,
            email TEXT,
            FOREIGN KEY (contact_id) REFERENCES contacts (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            amount INTEGER,
            percentCommission REAL,
            preSale INTEGER,
            productId INTEGER,
            price REAL,
            stockId INTEGER,
            costPrice REAL,
            discount REAL,
            description TEXT,
            commission REAL,
            percentDiscount REAL,
            parameter TEXT,
            text TEXT,
            barcode TEXT,
            documentName TEXT,
            manufacturer TEXT,
            sku TEXT,
            uktzed TEXT,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è tipProdazu1 (–º–∞—Å—Å–∏–≤)
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS tip_prodazu (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            value INTEGER,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è dzereloKomentarVidKlienta (–º–∞—Å—Å–∏–≤)
        await db.execute(
            """
        CREATE TABLE IF NOT EXISTS dzerelo_komentar (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            value TEXT,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
        """
        )

        await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")


async def insert_order_data(order_data):
    """–í—Å—Ç–∞–≤–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    order_id = None
    try:
        order_id = order_data.get("id")
        if not order_id:
            logger.info("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞–∫–∞–∑–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return False

        async with aiosqlite.connect(DB_PATH) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID
            cursor = await db.execute("SELECT id FROM orders WHERE id = ?", (order_id,))
            existing_record = await cursor.fetchone()

            if existing_record:
                logger.warning(f"–ó–∞–∫–∞–∑ —Å ID {order_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            await db.execute(
                """
            INSERT INTO orders (
                id, formId, version, organizationId, shipping_method, payment_method,
                shipping_address, comment, timeEntryOrder, holderTime, document_ord_check,
                discountAmount, orderTime, updateAt, statusId, paymentDate, rejectionReason,
                userId, paymentAmount, commissionAmount, costPriceAmount, shipping_costs,
                expensesAmount, profitAmount, typeId, payedAmount, restPay, call, sajt,
                externalId, utmPage, utmMedium, campaignId, utmSourceFull, utmSource,
                utmCampaign, utmContent, utmTerm, uploaded_to_sheets
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, FALSE
            )
            """,
                (
                    order_data.get("id"),
                    order_data.get("formId"),
                    order_data.get("version"),
                    order_data.get("organizationId"),
                    order_data.get("shipping_method"),
                    order_data.get("payment_method"),
                    order_data.get("shipping_address"),
                    order_data.get("comment"),
                    order_data.get("timeEntryOrder"),
                    order_data.get("holderTime"),
                    order_data.get("document_ord_check"),
                    order_data.get("discountAmount"),
                    order_data.get("orderTime"),
                    order_data.get("updateAt"),
                    order_data.get("statusId"),
                    order_data.get("paymentDate"),
                    order_data.get("rejectionReason"),
                    order_data.get("userId"),
                    order_data.get("paymentAmount"),
                    order_data.get("commissionAmount"),
                    order_data.get("costPriceAmount"),
                    order_data.get("shipping_costs"),
                    order_data.get("expensesAmount"),
                    order_data.get("profitAmount"),
                    order_data.get("typeId"),
                    order_data.get("payedAmount"),
                    order_data.get("restPay"),
                    order_data.get("call"),
                    order_data.get("sajt"),
                    order_data.get("externalId"),
                    order_data.get("utmPage"),
                    order_data.get("utmMedium"),
                    order_data.get("campaignId"),
                    order_data.get("utmSourceFull"),
                    order_data.get("utmSource"),
                    order_data.get("utmCampaign"),
                    order_data.get("utmContent"),
                    order_data.get("utmTerm"),
                ),
            )

            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            ord_delivery_data = order_data.get("ord_delivery_data", [])
            if ord_delivery_data is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                for delivery in ord_delivery_data:
                    await db.execute(
                        """
                    INSERT INTO delivery_data (
                        order_id, senderId, backDelivery, cityName, provider, payForDelivery,
                        type, trackingNumber, statusCode, deliveryDateAndTime, idEntity,
                        branchNumber, address
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                        (
                            order_id,
                            delivery.get("senderId"),
                            delivery.get("backDelivery"),
                            delivery.get("cityName"),
                            delivery.get("provider"),
                            delivery.get("payForDelivery"),
                            delivery.get("type"),
                            delivery.get("trackingNumber"),
                            delivery.get("statusCode"),
                            delivery.get("deliveryDateAndTime"),
                            delivery.get("idEntity"),
                            delivery.get("branchNumber"),
                            delivery.get("address"),
                        ),
                    )

            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            primary_contact = order_data.get("primaryContact")
            if primary_contact:
                contact_id = primary_contact.get("id")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–∫–∏–º ID
                cursor = await db.execute(
                    "SELECT id FROM primary_contacts WHERE id = ?", (contact_id,)
                )
                existing_contact = await cursor.fetchone()

                if not existing_contact:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –µ—â–µ –Ω–µ—Ç
                    await db.execute(
                        """
                    INSERT INTO primary_contacts (
                        id, order_id, formId, version, active, con_uGC, con_bloger,
                        lName, fName, mName, telegram, instagramNick, counterpartyId,
                        comment, userId, createTime, leadsCount, leadsSalesCount,
                        leadsSalesAmount, company, con_povnaOplata
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                        (
                            contact_id,
                            order_id,
                            primary_contact.get("formId"),
                            primary_contact.get("version"),
                            primary_contact.get("active"),
                            primary_contact.get("con_uGC"),
                            primary_contact.get("con_bloger"),
                            primary_contact.get("lName"),
                            primary_contact.get("fName"),
                            primary_contact.get("mName"),
                            primary_contact.get("telegram"),
                            primary_contact.get("instagramNick"),
                            primary_contact.get("counterpartyId"),
                            primary_contact.get("comment"),
                            primary_contact.get("userId"),
                            primary_contact.get("createTime"),
                            primary_contact.get("leadsCount"),
                            primary_contact.get("leadsSalesCount"),
                            primary_contact.get("leadsSalesAmount"),
                            primary_contact.get("company"),
                            primary_contact.get("con_povnaOplata"),
                        ),
                    )
                else:
                    logger.info(
                        f"–ö–æ–Ω—Ç–∞–∫—Ç —Å ID {contact_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )

                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ email –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                phone_list = primary_contact.get("phone", [])
                if phone_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                    for phone in phone_list:
                        await db.execute(
                            "INSERT INTO contact_phones (contact_id, phone) VALUES (?, ?)",
                            (contact_id, phone),
                        )

                email_list = primary_contact.get("email", [])
                if email_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                    for email in email_list:
                        await db.execute(
                            "INSERT INTO contact_emails (contact_id, email) VALUES (?, ?)",
                            (contact_id, email),
                        )

            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            contacts_list = order_data.get("contacts", [])
            if contacts_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                for contact in contacts_list:
                    contact_id = contact.get("id")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–∫–∏–º ID
                    cursor = await db.execute(
                        "SELECT id FROM contacts WHERE id = ?", (contact_id,)
                    )
                    existing_contact = await cursor.fetchone()

                    if not existing_contact:
                        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –µ—â–µ –Ω–µ—Ç
                        await db.execute(
                            """
                        INSERT INTO contacts (
                            id, order_id, formId, version, active, con_uGC, con_bloger,
                            lName, fName, mName, telegram, instagramNick, counterpartyId,
                            comment, userId, createTime, leadsCount, leadsSalesCount,
                            leadsSalesAmount, company, con_povnaOplata
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """,
                            (
                                contact_id,
                                order_id,
                                contact.get("formId"),
                                contact.get("version"),
                                contact.get("active"),
                                contact.get("con_uGC"),
                                contact.get("con_bloger"),
                                contact.get("lName"),
                                contact.get("fName"),
                                contact.get("mName"),
                                contact.get("telegram"),
                                contact.get("instagramNick"),
                                contact.get("counterpartyId"),
                                contact.get("comment"),
                                contact.get("userId"),
                                contact.get("createTime"),
                                contact.get("leadsCount"),
                                contact.get("leadsSalesCount"),
                                contact.get("leadsSalesAmount"),
                                contact.get("company"),
                                contact.get("con_povnaOplata"),
                            ),
                        )
                    else:
                        logger.info(
                            f"–ö–æ–Ω—Ç–∞–∫—Ç —Å ID {contact_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ contacts"
                        )

                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ email –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    phone_list = contact.get("phone", [])
                    if phone_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                        for phone in phone_list:
                            await db.execute(
                                "INSERT INTO other_contact_phones (contact_id, phone) VALUES (?, ?)",
                                (contact_id, phone),
                            )

                    email_list = contact.get("email", [])
                    if email_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                        for email in email_list:
                            await db.execute(
                                "INSERT INTO other_contact_emails (contact_id, email) VALUES (?, ?)",
                                (contact_id, email),
                            )

            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            products_list = order_data.get("products", [])
            if products_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                for product in products_list:
                    await db.execute(
                        """
                    INSERT INTO products (
                        order_id, amount, percentCommission, preSale, productId, price, stockId,
                        costPrice, discount, description, commission, percentDiscount,
                        parameter, text, barcode, documentName, manufacturer, sku, uktzed
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                        (
                            order_id,
                            product.get("amount"),
                            product.get("percentCommission"),
                            product.get("preSale"),
                            product.get("productId"),
                            product.get("price"),
                            product.get("stockId"),
                            product.get("costPrice"),
                            product.get("discount"),
                            product.get("description"),
                            product.get("commission"),
                            product.get("percentDiscount"),
                            product.get("parameter"),
                            product.get("text"),
                            product.get("barcode"),
                            product.get("documentName"),
                            product.get("manufacturer"),
                            product.get("sku"),
                            product.get("uktzed"),
                        ),
                    )

            # –í—Å—Ç–∞–≤–ª—è–µ–º tipProdazu1
            tip_list = order_data.get("tipProdazu1", [])
            if tip_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                for tip in tip_list:
                    await db.execute(
                        "INSERT INTO tip_prodazu (order_id, value) VALUES (?, ?)",
                        (order_id, tip),
                    )

            # –í—Å—Ç–∞–≤–ª—è–µ–º dzereloKomentarVidKlienta
            dzerelo_list = order_data.get("dzereloKomentarVidKlienta", [])
            if dzerelo_list is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                for dzerelo in dzerelo_list:
                    await db.execute(
                        "INSERT INTO dzerelo_komentar (order_id, value) VALUES (?, ?)",
                        (order_id, dzerelo),
                    )

            await db.commit()
            logger.info(f"–ó–∞–∫–∞–∑ —Å ID {order_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}, –ó–∞–∫–∞–∑ {order_id}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            import traceback

            logger.debug(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ: {traceback.format_exc()}")
        except:
            pass
        return False


async def get_non_uploaded_orders() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets"""
    orders = []

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute(
            "SELECT id, order_data FROM orders WHERE uploaded_to_sheets = FALSE"
        )
        rows = await cursor.fetchall()

        for row in rows:
            order_data = json.loads(row["order_data"])
            orders.append({"id": row["id"], "data": order_data})

    return orders


async def mark_as_uploaded(order_id: int):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤ Google Sheets"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE orders SET uploaded_to_sheets = TRUE, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
            (order_id,),
        )
        await db.commit()
        logger.info(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π")


def upload_to_google_sheets(orders: List[Dict[str, Any]]):
    """–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
    if not orders:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets")
        return

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive",
        ]

        creds = ServiceAccountCredentials.from_json_keyfile_name(
            GOOGLE_CREDENTIALS_PATH, scope
        )
        client = gspread.authorize(creds)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        spreadsheet = client.open_by_id(SPREADSHEET_ID)
        worksheet = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç
        try:
            worksheet = spreadsheet.worksheet(SHEET_NAME)
        except gspread.exceptions.WorksheetNotFound:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            worksheet = spreadsheet.add_worksheet(title=SHEET_NAME, rows=1000, cols=20)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        headers = [
            "ID –ó–∞–∫–∞–∑–∞",
            "–°—Ç–∞—Ç—É—Å",
            "–î–∞—Ç–∞ –ó–∞–∫–∞–∑–∞",
            "–°—É–º–º–∞",
            "–°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã",
            "–ö–ª–∏–µ–Ω—Ç",
            "–¢–µ–ª–µ—Ñ–æ–Ω",
            "Email",
            "–ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏",
            "–¢–æ–≤–∞—Ä—ã",
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        existing_headers = worksheet.row_values(1)
        if not existing_headers:
            worksheet.append_row(headers)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        for order in orders:
            order_data = order["data"]

            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            primary_contact = order_data.get("primaryContact", {})
            name = f"{primary_contact.get('lName', '')} {primary_contact.get('fName', '')}".strip()
            phone = (
                primary_contact.get("phone", [""])[0]
                if primary_contact.get("phone")
                else ""
            )
            email = (
                primary_contact.get("email", [""])[0]
                if primary_contact.get("email")
                else ""
            )

            # –¢–æ–≤–∞—Ä—ã
            products = []
            for product in order_data.get("products", []):
                product_text = product.get("text", "")
                amount = product.get("amount", 0)
                price = product.get("price", 0)
                if product_text and amount > 0:
                    products.append(f"{product_text} (–∫–æ–ª-–≤–æ: {amount}, —Ü–µ–Ω–∞: {price})")

            products_text = "; ".join(products)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            row_data = [
                order_data.get("id", ""),  # ID –ó–∞–∫–∞–∑–∞
                order_data.get("statusId", ""),  # –°—Ç–∞—Ç—É—Å
                order_data.get("orderTime", ""),  # –î–∞—Ç–∞ –ó–∞–∫–∞–∑–∞
                order_data.get("paymentAmount", 0),  # –°—É–º–º–∞
                order_data.get("payment_method", ""),  # –°–ø–æ—Å–æ–± –û–ø–ª–∞—Ç—ã
                name,  # –ö–ª–∏–µ–Ω—Ç
                phone,  # –¢–µ–ª–µ—Ñ–æ–Ω
                email,  # Email
                order_data.get("shipping_address", ""),  # –ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏
                products_text,  # –¢–æ–≤–∞—Ä—ã
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
            worksheet.append_row(row_data)

            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π
            asyncio.create_task(mark_as_uploaded(order["id"]))

        logger.info(
            f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤ Google Sheets: {e}")


async def process_json_file(file_path: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º
            content = f.read().strip()
            if content.startswith("[") and content.endswith("]"):
                data = json.loads(content)
                for order in data:
                    await insert_order_data(order)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤
                data = json.loads(content)
                await insert_order_data(data)

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")


async def process_order(file_path: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read().strip()

            # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—è—Ç—ã—Ö –≤ –∫–æ–Ω—Ü–µ –æ–±—ä–µ–∫—Ç–æ–≤ JSON
            if content.endswith(","):
                content = content[:-1]

            # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –æ–±—ë—Ä–Ω—É—Ç–æ –≤ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç, –æ–±—Ä–∞–º–ª—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤
            if not (content.startswith("[") or content.startswith("{")):
                content = f"[{content}]"
            elif content.startswith("{") and content.endswith("}"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
                try:
                    data = json.loads(content)
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º "data", –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    if "data" in data and isinstance(data["data"], list):
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –≤ –º–∞—Å—Å–∏–≤–µ data
                        orders = data["data"]
                        logger.info(f"–ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ 'data' —Å {len(orders)} –∑–∞–∫–∞–∑–∞–º–∏")
                        for order in orders:
                            await insert_order_data(order)
                        return
                    else:
                        # –≠—Ç–æ –æ–¥–∏–Ω –∑–∞–∫–∞–∑
                        await insert_order_data(data)
                        return
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –µ—Å—Ç—å
                    pass

            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã—è–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
            try:
                data = json.loads(content)
                if isinstance(data, list):
                    # –≠—Ç–æ –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ {len(data)} –∑–∞–∫–∞–∑–æ–≤")
                    for order in data:
                        await insert_order_data(order)
                elif isinstance(data, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –º–∞—Å—Å–∏–≤–æ–º –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–≤–æ–π—Å—Ç–≤–µ "data"
                    if "data" in data and isinstance(data["data"], list):
                        orders = data["data"]
                        logger.info(f"–ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ 'data' —Å {len(orders)} –∑–∞–∫–∞–∑–∞–º–∏")
                        for order in orders:
                            await insert_order_data(order)
                    else:
                        # –≠—Ç–æ –æ–¥–∏–Ω –∑–∞–∫–∞–∑
                        logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑")
                        await insert_order_data(data)
                else:
                    logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ: {file_path}")
            except json.JSONDecodeError as e:
                # –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ JSON, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
                # (–Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç, –Ω–æ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö)
                lines = content.strip().split("\n")
                valid_jsons = []

                for line in lines:
                    line = line.strip()
                    if not line:
                        continue

                    # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if line.endswith(","):
                        line = line[:-1]

                    try:
                        json_obj = json.loads(line)
                        valid_jsons.append(json_obj)
                    except json.JSONDecodeError:
                        logger.error(
                            f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º JSON: {line[:50]}..."
                        )

                if valid_jsons:
                    logger.info(
                        f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(valid_jsons)} –æ–±—ä–µ–∫—Ç–æ–≤ JSON –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫"
                    )
                    for order in valid_jsons:
                        await insert_order_data(order)
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ: {file_path}"
                    )
                    logger.error(f"–û—à–∏–±–∫–∞ JSON: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")


async def get_all_order_data():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
        query = """
        SELECT o.* FROM orders o WHERE o.uploaded_to_sheets = FALSE
        """

        cursor = await db.execute(query)
        orders = await cursor.fetchall()

        if not orders:
            logger.error("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")
            return []

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        result = []

        for order in orders:
            order_dict = dict(order)
            order_id = order_dict["id"]

            # 1. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            delivery_query = "SELECT * FROM delivery_data WHERE order_id = ?"
            cursor = await db.execute(delivery_query, (order_id,))
            deliveries = await cursor.fetchall()

            if deliveries:
                delivery = dict(deliveries[0])
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω –ø–æ–ª–µ–π
                for key, value in delivery.items():
                    if key != "order_id" and key != "id":  # –ò—Å–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
                        order_dict[f"delivery_{key}"] = value

            # 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–∏—á–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ
            contact_query = "SELECT * FROM primary_contacts WHERE order_id = ?"
            cursor = await db.execute(contact_query, (order_id,))
            contacts = await cursor.fetchall()

            if contacts:
                contact = dict(contacts[0])
                contact_id = contact.get("id")

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                for key, value in contact.items():
                    if key != "order_id" and key != "id":
                        order_dict[f"contact_{key}"] = value

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞
                phones_query = "SELECT phone FROM contact_phones WHERE contact_id = ?"
                cursor = await db.execute(phones_query, (contact_id,))
                phones = await cursor.fetchall()

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                phone_list = [row[0] for row in phones]
                order_dict["contact_phones"] = (
                    "; ".join(phone_list) if phone_list else ""
                )

                # –î–æ–±–∞–≤–ª—è–µ–º email –∫–æ–Ω—Ç–∞–∫—Ç–∞
                emails_query = "SELECT email FROM contact_emails WHERE contact_id = ?"
                cursor = await db.execute(emails_query, (contact_id,))
                emails = await cursor.fetchall()

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º email –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                email_list = [row[0] for row in emails]
                order_dict["contact_emails"] = (
                    "; ".join(email_list) if email_list else ""
                )

            # 3. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö (–≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            other_contacts_query = "SELECT * FROM contacts WHERE order_id = ?"
            cursor = await db.execute(other_contacts_query, (order_id,))
            other_contacts = await cursor.fetchall()

            if other_contacts:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                contacts_info = []
                for i, other_contact in enumerate(other_contacts, 1):
                    oc_dict = dict(other_contact)
                    oc_id = oc_dict.get("id")

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    oc_phones_query = (
                        "SELECT phone FROM other_contact_phones WHERE contact_id = ?"
                    )
                    cursor = await db.execute(oc_phones_query, (oc_id,))
                    oc_phones = await cursor.fetchall()
                    oc_phone_list = [row[0] for row in oc_phones]

                    # –ü–æ–ª—É—á–∞–µ–º emails –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    oc_emails_query = (
                        "SELECT email FROM other_contact_emails WHERE contact_id = ?"
                    )
                    cursor = await db.execute(oc_emails_query, (oc_id,))
                    oc_emails = await cursor.fetchall()
                    oc_email_list = [row[0] for row in oc_emails]

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
                    contact_str = f"{oc_dict.get('lName')} {oc_dict.get('fName')}"
                    if oc_phone_list:
                        contact_str += f", —Ç–µ–ª: {'; '.join(oc_phone_list)}"
                    if oc_email_list:
                        contact_str += f", email: {'; '.join(oc_email_list)}"

                    contacts_info.append(contact_str)

                order_dict["other_contacts"] = " | ".join(contacts_info)

            # 4. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            products_query = "SELECT * FROM products WHERE order_id = ?"
            cursor = await db.execute(products_query, (order_id,))
            products = await cursor.fetchall()

            if products:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                products_info = []
                for product in products:
                    p_dict = dict(product)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                    product_str = f"{p_dict.get('text')} (–∫–æ–ª-–≤–æ: {p_dict.get('amount')}, —Ü–µ–Ω–∞: {p_dict.get('price')})"
                    products_info.append(product_str)

                order_dict["products_info"] = " | ".join(products_info)

            # 5. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö –ø—Ä–æ–¥–∞–∂
            tip_query = "SELECT value FROM tip_prodazu WHERE order_id = ?"
            cursor = await db.execute(tip_query, (order_id,))
            tips = await cursor.fetchall()

            if tips:
                tip_list = [str(row[0]) for row in tips]
                order_dict["tip_prodazu_values"] = "; ".join(tip_list)

            # 6. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            dzerelo_query = "SELECT value FROM dzerelo_komentar WHERE order_id = ?"
            cursor = await db.execute(dzerelo_query, (order_id,))
            dzerelo = await cursor.fetchall()

            if dzerelo:
                dzerelo_list = [row[0] for row in dzerelo]
                order_dict["client_comments"] = "; ".join(dzerelo_list)

            result.append(order_dict)

        return result


async def mark_orders_as_uploaded(order_ids):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–∞–∫ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ Google Sheets"""
    if not order_ids:
        return

    placeholders = ",".join(["?"] * len(order_ids))
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            f"UPDATE orders SET uploaded_to_sheets = TRUE, updated_at = CURRENT_TIMESTAMP WHERE id IN ({placeholders})",
            order_ids,
        )
        await db.commit()
        logger.info(
            f"–ó–∞–∫–∞–∑—ã —Å ID {', '.join(map(str, order_ids))} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ"
        )


def connect_to_google_sheets():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API"""
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive",
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if not os.path.exists(GOOGLE_CREDENTIALS_PATH):
            logger.error(
                f"–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google –Ω–µ –Ω–∞–π–¥–µ–Ω: {GOOGLE_CREDENTIALS_PATH}"
            )
            return None

        creds = ServiceAccountCredentials.from_json_keyfile_name(
            GOOGLE_CREDENTIALS_PATH, scope
        )
        client = gspread.authorize(creds)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ ID
        spreadsheet = client.open_by_key(
            SPREADSHEET_ID
        )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º open_by_key –≤–º–µ—Å—Ç–æ open_by_id
        return spreadsheet

    except FileNotFoundError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    except gspread.exceptions.GSpreadException as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Sheets API: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        return None


def prepare_sheet(spreadsheet, sheet_name, headers):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–∏—Å—Ç–∞: —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç
    try:
        worksheet = spreadsheet.worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        worksheet = spreadsheet.add_worksheet(
            title=sheet_name, rows=1000, cols=len(headers)
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    try:
        existing_headers = worksheet.row_values(1)
        if not existing_headers:
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            worksheet.append_row(headers)
        elif len(existing_headers) < len(headers):
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é
            for col, header in enumerate(headers, start=1):
                worksheet.update_cell(1, col, header)
        elif existing_headers != headers:
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            for col, (old, new) in enumerate(zip(existing_headers, headers), start=1):
                if old != new:
                    worksheet.update_cell(1, col, new)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet.append_row(headers)

    return worksheet


def get_next_empty_row(worksheet):
    """–ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
    col_values = worksheet.col_values(1)

    # –î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π + 1 (—É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
    # –ï—Å–ª–∏ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –≤–µ—Ä–Ω–µ—Ç—Å—è 2 (—Å—Ç—Ä–æ–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    return len(col_values) + 1


def upload_data_to_sheet(worksheet, data):
    """–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç"""
    if not data:
        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ –ª–∏—Å—Ç {worksheet.title}")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    next_row = get_next_empty_row(worksheet)
    logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: {next_row}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = worksheet.row_values(1)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    rows_to_append = []
    for item in data:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        row = []
        for header in headers:
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
            if header in item:
                value = item[header]
            else:
                # –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                found = False
                for key, val in item.items():
                    if key.lower() == header.lower():
                        value = val
                        found = True
                        break

                if not found:
                    value = ""  # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            if value is None:
                value = ""
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–∏
            elif isinstance(value, (dict, list)):
                value = json.dumps(value, ensure_ascii=False)

            row.append(value)

        rows_to_append.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if rows_to_append:
        worksheet.append_rows(rows_to_append, value_input_option="USER_ENTERED")

    logger.info(f"–í—ã–≥—Ä—É–∂–µ–Ω–æ {len(rows_to_append)} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç {worksheet.title}")

    return len(rows_to_append)


async def export_orders_to_sheets():
    """–≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –≤ Google Sheets"""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö
        orders_data = await get_all_order_data()

        if not orders_data:
            logger.error("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        all_headers = set()
        for order in orders_data:
            for key in order.keys():
                all_headers.add(key)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞ –≤ –Ω–∞—á–∞–ª–µ)
        headers = []

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
        base_fields = [
            "id",
            "formId",
            "version",
            "orderTime",
            "statusId",
            "paymentAmount",
        ]
        for field in base_fields:
            if field in all_headers:
                headers.append(field)
                all_headers.remove(field)

        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_fields = [h for h in all_headers if h.startswith("contact_")]
        for field in sorted(contact_fields):
            headers.append(field)
            all_headers.remove(field)

        # –ó–∞—Ç–µ–º –ø–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_fields = [h for h in all_headers if h.startswith("delivery_")]
        for field in sorted(delivery_fields):
            headers.append(field)
            all_headers.remove(field)

        # –ó–∞—Ç–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        special_fields = [
            "products_info",
            "other_contacts",
            "tip_prodazu_values",
            "client_comments",
        ]
        for field in special_fields:
            if field in all_headers:
                headers.append(field)
                all_headers.remove(field)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for field in sorted(all_headers):
            headers.append(field)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        spreadsheet = connect_to_google_sheets()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ª–∏—Å—Ç
        worksheet = prepare_sheet(spreadsheet, SHEET_NAME, headers)

        # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        upload_data_to_sheet(worksheet, orders_data)

        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫–∞–∫ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
        order_ids = [order["id"] for order in orders_data]
        await mark_orders_as_uploaded(order_ids)

        logger.info("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await create_database()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞
    # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    # await process_json_file('–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É.json')
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    # –ü—Ä–∏–º–µ—Ä JSON —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
    # recordings_output_file = data_directory / f"recording_14.json"
    # await process_order(recordings_output_file)
    await export_orders_to_sheets()

    # # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets
    # non_uploaded_orders = await get_non_uploaded_orders()

    # # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
    # if non_uploaded_orders:
    #     # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä—É—é—â–∏–º, —Ç–∞–∫ –∫–∞–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ gspread –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
    #     upload_to_google_sheets(non_uploaded_orders)
    # else:
    #     print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets")


if __name__ == "__main__":
    # get_salesdrive_orders()
    asyncio.run(main())
