import asyncio
import logging
import json
import os
import sys
from pathlib import Path
from typing import Optional, Union
from loguru import logger
from pathlib import Path
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.session import get_session
from app.services.import_service import ImportService

current_directory = Path.cwd()
log_directory = current_directory / "log"
data_directory = current_directory / "data"

log_directory.mkdir(parents=True, exist_ok=True)
data_directory.mkdir(parents=True, exist_ok=True)

log_file_path = log_directory / "log_message.log"

logger.remove()
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    log_file_path,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {line} | {message}",
    level="DEBUG",
    encoding="utf-8",
    rotation="10 MB",
    retention="7 days",
)

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (—Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥)
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{line}</cyan> | <cyan>{message}</cyan>",
    level="DEBUG",
    enqueue=True,
)

async def import_from_file(file_path: Union[str, Path], session: AsyncSession) -> dict:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        file_path: –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É.
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –æ—à–∏–±–∫–∞—Ö.
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Path, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        if isinstance(file_path, str):
            file_path = Path(file_path)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not file_path.exists():
            error_msg = f"File {file_path} does not exist"
            logger.error(error_msg)
            return {"success": False, "orders_imported": 0, "errors": [error_msg]}
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as file:
            json_data = file.read()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        import_service = ImportService(session)
        result = await import_service.import_from_json(json_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result["success"]:
            logger.info(f"Successfully imported {result['orders_imported']} orders from {file_path.name}")
        else:
            logger.error(f"Import failed for {file_path.name}: {result['errors']}")
        
        return result
    
    except Exception as e:
        error_msg = f"Error importing from file {file_path.name}: {str(e)}"
        logger.exception(error_msg)
        return {"success": False, "orders_imported": 0, "errors": [error_msg]}


async def import_from_directory(directory_path: Union[str, Path], pattern: str = "*.json", session: AsyncSession = None) -> dict:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö JSON-—Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω—É.
    
    Args:
        directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å JSON-—Ñ–∞–π–ª–∞–º–∏.
        pattern: –®–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "*.json").
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è).
        
    Returns:
        dict: –°–≤–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞.
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Path, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    if isinstance(directory_path, str):
        directory_path = Path(directory_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not directory_path.exists() or not directory_path.is_dir():
        error_msg = f"Directory {directory_path} does not exist or is not a directory"
        logger.error(error_msg)
        return {"success": False, "orders_imported": 0, "errors": [error_msg]}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files = list(directory_path.glob(pattern))
    
    if not files:
        logger.warning(f"No files matching pattern '{pattern}' found in {directory_path}")
        return {"success": True, "orders_imported": 0, "errors": []}
    
    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    close_session = False
    if session is None:
        session_ctx = get_session()
        session = await session_ctx.__aenter__()
        close_session = True
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        total_imported = 0
        total_errors = []
        
        for file_path in files:
            result = await import_from_file(file_path, session)
            total_imported += result.get("orders_imported", 0)
            if not result.get("success", False):
                total_errors.extend(result.get("errors", []))
        
        return {
            "success": len(total_errors) == 0,
            "orders_imported": total_imported,
            "files_processed": len(files),
            "errors": total_errors
        }
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –º—ã –µ—ë —Å–æ–∑–¥–∞–ª–∏
        if close_session:
            await session_ctx.__aexit__(None, None, None)


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –ª–∏–±–æ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ª–∏–±–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    if len(sys.argv) > 1:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = sys.argv[1]
        async with get_session() as session:
            await import_from_file(file_path, session)
    else:
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
        recordings_output_file = data_directory / "recording_4.json"
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        async with get_session() as session:
            result = await import_from_file(recordings_output_file, session)
            
            if result["success"]:
                logger.info(f"Import completed successfully: {result['orders_imported']} orders imported")
            else:
                logger.error(f"Import failed: {result['errors']}")


if __name__ == "__main__":
    asyncio.run(main())