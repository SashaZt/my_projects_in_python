# services/booking_service.py
from typing import List, Optional, Tuple
from datetime import datetime, timedelta
from database.connection import get_db
from database.models import Booking
from config import CANCEL_HOURS_LIMIT

class BookingService:
    @staticmethod
    async def register_user(event_id: int, user_id: int) -> Tuple[bool, str]:
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
        async with get_db() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
            async with db.execute(
                "SELECT * FROM bookings WHERE event_id = ? AND user_id = ? AND status = 'registered'",
                (event_id, user_id)
            ) as cursor:
                existing = await cursor.fetchone()
                
            if existing:
                return False, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
            async with db.execute(
                """SELECT COUNT(*) FROM bookings 
                   WHERE event_id = ? AND status = 'registered'""",
                (event_id,)
            ) as cursor:
                count = await cursor.fetchone()
                current_bookings = count[0] if count else 0
            
            if current_bookings >= 4:  # MAX_PARTICIPANTS
                return False, "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute(
                """INSERT OR REPLACE INTO bookings (event_id, user_id, status) 
                   VALUES (?, ?, 'registered')""",
                (event_id, user_id)
            )
            await db.commit()
            
            return True, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"
    
    @staticmethod
    async def cancel_booking(event_id: int, user_id: int) -> Tuple[bool, str]:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            async with db.execute(
                "SELECT event_date, event_time FROM events WHERE id = ?", (event_id,)
            ) as cursor:
                event_info = await cursor.fetchone()
                
            if not event_info:
                return False, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            event_date, event_time = event_info
            event_datetime = datetime.strptime(f"{event_date} {event_time}", "%d.%m.%Y %H:%M")
            now = datetime.now()
            time_diff = event_datetime - now
            
            if time_diff.total_seconds() < CANCEL_HOURS_LIMIT * 3600:
                return False, f"–û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ {CANCEL_HOURS_LIMIT} —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
            async with db.execute(
                "SELECT * FROM bookings WHERE event_id = ? AND user_id = ? AND status = 'registered'",
                (event_id, user_id)
            ) as cursor:
                booking = await cursor.fetchone()
                
            if not booking:
                return False, "–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ"
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            await db.execute(
                """UPDATE bookings SET status = 'cancelled', cancelled_at = CURRENT_TIMESTAMP 
                   WHERE event_id = ? AND user_id = ?""",
                (event_id, user_id)
            )
            await db.commit()
            
            return True, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞"
    
    @staticmethod
    async def get_event_bookings(event_id: int) -> List[Booking]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
        async with get_db() as db:
            async with db.execute(
                """SELECT * FROM bookings 
                   WHERE event_id = ? AND status = 'registered'
                   ORDER BY created_at""",
                (event_id,)
            ) as cursor:
                rows = await cursor.fetchall()
                return [Booking(*row) for row in rows]
    
    @staticmethod
    async def get_user_bookings(user_id: int) -> List[Tuple[Booking, str, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö"""
        async with get_db() as db:
            async with db.execute(
                """SELECT b.*, e.title, e.event_date, e.event_time 
                   FROM bookings b
                   JOIN events e ON b.event_id = e.id
                   WHERE b.user_id = ? AND b.status = 'registered'
                   ORDER BY e.event_date, e.event_time""",
                (user_id,)
            ) as cursor:
                rows = await cursor.fetchall()
                return [(Booking(*row[:6]), row[6], row[7], row[8]) for row in rows]
    
    @staticmethod
    async def get_booking_count(event_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
        from config.logger import logger
        
        async with get_db() as db:
            async with db.execute(
                "SELECT COUNT(*) FROM bookings WHERE event_id = ? AND status = 'registered'",
                (event_id,)
            ) as cursor:
                result = await cursor.fetchone()
                count = result[0] if result else 0
                
                logger.debug(f"üìä –°–æ–±—ã—Ç–∏–µ {event_id}: –Ω–∞–π–¥–µ–Ω–æ {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                return count