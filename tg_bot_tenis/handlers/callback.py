# handlers/callback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.logger import logger
from services.user_service import UserService
from services.event_service import EventService
from services.booking_service import BookingService
from keyboards.inline import InlineKeyboards
from utils.formatters import MessageFormatter

router = Router()

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="MarkdownV2"):

    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if "message is not modified" in str(e).lower():
            await callback.answer("üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        logger.error(f"[Telegram Markdown Error] {e}")
@router.callback_query(F.data.startswith("register_"))
async def register_for_event(callback: CallbackQuery):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
    logger.info(f"DEBUG CALLBACK: register_ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer()
    
    event_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserService.get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
    success, message = await BookingService.register_user(event_id, user.id)
    
    if success:
        await callback.answer("‚úÖ " + message, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        event = await EventService.get_event_by_id(event_id)
        if event:
            message_text = await MessageFormatter.format_event_message(event)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = InlineKeyboardBuilder()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            bookings = await BookingService.get_event_bookings(event_id)
            user_registered = any(booking.user_id == user.id for booking in bookings)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
            booking_count = len(bookings)
            has_free_places = booking_count < 4
            
            if user_registered:
                builder.add(
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{event_id}")
                )
            elif has_free_places:
                builder.add(
                    InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"register_{event_id}")
                )
            else:
                builder.add(
                    InlineKeyboardButton(text="üîí –ù–µ—Ç –º–µ—Å—Ç", callback_data="no_places")
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            builder.add(
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{event_id}"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data="user_events")
            )
            builder.adjust(1, 2)
            
            await safe_edit_message(
                callback,
                message_text,
                reply_markup=builder.as_markup()
            )
    else:
        await callback.answer("‚ùå " + message, show_alert=True)

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_registration(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
    logger.info(f"DEBUG CALLBACK: cancel_ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer()
    
    event_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserService.get_or_create_user(callback.from_user.id)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    success, message = await BookingService.cancel_booking(event_id, user.id)
    
    if success:
        await callback.answer("‚úÖ " + message, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        event = await EventService.get_event_by_id(event_id)
        if event:
            message_text = await MessageFormatter.format_event_message(event)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = InlineKeyboardBuilder()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            bookings = await BookingService.get_event_bookings(event_id)
            user_registered = any(booking.user_id == user.id for booking in bookings)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
            booking_count = len(bookings)
            has_free_places = booking_count < 4
            
            if user_registered:
                builder.add(
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{event_id}")
                )
            elif has_free_places:
                builder.add(
                    InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"register_{event_id}")
                )
            else:
                builder.add(
                    InlineKeyboardButton(text="üîí –ù–µ—Ç –º–µ—Å—Ç", callback_data="no_places")
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            builder.add(
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{event_id}"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data="user_events")
            )
            builder.adjust(1, 2)
            
            await safe_edit_message(
                callback,
                message_text,
                reply_markup=builder.as_markup()
            )
    else:
        await callback.answer("‚ùå " + message, show_alert=True)

@router.callback_query(F.data.startswith("refresh_"))
async def refresh_event(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏"""
    logger.info(f"DEBUG CALLBACK: refresh_ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º...")
    
    event_id = int(callback.data.split("_")[1])
    event = await EventService.get_event_by_id(event_id)
    
    if not event:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    message_text = await MessageFormatter.format_event_message(event)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await UserService.get_or_create_user(callback.from_user.id)
    bookings = await BookingService.get_event_bookings(event_id)
    user_registered = any(booking.user_id == user.id for booking in bookings)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    booking_count = len(bookings)
    has_free_places = booking_count < 4
    
    if user_registered:
        builder.add(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{event_id}")
        )
    elif has_free_places:
        builder.add(
            InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"register_{event_id}")
        )
    else:
        builder.add(
            InlineKeyboardButton(text="üîí –ù–µ—Ç –º–µ—Å—Ç", callback_data="no_places")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.add(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{event_id}"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data="user_events")
    )
    builder.adjust(1, 2)
    
    await safe_edit_message(
        callback,
        message_text,
        reply_markup=builder.as_markup()
    )