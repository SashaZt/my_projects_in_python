# handlers/group.py 
from aiogram import Router, F
from aiogram.types import CallbackQuery
from datetime import datetime, timedelta
from services.user_service import UserService
from services.event_service import EventService
from services.booking_service import BookingService
from utils.group_formatters import GroupMessageFormatter
from config import GROUP_ID
from config.logger import logger

router = Router()
_last_updates = {}
_user_cooldowns = {}


# –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞:
def check_user_cooldown(user_id: int, cooldown_seconds: int = 3) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏"""
    global _user_cooldowns
    
    now = datetime.now()
    
    if user_id in _user_cooldowns:
        last_action = _user_cooldowns[user_id]
        time_diff = (now - last_action).total_seconds()
        
        if time_diff < cooldown_seconds:
            return False  # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    _user_cooldowns[user_id] = now
    return True  # –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
@router.callback_query(F.data.regexp(r"^join_event_\d+$"))
async def join_any_event(callback: CallbackQuery):
    """–ó–∞–ø–∏—Å—å –Ω–∞ –õ–Æ–ë–û–ï —Å–æ–±—ã—Ç–∏–µ (–Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ)"""
    user_id = callback.from_user.id
    
    # –ü–†–û–í–ï–†–ö–ê –ö–£–õ–î–ê–£–ù–ê - –¥–æ–±–∞–≤—å—Ç–µ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
    if not check_user_cooldown(user_id, cooldown_seconds=3):
        logger.warning(f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏")
        await callback.answer(
            "‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º", 
            show_alert=True
        )
        return
    
    logger.info(f"üîç UNIVERSAL JOIN: {callback.data} –æ—Ç {user_id}")
    
    await callback.answer()
    
    if callback.message.chat.id != GROUP_ID:
        await callback.answer("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
        return
    
    event_id = int(callback.data.split("_")[2])
    
    user = await UserService.get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    event = await EventService.get_event_by_id(event_id)
    if not event:
        await callback.answer("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ", show_alert=True)
        return
    
    success, message = await BookingService.register_user(event_id, user.id)
    await callback.answer(f"{'‚úÖ' if success else '‚ùå'} {message}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –±—ã–ª–∞ —Ä–µ–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
    if success:
        await update_group_message(callback, event_id)

@router.callback_query(F.data.regexp(r"^leave_event_\d+$"))
async def leave_any_event(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –õ–Æ–ë–û–ï —Å–æ–±—ã—Ç–∏–µ (–Ω–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ)"""
    user_id = callback.from_user.id
    
    # –ü–†–û–í–ï–†–ö–ê –ö–£–õ–î–ê–£–ù–ê - –¥–æ–±–∞–≤—å—Ç–µ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
    if not check_user_cooldown(user_id, cooldown_seconds=3):
        logger.warning(f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏")
        await callback.answer(
            "‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º", 
            show_alert=True
        )
        return
    
    logger.info(f"üîç UNIVERSAL LEAVE: {callback.data} –æ—Ç {user_id}")
    
    await callback.answer()
    
    if callback.message.chat.id != GROUP_ID:
        await callback.answer("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
        return
    
    event_id = int(callback.data.split("_")[2])
    
    user = await UserService.get_or_create_user(callback.from_user.id)
    
    event = await EventService.get_event_by_id(event_id)
    if not event:
        await callback.answer("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ", show_alert=True)
        return
    
    success, message = await BookingService.cancel_booking(event_id, user.id)
    await callback.answer(f"{'‚úÖ' if success else '‚ùå'} {message}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –±—ã–ª–∞ —Ä–µ–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã
    if success:
        await update_group_message(callback, event_id)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async def cleanup_old_cooldowns():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ (–≤—ã–∑—ã–≤–∞–π—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
    global _user_cooldowns, _last_updates
    
    now = datetime.now()
    cutoff_time = now - timedelta(minutes=10)  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
    
    # –û—á–∏—â–∞–µ–º –∫—É–ª–¥–∞—É–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    _user_cooldowns = {
        user_id: last_time 
        for user_id, last_time in _user_cooldowns.items() 
        if last_time > cutoff_time
    }
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
    _last_updates = {
        msg_key: last_time 
        for msg_key, last_time in _last_updates.items() 
        if last_time > cutoff_time
    }

async def update_group_message(callback: CallbackQuery, event_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç flood control"""
    global _last_updates
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ –ª–∏ –º—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
        message_key = f"{callback.message.chat.id}_{callback.message.message_id}"
        now = datetime.now()
        
        if message_key in _last_updates:
            last_update = _last_updates[message_key]
            time_diff = (now - last_update).total_seconds()
            
            if time_diff < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                logger.warning(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id} - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã ({time_diff:.1f}—Å)")
                return
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
        
        event = await EventService.get_event_by_id(event_id)
        if not event:
            logger.error(f"‚ùå –°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_text = await GroupMessageFormatter.format_group_event_message(event)
        updated_keyboard = GroupMessageFormatter.create_group_keyboard(event_id)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "message is not modified"
        current_text = callback.message.text or callback.message.caption or ""
        if updated_text == current_text:
            logger.info(f"üìã –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
            return
        
        logger.debug(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {updated_text}")
        
        # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å markdown
        try:
            await callback.message.edit_text(
                updated_text,
                reply_markup=updated_keyboard,
                parse_mode="MarkdownV2"
            )
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            _last_updates[message_key] = now
            logger.success(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ")
            
        except Exception as markdown_error:
            error_msg = str(markdown_error).lower()
            
            if "message is not modified" in error_msg:
                logger.info(f"üìã –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)")
                return
            
            elif "flood control" in error_msg or "too many requests" in error_msg:
                logger.warning(f"üö´ Flood control –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                return
            
            elif "can't parse entities" in error_msg:
                logger.warning(f"‚ö†Ô∏è Markdown –æ—à–∏–±–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
                logger.debug(f"üß™ –û—à–∏–±–∫–∞: {markdown_error}")
                logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ—à–∏–±–∫—É:\n{updated_text}")
                logger.warning(f"‚ö†Ô∏è Markdown –æ—à–∏–±–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                # Fallback: —É–±–∏—Ä–∞–µ–º –≤–µ—Å—å markdown
                try:
                    # –£–±–∏—Ä–∞–µ–º –í–°–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    clean_text = updated_text.replace('**', '').replace('*', '').replace('\\', '').replace('_', '')
                    await callback.message.edit_text(
                        clean_text,
                        reply_markup=updated_keyboard
                    )
                    _last_updates[message_key] = now
                    logger.success(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ markdown")
                    
                except Exception as clean_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–∂–µ –±–µ–∑ markdown: {clean_error}")
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {markdown_error}")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@router.callback_query()
async def debug_all_group_callbacks(callback: CallbackQuery):
    """–û—Ç–ª–∞–¥–∫–∞ –í–°–ï–• callback'–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Ñ–∏–ª—å—Ç—Ä—ã –≤—ã—à–µ"""
    logger.debug(f"üêõ UNHANDLED: callback '{callback.data}' –æ—Ç {callback.from_user.id}")
    logger.debug(f"üêõ Chat ID: {callback.message.chat.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ª–∏ –º—ã –∫–∞–∫–æ–π-—Ç–æ —Ñ–æ—Ä–º–∞—Ç
    if callback.data:
        if "event" in callback.data:
            logger.warning(f"üö® –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–ø—É—â–µ–Ω callback —Å 'event': {callback.data}")
