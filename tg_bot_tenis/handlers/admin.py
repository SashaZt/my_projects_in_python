# handlers/admin.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.user_service import UserService
from services.event_service import EventService
from services.booking_service import BookingService
from keyboards.admin import AdminKeyboards
from utils.formatters import MessageFormatter
from utils.validators import Validators
from config import ADMIN_IDS, LOCATIONS
from config.logger import logger

router = Router()

class CreateEventStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_location = State()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    logger.info(f"DEBUG: ADMIN_IDS: {ADMIN_IDS}")
    logger.info(f"DEBUG: user_id –≤ ADMIN_IDS: {user_id in ADMIN_IDS}")
    
    if user_id not in ADMIN_IDS:
        await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í–∞—à ID: {user_id}\n–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ ID: {ADMIN_IDS}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –ë–î
    await UserService.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        is_admin=True
    )
    
    text = f"""üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"""
    
    keyboard = AdminKeyboards.main_menu()
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "admin_create_event")
async def start_create_event(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    logger.info(f"DEBUG: admin_create_event –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    
    await callback.answer()
    
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(CreateEventStates.waiting_for_title)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel"))
    
    try:
        await callback.message.edit_text(
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞`",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        logger.info("DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@router.callback_query(F.data == "admin_my_events")
async def show_admin_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info(f"DEBUG: admin_my_events –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    
    await callback.answer()
    
    user = await UserService.get_or_create_user(callback.from_user.id)
    events = await EventService.get_events_by_creator(user.id)
    
    if not events:
        try:
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ",
                reply_markup=AdminKeyboards.main_menu()
            )
        except Exception as e:
            logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await callback.message.answer(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"
            )
        return
    
    message_text = MessageFormatter.format_admin_event_list(events)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    for event in events[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–æ–±—ã—Ç–∏–π
        booking_count = await BookingService.get_booking_count(event.id)
        builder.add(
            InlineKeyboardButton(
                text=f"üèãÔ∏è‚Äç‚ôÇÔ∏è {event.title} ({booking_count}/4)",
                callback_data=f"admin_event_{event.id}"
            )
        )
    builder.add(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")
    )
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–±—ã—Ç–∏–π: {e}")

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    logger.info(f"DEBUG: admin_stats –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    
    await callback.answer()
    
    user = await UserService.get_or_create_user(callback.from_user.id)
    events = await EventService.get_events_by_creator(user.id)
    
    total_events = len(events)
    active_events = len([e for e in events if e.is_active])
    
    total_bookings = 0
    for event in events:
        bookings = await BookingService.get_booking_count(event.id)
        total_bookings += bookings
    
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìã –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {active_events}
üë• –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_bookings}

üìà **–î–µ—Ç–∞–ª–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º:**"""

    for event in events[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
        booking_count = await BookingService.get_booking_count(event.id)
        status = "üü¢" if event.is_active else "üî¥"
        stats_text += f"\n{status} {event.title}: {booking_count}/4"
    
    keyboard = AdminKeyboards.main_menu()
    
    try:
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@router.callback_query(F.data == "admin_main")
async def admin_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    await callback.answer()
    
    keyboard = AdminKeyboards.main_menu()
    
    try:
        await callback.message.edit_text(
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –≤ admin_main: {e}")

@router.callback_query(F.data.startswith("admin_event_"))
async def admin_event_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    logger.info(f"DEBUG: admin_event_ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await callback.answer()
    
    event_id = int(callback.data.split("_")[2])
    event = await EventService.get_event_by_id(event_id)
    
    if not event:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏
    message_text = await MessageFormatter.format_event_message(event)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    bookings = await BookingService.get_event_bookings(event_id)
    
    if bookings:
        message_text += "\n\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n"
        
        for i, booking in enumerate(bookings, 1):
            user = await UserService.get_user_by_id(booking.user_id)
            if user:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                name_parts = []
                
                if user.first_name:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã markdown
                    first_name = user.first_name.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
                    name_parts.append(first_name)
                if user.last_name:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã markdown
                    last_name = user.last_name.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
                    name_parts.append(last_name)
                
                display_name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º @)
                if user.username:
                    # username = user.username.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
                    username = user.username.replace('*', '\\*').replace('`', '\\`')
                    display_name += f" (@{username})"
                
                message_text += f"{i}. {display_name}\n"
            else:
                message_text += f"{i}\\. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {booking.user_id}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥
        total_income = len(bookings) * 90
        message_text += f"\nüí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} –∑–ª–æ—Ç—ã—Ö**"
    else:
        message_text += "\n\nüë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è"
    

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_{event_id}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_{event_id}"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_my_events")
    )
    builder.adjust(2, 1)
    
    try:
        await callback.message.edit_text(
            f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ–º**\n\n{message_text}",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        logger.info("DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è: {e}")
        # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å—é markdown —Ä–∞–∑–º–µ—Ç–∫—É
            clean_text = message_text.replace('**', '').replace('*', '').replace('`', '')
            # clean_text = message_text.replace('**', '').replace('*', '').replace('_', '').replace('`', '')
            await callback.message.edit_text(
                f"üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ–º\n\n{clean_text}",
                reply_markup=builder.as_markup()
            )
            logger.info("DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ markdown")
        except Exception as e2:
            logger.info(f"DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("admin_participants_"))
async def show_participants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è"""
    logger.info(f"DEBUG: admin_participants_ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await callback.answer()
    
    event_id = int(callback.data.split("_")[2])
    bookings = await BookingService.get_event_bookings(event_id)
    
    if not bookings:
        await callback.answer("üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
    event = await EventService.get_event_by_id(event_id)
    event_title = event.title if event else f"–°–æ–±—ã—Ç–∏–µ ID {event_id}"
    
    participants_text = f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è: {event_title}**\n\n"
    
    for i, booking in enumerate(bookings, 1):
        user = await UserService.get_user_by_id(booking.user_id)
        if user:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            name_parts = []
            
            if user.first_name:
                name_parts.append(user.first_name)
            if user.last_name:
                name_parts.append(user.last_name)
            
            display_name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.username:
                display_name += f" (@{user.username})"
            
            participants_text += f"{i}. {display_name}\n"
            participants_text += f"   üì± ID: {user.telegram_id}\n\n"
        else:
            participants_text += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {booking.user_id}\n\n"
    
    participants_text += f"üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥: {len(bookings) * 90} –∑–ª–æ—Ç—ã—Ö**"
    
    await callback.message.answer(participants_text, parse_mode="Markdown")
@router.callback_query(F.data.startswith("admin_delete_"))
async def confirm_delete_event(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    logger.info(f"DEBUG: admin_delete_ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await callback.answer()
    
    event_id = int(callback.data.split("_")[2])
    event = await EventService.get_event_by_id(event_id)
    
    if not event:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    keyboard = AdminKeyboards.confirm_delete(event_id)
    try:
        await callback.message.edit_text(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ:\n"
            f"**{event.title}**\n"
            f"üìÖ {event.event_date} –≤ {event.event_time}?\n\n"
            f"‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

@router.callback_query(F.data.startswith("admin_confirm_delete_"))
async def delete_event(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    logger.info(f"DEBUG: admin_confirm_delete_ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await callback.answer()
    
    event_id = int(callback.data.split("_")[3])
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    await EventService.deactivate_event(event_id)
    
    try:
        await callback.message.edit_text(
            "‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
            reply_markup=AdminKeyboards.main_menu()
        )
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await callback.message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

@router.callback_query(F.data.startswith("admin_edit_"))
async def edit_event(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    logger.info(f"DEBUG: admin_edit_ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await callback.answer()
    
    event_id = int(callback.data.split("_")[2])
    event = await EventService.get_event_by_id(event_id)
    
    if not event:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"edit_date_{event_id}"),
        InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_time_{event_id}"),
        InlineKeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ", callback_data=f"edit_location_{event_id}"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_event_{event_id}")
    )
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**\n\n"
            f"**{event.title}**\n"
            f"üìÖ –î–∞—Ç–∞: {event.event_date}\n"
            f"üïê –í—Ä–µ–º—è: {event.event_time}\n"
            f"üìç –ú–µ—Å—Ç–æ: {event.location}\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.info(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")



@router.message(CreateEventStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    title = message.text.strip()
    
    if len(title) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        return
    
    await state.update_data(title=title)
    await state.set_state(CreateEventStates.waiting_for_date)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel"))
    
    await message.answer(
        "üìÖ **–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `15.07.2025`",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.message(CreateEventStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    date_str = message.text.strip()
    
    if not Validators.validate_date(date_str):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `15.07.2025`"
        )
        return
    
    await state.update_data(event_date=date_str)
    await state.set_state(CreateEventStates.waiting_for_time)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel"))
    
    await message.answer(
        "üïê **–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `19:00`",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )


@router.message(CreateEventStates.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    time_str = message.text.strip()
    
    if not Validators.validate_time(time_str):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `19:00`"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    data = await state.get_data()
    event_date = data.get("event_date")
    
    if not Validators.validate_future_datetime(event_date, time_str):
        await message.answer(
            "‚ùå –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!"
        )
        return
    
    await state.update_data(event_time=time_str)
    await state.set_state(CreateEventStates.waiting_for_location)
    
    keyboard = AdminKeyboards.location_menu()  # –≠—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    await message.answer(
        "üìç **–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=keyboard
    )



@router.callback_query(F.data.startswith("location_"))
async def process_location(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–æ–ø–∏–∫–µ"""
    await callback.answer()
    
    location_id = callback.data.split("_")[1]
    
    if location_id not in LOCATIONS:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è", show_alert=True)
        return
    
    location = LOCATIONS[location_id]
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    user = await UserService.get_or_create_user(callback.from_user.id)
    event = await EventService.create_event(
        title=data["title"],
        event_date=data["event_date"],
        event_time=data["event_time"],
        location=location,
        created_by=user.id
    )
    
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø–∏–∫ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    from config import GROUP_ID, get_topic_id_for_date, get_weekday_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ—Ç—Å–∫–∞—è –ª–∏ —ç—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    is_kids = "–¥–µ—Ç" in data["title"].lower() or "—Ä–µ–±–µ–Ω–æ–∫" in data["title"].lower()
    
    topic_id = get_topic_id_for_date(data["event_date"], is_kids=is_kids)
    weekday_name = get_weekday_name(data["event_date"])
    
    if is_kids:
        topic_name = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–µ—Ç–µ–π"
    else:
        topic_name = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {weekday_name}"
    
    logger.info(f"üéØ –°–æ–±—ã—Ç–∏–µ {event.id} –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ {topic_id} ({topic_name})")
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        from utils.group_formatters import GroupMessageFormatter
        
        group_message_text = await GroupMessageFormatter.format_group_event_message(event)
        group_keyboard = GroupMessageFormatter.create_group_keyboard(event.id)
        
        logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}, —Ç–æ–ø–∏–∫ {topic_id}")
        logger.info(f"üìÑ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {group_message_text[:200]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫
        group_message = await callback.bot.send_message(
            chat_id=GROUP_ID,
            text=group_message_text,
            message_thread_id=topic_id,  # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ç–æ–ø–∏–∫–∞!
            reply_markup=group_keyboard,
            parse_mode="Markdown"
        )
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! Message ID: {group_message.message_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        await EventService.update_group_message_id(event.id, group_message.message_id)
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ë–ï–ó markdown
        success_message = f"""‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!

üéæ {event.title}
üìÖ {event.event_date} ({topic_name})
üïê {event.event_time}
üìç {location}

üì® –†–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ: {topic_name}
üÜî ID —Å–æ–±—ã—Ç–∏—è: {event.id}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø–µ."""
        
        await callback.message.edit_text(success_message)
        
        logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ {topic_id}")
        
    except Exception as e:
        logger.info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–æ–ø–∏–∫–µ: {e}")
        logger.info(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        simple_error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è. ID: {event.id}"
        
        try:
            await callback.message.edit_text(simple_error)
        except Exception as e2:
            logger.info(f"‚ùå –î–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: {e2}")
            try:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await callback.message.answer(f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ. ID: {event.id}")
            except Exception as e3:
                logger.info(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e3}")
                # –•–æ—Ç—è –±—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ callback
                await callback.answer(f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {event.id}", show_alert=True)


@router.callback_query(F.data == "admin_cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()
    await state.clear()
    
    keyboard = AdminKeyboards.main_menu()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
        "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# DEBUG —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –í –°–ê–ú–û–ú –ö–û–ù–¶–ï!
@router.callback_query()
async def debug_all_admin_callbacks(callback: CallbackQuery):
    """–û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö callback'–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å"""
    logger.info(f"DEBUG: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    logger.info(f"DEBUG: –î–∞–Ω–Ω—ã–µ callback: {callback.data}")
    logger.info(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω: {callback.from_user.id in ADMIN_IDS}")
    
    await callback.answer("üêõ DEBUG: Callback –ø–æ–ª—É—á–µ–Ω –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)


@router.callback_query()
async def debug_admin_callbacks(callback: CallbackQuery):
    """Debug –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤"""
    logger.info(f"üîß ADMIN DEBUG: callback –æ—Ç {callback.from_user.id}")
    logger.info(f"üîß ADMIN Chat ID: {callback.message.chat.id}")
    logger.info(f"üîß ADMIN callback.data: '{callback.data}'")