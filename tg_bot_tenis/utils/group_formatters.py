import re
from typing import List
from database.models import Event
from config import PRICE, CURRENCY, CONDITIONS_TEXT
from config.logger import logger

class GroupMessageFormatter:
    @staticmethod
    async def format_group_event_message(event: Event) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å MarkdownV2"""
        from services.booking_service import BookingService
        
        try:
            booking_count = await BookingService.get_booking_count(event.id)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Å—Ç
            places_visual = ""
            for i in range(4):
                if i < booking_count:
                    places_visual += "üü©"
                else:
                    places_visual += "‚¨úÔ∏è"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è MarkdownV2
            safe_title = escape_markdown_v2(event.title)
            safe_location = escape_markdown_v2(event.location)
            safe_conditions = escape_markdown_v2(CONDITIONS_TEXT)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            safe_date = escape_markdown_v2(str(event.event_date))
            safe_time = escape_markdown_v2(str(event.event_time))
            
            message = f"""üéæ *{safe_title}*

üìÖ –î–∞—Ç–∞: {safe_date}
üïê –í—Ä–µ–º—è: {safe_time}
üìç –ú–µ—Å—Ç–æ: {safe_location}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {places_visual} \\({booking_count}/4\\)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PRICE} {CURRENCY}

{safe_conditions}"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            bookings = await BookingService.get_event_bookings(event.id)
            if bookings:
                message += f"\n\nüìã *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n"
                
                from services.user_service import UserService
                for i, booking in enumerate(bookings, 1):
                    user = await UserService.get_user_by_id(booking.user_id)
                    if user:
                        if user.username:
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –¥–ª—è MarkdownV2
                            display_name = escape_markdown_v2(f"@{user.username}")
                        else:
                            name_parts = []
                            if user.first_name:
                                name_parts.append(escape_markdown_v2(user.first_name))
                            if user.last_name:
                                name_parts.append(escape_markdown_v2(user.last_name))
                            display_name = " ".join(name_parts) if name_parts else f"ID:{user.telegram_id}"
                        
                        message += f"{i}\\. {display_name}\n"
                    else:
                        message += f"{i}\\. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {booking.user_id}\n"
            
            logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message}")
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return await GroupMessageFormatter.create_simple_message(event)
    
    @staticmethod
    def create_group_keyboard(event_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", 
                callback_data=f"join_event_{event_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                callback_data=f"leave_event_{event_id}"
            )
        )
        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        return builder.as_markup()

class AdminMessageFormatter:
    @staticmethod
    async def format_event_created_message(event: Event, topic_id: int, weekday_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        
        from services.booking_service import BookingService
        booking_count = await BookingService.get_booking_count(event.id)
        
        message = f"""‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!

üéæ {event.title}
üìÖ {event.event_date} ({weekday_name})
üïê {event.event_time}
üìç {event.location}
üë• –ó–∞–ø–∏—Å–∞–Ω–æ: {booking_count}/4

üì® –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ: {weekday_name} (ID: {topic_id})
üÜî ID —Å–æ–±—ã—Ç–∏—è: {event.id}

üéØ –ß—Ç–æ –¥–∞–ª—å—à–µ:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ç–æ–ø–∏–∫–µ –≥—Ä—É–ø–ø—ã
‚Ä¢ –û–Ω–∏ —Å–º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
‚Ä¢ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ "üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"

üí° –°–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ç–æ–ø–∏–∫–µ —Ñ–æ—Ä—É–º–∞."""
        
        return message

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è MarkdownV2, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return ""
    
    # –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
    escape_chars = r'([_*[\]()~`>#+-=|{}.!\\])'
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(escape_chars, r'\\\1', text)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–æ–π–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    text = text.replace('___', '__\\r_')
    
    return text